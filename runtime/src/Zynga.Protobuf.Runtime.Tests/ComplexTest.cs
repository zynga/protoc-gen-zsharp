// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/complex_test.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf.File {

  /// <summary>Holder for reflection information generated from test/complex_test.proto</summary>
  public static partial class ComplexTestReflection {

    #region Descriptor
    /// <summary>File descriptor for test/complex_test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ComplexTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chd0ZXN0L2NvbXBsZXhfdGVzdC5wcm90bxIfY29tLnp5bmdhLnJ1bnRpbWUu",
            "cHJvdG9idWYuZmlsZRoSZXZlbnRfcGx1Z2luLnByb3RvIp4BCghNZXNzYWdl",
            "QRI5CgFiGAEgASgLMikuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmls",
            "ZS5NZXNzYWdlQkgAUgFiEgwKAWoYAiABKAVSAWoSDAoBaxgDIAEoBVIBaxIM",
            "CgFsGAQgASgFUgFsEgwKAW0YBSABKAVSAW0SDAoBbhgGIAEoBVIBbhIMCgFv",
            "GAcgASgFUgFvQgMKAWEi/wEKCE1lc3NhZ2VCEj4KAWMYAiADKAsyMC5jb20u",
            "enluZ2EucnVudGltZS5wcm90b2J1Zi5maWxlLk1lc3NhZ2VCLkNFbnRyeVIB",
            "YxIMCgFpGAEgASgFUgFpEgwKAWsYAyABKAVSAWsSDAoBbBgEIAEoBVIBbBIM",
            "CgFtGAUgASgFUgFtEgwKAW4YBiABKAVSAW4SDAoBbxgHIAEoBVIBbxpfCgZD",
            "RW50cnkSEAoDa2V5GAEgASgJUgNrZXkSPwoFdmFsdWUYAiABKAsyKS5jb20u",
            "enluZ2EucnVudGltZS5wcm90b2J1Zi5maWxlLk1lc3NhZ2VDUgV2YWx1ZToC",
            "OAEi/wEKCE1lc3NhZ2VDEj4KAWQYAyADKAsyMC5jb20uenluZ2EucnVudGlt",
            "ZS5wcm90b2J1Zi5maWxlLk1lc3NhZ2VDLkRFbnRyeVIBZBIMCgFpGAEgASgF",
            "UgFpEgwKAWoYAiABKAVSAWoSDAoBbBgEIAEoBVIBbBIMCgFtGAUgASgFUgFt",
            "EgwKAW4YBiABKAVSAW4SDAoBbxgHIAEoBVIBbxpfCgZERW50cnkSEAoDa2V5",
            "GAEgASgJUgNrZXkSPwoFdmFsdWUYAiABKAsyKS5jb20uenluZ2EucnVudGlt",
            "ZS5wcm90b2J1Zi5maWxlLk1lc3NhZ2VEUgV2YWx1ZToCOAEilwEKCE1lc3Nh",
            "Z2VEEjcKAWUYBCABKAsyKS5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5m",
            "aWxlLk1lc3NhZ2VFUgFlEgwKAWkYASABKAVSAWkSDAoBahgCIAEoBVIBahIM",
            "CgFrGAMgASgFUgFrEgwKAW0YBSABKAVSAW0SDAoBbhgGIAEoBVIBbhIMCgFv",
            "GAcgASgFUgFvIpcBCghNZXNzYWdlRRI3CgFmGAUgASgLMikuY29tLnp5bmdh",
            "LnJ1bnRpbWUucHJvdG9idWYuZmlsZS5NZXNzYWdlRlIBZhIMCgFpGAEgASgF",
            "UgFpEgwKAWoYAiABKAVSAWoSDAoBaxgDIAEoBVIBaxIMCgFsGAQgASgFUgFs",
            "EgwKAW4YBiABKAVSAW4SDAoBbxgHIAEoBVIBbyKXAQoITWVzc2FnZUYSNwoB",
            "ZxgGIAEoCzIpLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLmZpbGUuTWVz",
            "c2FnZUdSAWcSDAoBaRgBIAEoBVIBaRIMCgFqGAIgASgFUgFqEgwKAWsYAyAB",
            "KAVSAWsSDAoBbBgEIAEoBVIBbBIMCgFtGAUgASgFUgFtEgwKAW8YByABKAVS",
            "AW8ibAoITWVzc2FnZUcSDAoBaBgHIAMoBVIBaBIMCgFpGAEgASgFUgFpEgwK",
            "AWoYAiABKAVSAWoSDAoBaxgDIAEoBVIBaxIMCgFsGAQgASgFUgFsEgwKAW0Y",
            "BSABKAVSAW0SDAoBbhgGIAEoBVIBbiJtCghNZXNzYWdlTxI3CgFwGAggASgL",
            "MikuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5NZXNzYWdlUFIB",
            "cBIMCgF0GAkgASgFUgF0EgwKAXUYCiABKAVSAXUSDAoBdhgLIAEoBVIBdiJt",
            "CghNZXNzYWdlUBI3CgFxGAkgASgLMikuY29tLnp5bmdhLnJ1bnRpbWUucHJv",
            "dG9idWYuZmlsZS5NZXNzYWdlUVIBcRIMCgFzGAggASgFUgFzEgwKAXUYCiAB",
            "KAVSAXUSDAoBdhgLIAEoBVIBdiJtCghNZXNzYWdlURI3CgFyGAogAygLMiku",
            "Y29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5NZXNzYWdlUlIBchIM",
            "CgFzGAggASgFUgFzEgwKAXQYCSABKAVSAXQSDAoBdhgLIAEoBVIBdiJCCghN",
            "ZXNzYWdlUhIMCgFyGAsgASgJUgFyEgwKAXMYCCABKAVSAXMSDAoBdBgJIAEo",
            "BVIBdBIMCgF1GAogASgFUgF1QgTYuB4BYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageA), global::Com.Zynga.Runtime.Protobuf.File.MessageA.Parser, new[]{ "B", "J", "K", "L", "M", "N", "O" }, new[]{ "A" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageB), global::Com.Zynga.Runtime.Protobuf.File.MessageB.Parser, new[]{ "C", "I", "K", "L", "M", "N", "O" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageC), global::Com.Zynga.Runtime.Protobuf.File.MessageC.Parser, new[]{ "D", "I", "J", "L", "M", "N", "O" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageD), global::Com.Zynga.Runtime.Protobuf.File.MessageD.Parser, new[]{ "E", "I", "J", "K", "M", "N", "O" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageE), global::Com.Zynga.Runtime.Protobuf.File.MessageE.Parser, new[]{ "F", "I", "J", "K", "L", "N", "O" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageF), global::Com.Zynga.Runtime.Protobuf.File.MessageF.Parser, new[]{ "G", "I", "J", "K", "L", "M", "O" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageG), global::Com.Zynga.Runtime.Protobuf.File.MessageG.Parser, new[]{ "H", "I", "J", "K", "L", "M", "N" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageO), global::Com.Zynga.Runtime.Protobuf.File.MessageO.Parser, new[]{ "P", "T", "U", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageP), global::Com.Zynga.Runtime.Protobuf.File.MessageP.Parser, new[]{ "Q", "S", "U", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageQ), global::Com.Zynga.Runtime.Protobuf.File.MessageQ.Parser, new[]{ "R", "S", "T", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.MessageR), global::Com.Zynga.Runtime.Protobuf.File.MessageR.Parser, new[]{ "R", "S", "T", "U" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MessageA : zpr::EventRegistry<MessageA>, pb::IMessage<MessageA> {
    private static readonly pb::MessageParser<MessageA> _parser = new pb::MessageParser<MessageA>(() => new MessageA());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageA(MessageA other) : this() {
      j_ = other.j_;
      k_ = other.k_;
      l_ = other.l_;
      m_ = other.m_;
      n_ = other.n_;
      o_ = other.o_;
      switch (other.ACase) {
        case AOneofCase.B:
          B = other.B.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageA Clone() {
      return new MessageA(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageA Message { get{ return this; } }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageB B {
      get { return aCase_ == AOneofCase.B ? (global::Com.Zynga.Runtime.Protobuf.File.MessageB) a_ : null; }
      set {
        if(aCase_ == AOneofCase.B && a_ != null) ((global::Com.Zynga.Runtime.Protobuf.File.MessageB) a_).ClearParent();
        value.SetParent(Context, 1);
        #if !DISABLE_EVENTS
        if(aCase_ != AOneofCase.B || !value.Equals(a_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        a_ = value;
        aCase_ = value == null ? AOneofCase.None : AOneofCase.B;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    private object a_;
    /// <summary>Enum of possible cases for the "a" oneof.</summary>
    public enum AOneofCase {
      None = 0,
      B = 1,
    }
    private AOneofCase aCase_ = AOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AOneofCase ACase {
      get { return aCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearA() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(B, other.B)) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      if (ACase != other.ACase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aCase_ == AOneofCase.B) hash ^= B.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      hash ^= (int) aCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aCase_ == AOneofCase.B) {
        output.WriteRawTag(10);
        output.WriteMessage(B);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aCase_ == AOneofCase.B) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(B);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageA other) {
      if (other == null) {
        return;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
      switch (other.ACase) {
        case AOneofCase.B:
          if (B == null) {
            B = new global::Com.Zynga.Runtime.Protobuf.File.MessageB();
            B.SetParent(Context, 1);
          }
          B.MergeFrom(other.B);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Com.Zynga.Runtime.Protobuf.File.MessageB subBuilder = new global::Com.Zynga.Runtime.Protobuf.File.MessageB();
            if (aCase_ == AOneofCase.B) {
              subBuilder.MergeFrom(B);
            }
            input.ReadMessage(subBuilder);
            a_ = subBuilder;
            aCase_ = AOneofCase.B;
            subBuilder.SetParent(Context, 1);
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (a_ == null) {
                a_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageB();
                (a_ as zpr::IEventRegistry)?.SetParent(Context, 1);
              }
              (a_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              a_   = global::Com.Zynga.Runtime.Protobuf.File.MessageB.Parser.ParseFrom(e.Set.ByteData);
              (a_ as zpr::IEventRegistry)?.SetParent(Context, 1);
            }
            aCase_ = a_ == null ? AOneofCase.None : AOneofCase.B;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageB : zpr::EventRegistry<MessageB>, pb::IMessage<MessageB> {
    private static readonly pb::MessageParser<MessageB> _parser = new pb::MessageParser<MessageB>(() => new MessageB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageB() {
      OnConstruction();
    c_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC>(cMapConverter, Context, 2, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageB(MessageB other) : this() {
      c_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC>(cMapConverter, Context, 2, other.c_.Clone(), true);
      i_ = other.i_;
      k_ = other.k_;
      l_ = other.l_;
      m_ = other.m_;
      n_ = other.n_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageB Clone() {
      return new MessageB(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageB Message { get{ return this; } }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC>.Codec _map_c_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.File.MessageC.Parser), 18);
    internal class CMapConverter : EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, global::Com.Zynga.Runtime.Protobuf.File.MessageC value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeyc = dataStream.ReadString();
        var realValuec = new global::Com.Zynga.Runtime.Protobuf.File.MessageC();
        dataStream.ReadMessage(realValuec);;
        return new KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC>(realKeyc, realValuec);
      }
    }
    private static readonly EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC> cMapConverter = new CMapConverter();
    private readonly EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC> c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageC> C {
      get { return c_; }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!c_.Equals(other.c_)) return false;
      if (I != other.I) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= c_.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      c_.WriteTo(output, _map_c_codec);
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += c_.CalculateSize(_map_c_codec);
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageB other) {
      if (other == null) {
        return;
      }
      c_.Add(other.c_);
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 18: {
            c_.AddEntriesFrom(input, _map_c_codec);
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 2: {
            c_.ApplyEvent(e.MapEvent);
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageC : zpr::EventRegistry<MessageC>, pb::IMessage<MessageC> {
    private static readonly pb::MessageParser<MessageC> _parser = new pb::MessageParser<MessageC>(() => new MessageC());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageC() {
      OnConstruction();
    d_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD>(dMapConverter, Context, 3, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageC(MessageC other) : this() {
      d_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD>(dMapConverter, Context, 3, other.d_.Clone(), true);
      i_ = other.i_;
      j_ = other.j_;
      l_ = other.l_;
      m_ = other.m_;
      n_ = other.n_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageC Clone() {
      return new MessageC(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageC Message { get{ return this; } }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD>.Codec _map_d_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.File.MessageD.Parser), 26);
    internal class DMapConverter : EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, global::Com.Zynga.Runtime.Protobuf.File.MessageD value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeyd = dataStream.ReadString();
        var realValued = new global::Com.Zynga.Runtime.Protobuf.File.MessageD();
        dataStream.ReadMessage(realValued);;
        return new KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD>(realKeyd, realValued);
      }
    }
    private static readonly EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD> dMapConverter = new DMapConverter();
    private readonly EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD> d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.MessageD> D {
      get { return d_; }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!d_.Equals(other.d_)) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= d_.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      d_.WriteTo(output, _map_d_codec);
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += d_.CalculateSize(_map_d_codec);
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageC other) {
      if (other == null) {
        return;
      }
      d_.Add(other.d_);
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 26: {
            d_.AddEntriesFrom(input, _map_d_codec);
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 3: {
            d_.ApplyEvent(e.MapEvent);
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageD : zpr::EventRegistry<MessageD>, pb::IMessage<MessageD> {
    private static readonly pb::MessageParser<MessageD> _parser = new pb::MessageParser<MessageD>(() => new MessageD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageD(MessageD other) : this() {
      if(other.e_ != null) {
        e_ = other.E.Clone();
        e_.SetParent(Context, 4);
      }
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      m_ = other.m_;
      n_ = other.n_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageD Clone() {
      return new MessageD(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageD Message { get{ return this; } }

    /// <summary>Field number for the "e" field.</summary>
    public const int EFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.File.MessageE e_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageE E {
      get { return e_; }
      set {
        if(e_ != null) e_.ClearParent();
        value.SetParent(Context, 4);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(e_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        e_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(E, other.E)) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (e_ != null) hash ^= E.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (e_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(E);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (e_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(E);
      }
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageD other) {
      if (other == null) {
        return;
      }
      if (other.e_ != null) {
        if (e_ == null) {
          e_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageE();
          e_.SetParent(Context, 4);
        }
        E.MergeFrom(other.E);
      }
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 34: {
            if (e_ == null) {
              e_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageE();
              e_.SetParent(Context, 4);
            }
            input.ReadMessage(e_);
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (e_ == null) {
                e_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageE();
                e_.SetParent(Context, 4);
              }
              (e_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              e_  = global::Com.Zynga.Runtime.Protobuf.File.MessageE.Parser.ParseFrom(e.Set.ByteData);
              e_.SetParent(Context, 4);
            }
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageE : zpr::EventRegistry<MessageE>, pb::IMessage<MessageE> {
    private static readonly pb::MessageParser<MessageE> _parser = new pb::MessageParser<MessageE>(() => new MessageE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageE(MessageE other) : this() {
      if(other.f_ != null) {
        f_ = other.F.Clone();
        f_.SetParent(Context, 5);
      }
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      l_ = other.l_;
      n_ = other.n_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageE Clone() {
      return new MessageE(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageE Message { get{ return this; } }

    /// <summary>Field number for the "f" field.</summary>
    public const int FFieldNumber = 5;
    private global::Com.Zynga.Runtime.Protobuf.File.MessageF f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageF F {
      get { return f_; }
      set {
        if(f_ != null) f_.ClearParent();
        value.SetParent(Context, 5);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(f_)) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        f_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(F, other.F)) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (f_ != null) hash ^= F.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (f_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(F);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (f_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(F);
      }
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageE other) {
      if (other == null) {
        return;
      }
      if (other.f_ != null) {
        if (f_ == null) {
          f_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageF();
          f_.SetParent(Context, 5);
        }
        F.MergeFrom(other.F);
      }
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 42: {
            if (f_ == null) {
              f_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageF();
              f_.SetParent(Context, 5);
            }
            input.ReadMessage(f_);
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 5: {
            if (e.Path.Count - 1 != pathIndex) {
              if (f_ == null) {
                f_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageF();
                f_.SetParent(Context, 5);
              }
              (f_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              f_  = global::Com.Zynga.Runtime.Protobuf.File.MessageF.Parser.ParseFrom(e.Set.ByteData);
              f_.SetParent(Context, 5);
            }
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageF : zpr::EventRegistry<MessageF>, pb::IMessage<MessageF> {
    private static readonly pb::MessageParser<MessageF> _parser = new pb::MessageParser<MessageF>(() => new MessageF());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageF(MessageF other) : this() {
      if(other.g_ != null) {
        g_ = other.G.Clone();
        g_.SetParent(Context, 6);
      }
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      l_ = other.l_;
      m_ = other.m_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageF Clone() {
      return new MessageF(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageF Message { get{ return this; } }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 6;
    private global::Com.Zynga.Runtime.Protobuf.File.MessageG g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageG G {
      get { return g_; }
      set {
        if(g_ != null) g_.ClearParent();
        value.SetParent(Context, 6);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(g_)) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        g_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 7;
    private int o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(G, other.G)) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (g_ != null) hash ^= G.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (O != 0) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (g_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(G);
      }
      if (O != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (g_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(G);
      }
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (O != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageF other) {
      if (other == null) {
        return;
      }
      if (other.g_ != null) {
        if (g_ == null) {
          g_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageG();
          g_.SetParent(Context, 6);
        }
        G.MergeFrom(other.G);
      }
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.O != 0) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 50: {
            if (g_ == null) {
              g_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageG();
              g_.SetParent(Context, 6);
            }
            input.ReadMessage(g_);
            break;
          }
          case 56: {
            o_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 6: {
            if (e.Path.Count - 1 != pathIndex) {
              if (g_ == null) {
                g_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageG();
                g_.SetParent(Context, 6);
              }
              (g_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              g_  = global::Com.Zynga.Runtime.Protobuf.File.MessageG.Parser.ParseFrom(e.Set.ByteData);
              g_.SetParent(Context, 6);
            }
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 7: {
            o_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageG : zpr::EventRegistry<MessageG>, pb::IMessage<MessageG> {
    private static readonly pb::MessageParser<MessageG> _parser = new pb::MessageParser<MessageG>(() => new MessageG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageG() {
      OnConstruction();
    h_ = new EventRepeatedField<int>(hDataConverter, Context, 7);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageG(MessageG other) : this() {
      h_ = new EventRepeatedField<int>(hDataConverter, Context, 7, other.H.Clone());
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      l_ = other.l_;
      m_ = other.m_;
      n_ = other.n_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageG Clone() {
      return new MessageG(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageG Message { get{ return this; } }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_h_codec
        = pb::FieldCodec.ForInt32(58);
    public class HDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static HDataConverter hDataConverter = new HDataConverter();
    private readonly EventRepeatedField<int> h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> H {
      get { return h_; }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private int i_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private int j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        k_ = value;
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private int m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        n_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!h_.Equals(other.h_)) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= h_.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      if (J != 0) hash ^= J.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (M != 0) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(I);
      }
      if (J != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(J);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (L != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(L);
      }
      if (M != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(M);
      }
      if (N != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(N);
      }
      h_.WriteTo(output, _repeated_h_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += h_.CalculateSize(_repeated_h_codec);
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (J != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(J);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (M != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageG other) {
      if (other == null) {
        return;
      }
      h_.Add(other.h_);
      if (other.I != 0) {
        i_ = other.I;
      }
      if (other.J != 0) {
        j_ = other.J;
      }
      if (other.K != 0) {
        k_ = other.K;
      }
      if (other.L != 0) {
        l_ = other.L;
      }
      if (other.M != 0) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            i_ = input.ReadInt32();
            break;
          }
          case 16: {
            j_ = input.ReadInt32();
            break;
          }
          case 24: {
            k_ = input.ReadInt32();
            break;
          }
          case 32: {
            l_ = input.ReadInt32();
            break;
          }
          case 40: {
            m_ = input.ReadInt32();
            break;
          }
          case 48: {
            n_ = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            h_.AddEntriesFrom(input, _repeated_h_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 7: {
            h_.ApplyEvent(e.ListEvent);
          }
          break;
          case 1: {
            i_ = e.Set.I32;
          }
          break;
          case 2: {
            j_ = e.Set.I32;
          }
          break;
          case 3: {
            k_ = e.Set.I32;
          }
          break;
          case 4: {
            l_ = e.Set.I32;
          }
          break;
          case 5: {
            m_ = e.Set.I32;
          }
          break;
          case 6: {
            n_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageO : zpr::EventRegistry<MessageO>, pb::IMessage<MessageO> {
    private static readonly pb::MessageParser<MessageO> _parser = new pb::MessageParser<MessageO>(() => new MessageO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageO(MessageO other) : this() {
      if(other.p_ != null) {
        p_ = other.P.Clone();
        p_.SetParent(Context, 8);
      }
      t_ = other.t_;
      u_ = other.u_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageO Clone() {
      return new MessageO(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageO Message { get{ return this; } }

    /// <summary>Field number for the "p" field.</summary>
    public const int PFieldNumber = 8;
    private global::Com.Zynga.Runtime.Protobuf.File.MessageP p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageP P {
      get { return p_; }
      set {
        if(p_ != null) p_.ClearParent();
        value.SetParent(Context, 8);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(p_)) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        p_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 9;
    private int t_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int T {
      get { return t_; }
      set {
        #if !DISABLE_EVENTS
        if(t_ != value) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        t_ = value;
      }
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 10;
    private int u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U {
      get { return u_; }
      set {
        #if !DISABLE_EVENTS
        if(u_ != value) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        u_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 11;
    private int v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int V {
      get { return v_; }
      set {
        #if !DISABLE_EVENTS
        if(v_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P, other.P)) return false;
      if (T != other.T) return false;
      if (U != other.U) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p_ != null) hash ^= P.GetHashCode();
      if (T != 0) hash ^= T.GetHashCode();
      if (U != 0) hash ^= U.GetHashCode();
      if (V != 0) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (p_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(P);
      }
      if (T != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(T);
      }
      if (U != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(U);
      }
      if (V != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (T != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(T);
      }
      if (U != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U);
      }
      if (V != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageO other) {
      if (other == null) {
        return;
      }
      if (other.p_ != null) {
        if (p_ == null) {
          p_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageP();
          p_.SetParent(Context, 8);
        }
        P.MergeFrom(other.P);
      }
      if (other.T != 0) {
        t_ = other.T;
      }
      if (other.U != 0) {
        u_ = other.U;
      }
      if (other.V != 0) {
        v_ = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 66: {
            if (p_ == null) {
              p_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageP();
              p_.SetParent(Context, 8);
            }
            input.ReadMessage(p_);
            break;
          }
          case 72: {
            t_ = input.ReadInt32();
            break;
          }
          case 80: {
            u_ = input.ReadInt32();
            break;
          }
          case 88: {
            v_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 8: {
            if (e.Path.Count - 1 != pathIndex) {
              if (p_ == null) {
                p_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageP();
                p_.SetParent(Context, 8);
              }
              (p_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              p_  = global::Com.Zynga.Runtime.Protobuf.File.MessageP.Parser.ParseFrom(e.Set.ByteData);
              p_.SetParent(Context, 8);
            }
          }
          break;
          case 9: {
            t_ = e.Set.I32;
          }
          break;
          case 10: {
            u_ = e.Set.I32;
          }
          break;
          case 11: {
            v_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageP : zpr::EventRegistry<MessageP>, pb::IMessage<MessageP> {
    private static readonly pb::MessageParser<MessageP> _parser = new pb::MessageParser<MessageP>(() => new MessageP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageP(MessageP other) : this() {
      if(other.q_ != null) {
        q_ = other.Q.Clone();
        q_.SetParent(Context, 9);
      }
      s_ = other.s_;
      u_ = other.u_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageP Clone() {
      return new MessageP(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageP Message { get{ return this; } }

    /// <summary>Field number for the "q" field.</summary>
    public const int QFieldNumber = 9;
    private global::Com.Zynga.Runtime.Protobuf.File.MessageQ q_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.MessageQ Q {
      get { return q_; }
      set {
        if(q_ != null) q_.ClearParent();
        value.SetParent(Context, 9);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(q_)) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        q_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 8;
    private int s_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int S {
      get { return s_; }
      set {
        #if !DISABLE_EVENTS
        if(s_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        s_ = value;
      }
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 10;
    private int u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U {
      get { return u_; }
      set {
        #if !DISABLE_EVENTS
        if(u_ != value) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        u_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 11;
    private int v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int V {
      get { return v_; }
      set {
        #if !DISABLE_EVENTS
        if(v_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Q, other.Q)) return false;
      if (S != other.S) return false;
      if (U != other.U) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (q_ != null) hash ^= Q.GetHashCode();
      if (S != 0) hash ^= S.GetHashCode();
      if (U != 0) hash ^= U.GetHashCode();
      if (V != 0) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(S);
      }
      if (q_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Q);
      }
      if (U != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(U);
      }
      if (V != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (q_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Q);
      }
      if (S != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(S);
      }
      if (U != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U);
      }
      if (V != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageP other) {
      if (other == null) {
        return;
      }
      if (other.q_ != null) {
        if (q_ == null) {
          q_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageQ();
          q_.SetParent(Context, 9);
        }
        Q.MergeFrom(other.Q);
      }
      if (other.S != 0) {
        s_ = other.S;
      }
      if (other.U != 0) {
        u_ = other.U;
      }
      if (other.V != 0) {
        v_ = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 64: {
            s_ = input.ReadInt32();
            break;
          }
          case 74: {
            if (q_ == null) {
              q_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageQ();
              q_.SetParent(Context, 9);
            }
            input.ReadMessage(q_);
            break;
          }
          case 80: {
            u_ = input.ReadInt32();
            break;
          }
          case 88: {
            v_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 9: {
            if (e.Path.Count - 1 != pathIndex) {
              if (q_ == null) {
                q_ = new global::Com.Zynga.Runtime.Protobuf.File.MessageQ();
                q_.SetParent(Context, 9);
              }
              (q_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              q_  = global::Com.Zynga.Runtime.Protobuf.File.MessageQ.Parser.ParseFrom(e.Set.ByteData);
              q_.SetParent(Context, 9);
            }
          }
          break;
          case 8: {
            s_ = e.Set.I32;
          }
          break;
          case 10: {
            u_ = e.Set.I32;
          }
          break;
          case 11: {
            v_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageQ : zpr::EventRegistry<MessageQ>, pb::IMessage<MessageQ> {
    private static readonly pb::MessageParser<MessageQ> _parser = new pb::MessageParser<MessageQ>(() => new MessageQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageQ() {
      OnConstruction();
    r_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.MessageR>(rDataConverter, Context, 10, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageQ(MessageQ other) : this() {
      r_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.MessageR>(rDataConverter, Context, 10, other.R.Clone(), true);
      s_ = other.s_;
      t_ = other.t_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageQ Clone() {
      return new MessageQ(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageQ Message { get{ return this; } }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Com.Zynga.Runtime.Protobuf.File.MessageR> _repeated_r_codec
        = pb::FieldCodec.ForMessage(82, global::Com.Zynga.Runtime.Protobuf.File.MessageR.Parser);
    public class RDataConverter: EventDataConverter<global::Com.Zynga.Runtime.Protobuf.File.MessageR> {
      public override zpr.EventSource.EventContent GetEventData(global::Com.Zynga.Runtime.Protobuf.File.MessageR data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Com.Zynga.Runtime.Protobuf.File.MessageR GetItem(zpr.EventSource.EventContent data) {
        return global::Com.Zynga.Runtime.Protobuf.File.MessageR.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RDataConverter rDataConverter = new RDataConverter();
    private readonly EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.MessageR> r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.MessageR> R {
      get { return r_; }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 8;
    private int s_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int S {
      get { return s_; }
      set {
        #if !DISABLE_EVENTS
        if(s_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 9;
    private int t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int T {
      get { return t_; }
      set {
        #if !DISABLE_EVENTS
        if(t_ != value) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        t_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 11;
    private int v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int V {
      get { return v_; }
      set {
        #if !DISABLE_EVENTS
        if(v_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!r_.Equals(other.r_)) return false;
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= r_.GetHashCode();
      if (S != 0) hash ^= S.GetHashCode();
      if (T != 0) hash ^= T.GetHashCode();
      if (V != 0) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(S);
      }
      if (T != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(T);
      }
      r_.WriteTo(output, _repeated_r_codec);
      if (V != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += r_.CalculateSize(_repeated_r_codec);
      if (S != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(S);
      }
      if (T != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(T);
      }
      if (V != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageQ other) {
      if (other == null) {
        return;
      }
      r_.Add(other.r_);
      if (other.S != 0) {
        s_ = other.S;
      }
      if (other.T != 0) {
        t_ = other.T;
      }
      if (other.V != 0) {
        v_ = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 64: {
            s_ = input.ReadInt32();
            break;
          }
          case 72: {
            t_ = input.ReadInt32();
            break;
          }
          case 82: {
            r_.AddEntriesFrom(input, _repeated_r_codec);
            break;
          }
          case 88: {
            v_ = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 10: {
            r_.ApplyEvent(e.ListEvent);
          }
          break;
          case 8: {
            s_ = e.Set.I32;
          }
          break;
          case 9: {
            t_ = e.Set.I32;
          }
          break;
          case 11: {
            v_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MessageR : zpr::EventRegistry<MessageR>, pb::IMessage<MessageR> {
    private static readonly pb::MessageParser<MessageR> _parser = new pb::MessageParser<MessageR>(() => new MessageR());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.ComplexTestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageR(MessageR other) : this() {
      r_ = other.r_;
      s_ = other.s_;
      t_ = other.t_;
      u_ = other.u_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageR Clone() {
      return new MessageR(this);
    }

    public static bool IsEventSourced = true;

    protected override MessageR Message { get{ return this; } }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 11;
    private string r_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string R {
      get { return r_; }
      set {
        #if !DISABLE_EVENTS
        if(r_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        r_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 8;
    private int s_;
    /// <summary>
    /// ensure all numeric ids are in each message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int S {
      get { return s_; }
      set {
        #if !DISABLE_EVENTS
        if(s_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        s_ = value;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 9;
    private int t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int T {
      get { return t_; }
      set {
        #if !DISABLE_EVENTS
        if(t_ != value) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        t_ = value;
      }
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 10;
    private int u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U {
      get { return u_; }
      set {
        #if !DISABLE_EVENTS
        if(u_ != value) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        u_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (S != other.S) return false;
      if (T != other.T) return false;
      if (U != other.U) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R.Length != 0) hash ^= R.GetHashCode();
      if (S != 0) hash ^= S.GetHashCode();
      if (T != 0) hash ^= T.GetHashCode();
      if (U != 0) hash ^= U.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (S != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(S);
      }
      if (T != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(T);
      }
      if (U != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(U);
      }
      if (R.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(R);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(R);
      }
      if (S != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(S);
      }
      if (T != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(T);
      }
      if (U != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageR other) {
      if (other == null) {
        return;
      }
      if (other.R.Length != 0) {
        r_ = other.R;
      }
      if (other.S != 0) {
        s_ = other.S;
      }
      if (other.T != 0) {
        t_ = other.T;
      }
      if (other.U != 0) {
        u_ = other.U;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 64: {
            s_ = input.ReadInt32();
            break;
          }
          case 72: {
            t_ = input.ReadInt32();
            break;
          }
          case 80: {
            u_ = input.ReadInt32();
            break;
          }
          case 90: {
            r_ = input.ReadString();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 11: {
            r_ = e.Set.StringData;
          }
          break;
          case 8: {
            s_ = e.Set.I32;
          }
          break;
          case 9: {
            t_ = e.Set.I32;
          }
          break;
          case 10: {
            u_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
