// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/simple_map.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf {

  /// <summary>Holder for reflection information generated from test/simple_map.proto</summary>
  public static partial class SimpleMapReflection {

    #region Descriptor
    /// <summary>File descriptor for test/simple_map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChV0ZXN0L3NpbXBsZV9tYXAucHJvdG8SGmNvbS56eW5nYS5ydW50aW1lLnBy",
            "b3RvYnVmGhJldmVudF9wbHVnaW4ucHJvdG8iIAoQU2ltcGxlTWFwTWVzc2Fn",
            "ZRIMCgFnGAEgASgJUgFnIisKFVNpbXBsZU1hcERlbHRhTWVzc2FnZRIMCgFo",
            "GAEgASgJUgFoOgTIuB4BIt4BChZTaW1wbGVMb25nVG9NZXNzYWdlTWFwEloK",
            "CHRlc3RfZm9vGAogAygLMj8uY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYu",
            "U2ltcGxlTG9uZ1RvTWVzc2FnZU1hcC5UZXN0Rm9vRW50cnlSB3Rlc3RGb28a",
            "aAoMVGVzdEZvb0VudHJ5EhAKA2tleRgBIAEoA1IDa2V5EkIKBXZhbHVlGAIg",
            "ASgLMiwuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuU2ltcGxlTWFwTWVz",
            "c2FnZVIFdmFsdWU6AjgBIvMBChtTaW1wbGVMb25nVG9NZXNzYWdlRGVsdGFN",
            "YXASXwoIdGVzdF9mb28YCiADKAsyRC5jb20uenluZ2EucnVudGltZS5wcm90",
            "b2J1Zi5TaW1wbGVMb25nVG9NZXNzYWdlRGVsdGFNYXAuVGVzdEZvb0VudHJ5",
            "Ugd0ZXN0Rm9vGm0KDFRlc3RGb29FbnRyeRIQCgNrZXkYASABKANSA2tleRJH",
            "CgV2YWx1ZRgCIAEoCzIxLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlNp",
            "bXBsZU1hcERlbHRhTWVzc2FnZVIFdmFsdWU6AjgBOgTIuB4BItkBChVTaW1w",
            "bGVTdHJpbmdUb0VudW1NYXASWQoIdGVzdF9mb28YCiADKAsyPi5jb20uenlu",
            "Z2EucnVudGltZS5wcm90b2J1Zi5TaW1wbGVTdHJpbmdUb0VudW1NYXAuVGVz",
            "dEZvb0VudHJ5Ugd0ZXN0Rm9vGmUKDFRlc3RGb29FbnRyeRIQCgNrZXkYASAB",
            "KAlSA2tleRI/CgV2YWx1ZRgCIAEoDjIpLmNvbS56eW5nYS5ydW50aW1lLnBy",
            "b3RvYnVmLlNpbXBsZU1hcEVudW1SBXZhbHVlOgI4ASLpAQoaU2ltcGxlU3Ry",
            "aW5nVG9FbnVtRGVsdGFNYXASXgoIdGVzdF9mb28YCiADKAsyQy5jb20uenlu",
            "Z2EucnVudGltZS5wcm90b2J1Zi5TaW1wbGVTdHJpbmdUb0VudW1EZWx0YU1h",
            "cC5UZXN0Rm9vRW50cnlSB3Rlc3RGb28aZQoMVGVzdEZvb0VudHJ5EhAKA2tl",
            "eRgBIAEoCVIDa2V5Ej8KBXZhbHVlGAIgASgOMikuY29tLnp5bmdhLnJ1bnRp",
            "bWUucHJvdG9idWYuU2ltcGxlTWFwRW51bVIFdmFsdWU6AjgBOgTIuB4BIrIB",
            "ChdTaW1wbGVTdHJpbmdUb1N0cmluZ01hcBJbCgh0ZXN0X2ZvbxgKIAMoCzJA",
            "LmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlNpbXBsZVN0cmluZ1RvU3Ry",
            "aW5nTWFwLlRlc3RGb29FbnRyeVIHdGVzdEZvbxo6CgxUZXN0Rm9vRW50cnkS",
            "EAoDa2V5GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ASLC",
            "AQocU2ltcGxlU3RyaW5nVG9TdHJpbmdEZWx0YU1hcBJgCgh0ZXN0X2ZvbxgK",
            "IAMoCzJFLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlNpbXBsZVN0cmlu",
            "Z1RvU3RyaW5nRGVsdGFNYXAuVGVzdEZvb0VudHJ5Ugd0ZXN0Rm9vGjoKDFRl",
            "c3RGb29FbnRyeRIQCgNrZXkYASABKAlSA2tleRIUCgV2YWx1ZRgCIAEoCVIF",
            "dmFsdWU6AjgBOgTIuB4BIq4BChVTaW1wbGVTdHJpbmdUb0xvbmdNYXASWQoI",
            "dGVzdF9mb28YCiADKAsyPi5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5T",
            "aW1wbGVTdHJpbmdUb0xvbmdNYXAuVGVzdEZvb0VudHJ5Ugd0ZXN0Rm9vGjoK",
            "DFRlc3RGb29FbnRyeRIQCgNrZXkYASABKAlSA2tleRIUCgV2YWx1ZRgCIAEo",
            "A1IFdmFsdWU6AjgBIr4BChpTaW1wbGVTdHJpbmdUb0xvbmdEZWx0YU1hcBJe",
            "Cgh0ZXN0X2ZvbxgKIAMoCzJDLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVm",
            "LlNpbXBsZVN0cmluZ1RvTG9uZ0RlbHRhTWFwLlRlc3RGb29FbnRyeVIHdGVz",
            "dEZvbxo6CgxUZXN0Rm9vRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSFAoFdmFs",
            "dWUYAiABKANSBXZhbHVlOgI4AToEyLgeASpECg1TaW1wbGVNYXBFbnVtEgkK",
            "BVVOU0VUEAASBQoBQRABEgUKAUIQAhIFCgFDEAMSBQoBRBAEEgUKAUUQBRIF",
            "CgFGEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage), global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage.Parser, new[]{ "G" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage), global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage.Parser, new[]{ "H" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleLongToMessageMap), global::Com.Zynga.Runtime.Protobuf.SimpleLongToMessageMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleLongToMessageDeltaMap), global::Com.Zynga.Runtime.Protobuf.SimpleLongToMessageDeltaMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToEnumMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToEnumMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToEnumDeltaMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToEnumDeltaMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToStringMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToStringMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToStringDeltaMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToStringDeltaMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToLongMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToLongMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleStringToLongDeltaMap), global::Com.Zynga.Runtime.Protobuf.SimpleStringToLongDeltaMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum SimpleMapEnum {
    [pbr::OriginalName("UNSET")] Unset = 0,
    [pbr::OriginalName("A")] A = 1,
    [pbr::OriginalName("B")] B = 2,
    [pbr::OriginalName("C")] C = 3,
    [pbr::OriginalName("D")] D = 4,
    [pbr::OriginalName("E")] E = 5,
    [pbr::OriginalName("F")] F = 6,
  }

  #endregion

  #region Messages
  public sealed partial class SimpleMapMessage : pb::IMessage<SimpleMapMessage> {
    private static readonly pb::MessageParser<SimpleMapMessage> _parser = new pb::MessageParser<SimpleMapMessage>(() => new SimpleMapMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMapMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapMessage(SimpleMapMessage other) : this() {
      g_ = other.g_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapMessage Clone() {
      return new SimpleMapMessage(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 1;
    private string g_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string G {
      get { return g_; }
      set {
        g_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMapMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMapMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (G != other.G) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (G.Length != 0) hash ^= G.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (G.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(G);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (G.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(G);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMapMessage other) {
      if (other == null) {
        return;
      }
      if (other.G.Length != 0) {
        g_ = other.G;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            g_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleMapDeltaMessage : zpr::EventRegistry<SimpleMapDeltaMessage>, pb::IMessage<SimpleMapDeltaMessage> {
    private static readonly pb::MessageParser<SimpleMapDeltaMessage> _parser = new pb::MessageParser<SimpleMapDeltaMessage>(() => new SimpleMapDeltaMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMapDeltaMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapDeltaMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapDeltaMessage(SimpleMapDeltaMessage other) : this() {
      h_ = other.h_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMapDeltaMessage Clone() {
      return new SimpleMapDeltaMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override SimpleMapDeltaMessage Message { get{ return this; } }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 1;
    private string h_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string H {
      get { return h_; }
      set {
        #if !DISABLE_EVENTS
        if(h_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        h_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMapDeltaMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMapDeltaMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (H != other.H) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (H.Length != 0) hash ^= H.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (H.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(H);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (H.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(H);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMapDeltaMessage other) {
      if (other == null) {
        return;
      }
      if (other.H.Length != 0) {
        h_ = other.H;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            h_ = input.ReadString();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            h_ = e.Set.StringData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class SimpleLongToMessageMap : pb::IMessage<SimpleLongToMessageMap> {
    private static readonly pb::MessageParser<SimpleLongToMessageMap> _parser = new pb::MessageParser<SimpleLongToMessageMap>(() => new SimpleLongToMessageMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleLongToMessageMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageMap(SimpleLongToMessageMap other) : this() {
      testFoo_ = other.testFoo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageMap Clone() {
      return new SimpleLongToMessageMap(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage>.Codec _map_testFoo_codec
        = new pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage.Parser), 82);
    private readonly pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage> testFoo_ = new pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapMessage> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleLongToMessageMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleLongToMessageMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleLongToMessageMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleLongToMessageDeltaMap : zpr::EventRegistry<SimpleLongToMessageDeltaMap>, pb::IMessage<SimpleLongToMessageDeltaMap> {
    private static readonly pb::MessageParser<SimpleLongToMessageDeltaMap> _parser = new pb::MessageParser<SimpleLongToMessageDeltaMap>(() => new SimpleLongToMessageDeltaMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleLongToMessageDeltaMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageDeltaMap() {
      OnConstruction();
    testFoo_ = new EventMapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage>(testFooMapConverter, Context, 10, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageDeltaMap(SimpleLongToMessageDeltaMap other) : this() {
      testFoo_ = new EventMapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage>(testFooMapConverter, Context, 10, other.testFoo_.Clone(), true);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleLongToMessageDeltaMap Clone() {
      return new SimpleLongToMessageDeltaMap(this);
    }

    public static bool IsEventSourced = true;

    protected override SimpleLongToMessageDeltaMap Message { get{ return this; } }

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage>.Codec _map_testFoo_codec
        = new pbc::MapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage.Parser), 82);
    internal class TestFooMapConverter : EventMapConverter<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage> {
      public override zpr.EventSource.MapKey GetMapKey(long key) {
        return new zpr.EventSource.MapKey { I64 = key };
      }
      public override long GetKey(zpr.EventSource.MapKey key) {
        return key.I64;
      }
      public override ByteString GetKeyValue(long key, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt64(key);
          dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeytestFoo = dataStream.ReadInt64();
        var realValuetestFoo = new global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage();
        dataStream.ReadMessage(realValuetestFoo);;
        return new KeyValuePair<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage>(realKeytestFoo, realValuetestFoo);
      }
    }
    private static readonly EventMapConverter<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage> testFooMapConverter = new TestFooMapConverter();
    private readonly EventMapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage> testFoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<long, global::Com.Zynga.Runtime.Protobuf.SimpleMapDeltaMessage> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleLongToMessageDeltaMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleLongToMessageDeltaMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleLongToMessageDeltaMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 10: {
            testFoo_.ApplyEvent(e.MapEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class SimpleStringToEnumMap : pb::IMessage<SimpleStringToEnumMap> {
    private static readonly pb::MessageParser<SimpleStringToEnumMap> _parser = new pb::MessageParser<SimpleStringToEnumMap>(() => new SimpleStringToEnumMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToEnumMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumMap(SimpleStringToEnumMap other) : this() {
      testFoo_ = other.testFoo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumMap Clone() {
      return new SimpleStringToEnumMap(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>.Codec _map_testFoo_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum) x), 82);
    private readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> testFoo_ = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToEnumMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToEnumMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToEnumMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleStringToEnumDeltaMap : zpr::EventRegistry<SimpleStringToEnumDeltaMap>, pb::IMessage<SimpleStringToEnumDeltaMap> {
    private static readonly pb::MessageParser<SimpleStringToEnumDeltaMap> _parser = new pb::MessageParser<SimpleStringToEnumDeltaMap>(() => new SimpleStringToEnumDeltaMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToEnumDeltaMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumDeltaMap() {
      OnConstruction();
    testFoo_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>(testFooMapConverter, Context, 10);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumDeltaMap(SimpleStringToEnumDeltaMap other) : this() {
      testFoo_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>(testFooMapConverter, Context, 10, other.testFoo_.Clone());
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToEnumDeltaMap Clone() {
      return new SimpleStringToEnumDeltaMap(this);
    }

    public static bool IsEventSourced = true;

    protected override SimpleStringToEnumDeltaMap Message { get{ return this; } }

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>.Codec _map_testFoo_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum) x), 82);
    internal class TestFooMapConverter : EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteEnum((int) value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeytestFoo = dataStream.ReadString();
        var realValuetestFoo = (global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum) dataStream.ReadEnum();
        return new KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum>(realKeytestFoo, realValuetestFoo);
      }
    }
    private static readonly EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> testFooMapConverter = new TestFooMapConverter();
    private readonly EventMapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> testFoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, global::Com.Zynga.Runtime.Protobuf.SimpleMapEnum> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToEnumDeltaMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToEnumDeltaMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToEnumDeltaMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 10: {
            testFoo_.ApplyEvent(e.MapEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class SimpleStringToStringMap : pb::IMessage<SimpleStringToStringMap> {
    private static readonly pb::MessageParser<SimpleStringToStringMap> _parser = new pb::MessageParser<SimpleStringToStringMap>(() => new SimpleStringToStringMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToStringMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringMap(SimpleStringToStringMap other) : this() {
      testFoo_ = other.testFoo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringMap Clone() {
      return new SimpleStringToStringMap(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_testFoo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> testFoo_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToStringMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToStringMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToStringMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleStringToStringDeltaMap : zpr::EventRegistry<SimpleStringToStringDeltaMap>, pb::IMessage<SimpleStringToStringDeltaMap> {
    private static readonly pb::MessageParser<SimpleStringToStringDeltaMap> _parser = new pb::MessageParser<SimpleStringToStringDeltaMap>(() => new SimpleStringToStringDeltaMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToStringDeltaMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringDeltaMap() {
      OnConstruction();
    testFoo_ = new EventMapField<string, string>(testFooMapConverter, Context, 10);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringDeltaMap(SimpleStringToStringDeltaMap other) : this() {
      testFoo_ = new EventMapField<string, string>(testFooMapConverter, Context, 10, other.testFoo_.Clone());
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToStringDeltaMap Clone() {
      return new SimpleStringToStringDeltaMap(this);
    }

    public static bool IsEventSourced = true;

    protected override SimpleStringToStringDeltaMap Message { get{ return this; } }

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_testFoo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    internal class TestFooMapConverter : EventMapConverter<string, string> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, string value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, string> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeytestFoo = dataStream.ReadString();
        var realValuetestFoo = dataStream.ReadString();
        return new KeyValuePair<string, string>(realKeytestFoo, realValuetestFoo);
      }
    }
    private static readonly EventMapConverter<string, string> testFooMapConverter = new TestFooMapConverter();
    private readonly EventMapField<string, string> testFoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, string> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToStringDeltaMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToStringDeltaMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToStringDeltaMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 10: {
            testFoo_.ApplyEvent(e.MapEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class SimpleStringToLongMap : pb::IMessage<SimpleStringToLongMap> {
    private static readonly pb::MessageParser<SimpleStringToLongMap> _parser = new pb::MessageParser<SimpleStringToLongMap>(() => new SimpleStringToLongMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToLongMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongMap(SimpleStringToLongMap other) : this() {
      testFoo_ = other.testFoo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongMap Clone() {
      return new SimpleStringToLongMap(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, long>.Codec _map_testFoo_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 82);
    private readonly pbc::MapField<string, long> testFoo_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToLongMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToLongMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToLongMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleStringToLongDeltaMap : zpr::EventRegistry<SimpleStringToLongDeltaMap>, pb::IMessage<SimpleStringToLongDeltaMap> {
    private static readonly pb::MessageParser<SimpleStringToLongDeltaMap> _parser = new pb::MessageParser<SimpleStringToLongDeltaMap>(() => new SimpleStringToLongDeltaMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleStringToLongDeltaMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongDeltaMap() {
      OnConstruction();
    testFoo_ = new EventMapField<string, long>(testFooMapConverter, Context, 10);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongDeltaMap(SimpleStringToLongDeltaMap other) : this() {
      testFoo_ = new EventMapField<string, long>(testFooMapConverter, Context, 10, other.testFoo_.Clone());
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleStringToLongDeltaMap Clone() {
      return new SimpleStringToLongDeltaMap(this);
    }

    public static bool IsEventSourced = true;

    protected override SimpleStringToLongDeltaMap Message { get{ return this; } }

    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<string, long>.Codec _map_testFoo_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 82);
    internal class TestFooMapConverter : EventMapConverter<string, long> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, long value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteInt64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, long> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeytestFoo = dataStream.ReadString();
        var realValuetestFoo = dataStream.ReadInt64();
        return new KeyValuePair<string, long>(realKeytestFoo, realValuetestFoo);
      }
    }
    private static readonly EventMapConverter<string, long> testFooMapConverter = new TestFooMapConverter();
    private readonly EventMapField<string, long> testFoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, long> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleStringToLongDeltaMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleStringToLongDeltaMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleStringToLongDeltaMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 10: {
            testFoo_.ApplyEvent(e.MapEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
