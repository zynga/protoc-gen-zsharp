// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/file_test.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf.File {

  /// <summary>Holder for reflection information generated from test/file_test.proto</summary>
  public static partial class FileTestReflection {

    #region Descriptor
    /// <summary>File descriptor for test/file_test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0ZXN0L2ZpbGVfdGVzdC5wcm90bxIfY29tLnp5bmdhLnJ1bnRpbWUucHJv",
            "dG9idWYuZmlsZRoSZXZlbnRfcGx1Z2luLnByb3RvGh9nb29nbGUvcHJvdG9i",
            "dWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24u",
            "cHJvdG8aGXRlc3Qvbm9fZXZlbnRzX3Rlc3QucHJvdG8ilAoKCFRlc3RCbG9i",
            "EjYKA2JhchgBIAEoCzIkLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLmZp",
            "bGUuQmFyUgNiYXISNgoDZm9vGAIgASgLMiQuY29tLnp5bmdhLnJ1bnRpbWUu",
            "cHJvdG9idWYuZmlsZS5Gb29SA2ZvbxJeCg1pbnRfdG9fc3RyaW5nGAMgAygL",
            "MjouY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5UZXN0QmxvYi5J",
            "bnRUb1N0cmluZ0VudHJ5UgtpbnRUb1N0cmluZxJeCg1zdHJpbmdfdG9fZm9v",
            "GAQgAygLMjouY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5UZXN0",
            "QmxvYi5TdHJpbmdUb0Zvb0VudHJ5UgtzdHJpbmdUb0ZvbxIUCgVpbGlzdBgF",
            "IAMoBVIFaWxpc3QSFAoFc2xpc3QYBiADKAlSBXNsaXN0Ej4KB2Zvb2xpc3QY",
            "ByADKAsyJC5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5maWxlLkZvb1IH",
            "Zm9vbGlzdBJCCghtYXliZWZvbxgIIAEoCzIkLmNvbS56eW5nYS5ydW50aW1l",
            "LnByb3RvYnVmLmZpbGUuRm9vSABSCG1heWJlZm9vEhwKCG1heWJlaW50GAkg",
            "ASgFSABSCG1heWJlaW50EiIKC21heWJlc3RyaW5nGAogASgJSABSC21heWJl",
            "c3RyaW5nEkYKC25vX2V2ZW50c19hGBEgASgLMiQuY29tLnp5bmdhLnJ1bnRp",
            "bWUucHJvdG9idWYuTm9FdmVudHNIAFIJbm9FdmVudHNBEkkKDGhhc19ldmVu",
            "dHNfYRgTIAEoCzIlLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLkhhc0V2",
            "ZW50c0gAUgpoYXNFdmVudHNBEjoKA3phbRgLIAEoCzIoLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLmZpbGUuRm9vLlphbVIDemFtEh0KCmZpZWxkX2Jv",
            "b2wYDCABKAhSCWZpZWxkQm9vbBI4Cgl0aW1lc3RhbXAYDSABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wUgl0aW1lc3RhbXASNQoIZHVyYXRpb24Y",
            "DiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25SCGR1cmF0aW9uEksK",
            "CWFsbF9wcmltcxgPIAEoCzIuLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVm",
            "LmZpbGUuQWxsUHJpbWl0aXZlc1IIYWxsUHJpbXMSRgoJdGVzdF9ibG9iGBAg",
            "ASgLMikuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5UZXN0Qmxv",
            "YlIIdGVzdEJsb2ISRAoLbm9fZXZlbnRzX2IYEiABKAsyJC5jb20uenluZ2Eu",
            "cnVudGltZS5wcm90b2J1Zi5Ob0V2ZW50c1IJbm9FdmVudHNCGj4KEEludFRv",
            "U3RyaW5nRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAlS",
            "BXZhbHVlOgI4ARpkChBTdHJpbmdUb0Zvb0VudHJ5EhAKA2tleRgBIAEoCVID",
            "a2V5EjoKBXZhbHVlGAIgASgLMiQuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9i",
            "dWYuZmlsZS5Gb29SBXZhbHVlOgI4AUIGCgR0ZXN0IokCCgNGb28SEgoEbG9u",
            "ZxgBIAEoA1IEbG9uZxIQCgNzdHIYAiABKAlSA3N0chI2CgNmb28YAyABKAsy",
            "JC5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5maWxlLkZvb1IDZm9vEkIK",
            "B2VudW1lcm8YBCABKA4yKC5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5m",
            "aWxlLkVudW1lcm9SB2VudW1lcm8SOwoEb2theRgFIAEoDjInLmNvbS56eW5n",
            "YS5ydW50aW1lLnByb3RvYnVmLmZpbGUuRm9vLm9rUgRva2F5GhUKA1phbRIO",
            "CgJoaRgBIAEoBVICaGkiDAoCb2sSBgoCSEkQACI9CgNCYXISNgoDZm9vGAEg",
            "ASgLMiQuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5Gb29SA2Zv",
            "byLhAQoNQWxsUHJpbWl0aXZlcxIMCgFhGAEgASgNUgFhEgwKAWIYAiABKAVS",
            "AWISDAoBYxgDIAEoBlIBYxIMCgFkGAQgASgHUgFkEgwKAWUYBSABKBBSAWUS",
            "DAoBZhgGIAEoD1IBZhIMCgFnGAcgASgBUgFnEgwKAWgYCCABKAJSAWgSDAoB",
            "aRgJIAEoCFIBaRIMCgFqGAogASgJUgFqEgwKAWsYCyABKAxSAWsSDAoBbBgM",
            "IAEoA1IBbBIMCgFtGA0gASgEUgFtEgwKAW4YDiABKBFSAW4SDAoBbxgPIAEo",
            "ElIBbyKLAwoMUmVjdXJzaXZlTWFwEkgKA21hcBgBIAMoCzI2LmNvbS56eW5n",
            "YS5ydW50aW1lLnByb3RvYnVmLmZpbGUuUmVjdXJzaXZlTWFwLk1hcEVudHJ5",
            "UgNtYXASTgoKcHJpbWl0aXZlcxgCIAEoCzIuLmNvbS56eW5nYS5ydW50aW1l",
            "LnByb3RvYnVmLmZpbGUuQWxsUHJpbWl0aXZlc1IKcHJpbWl0aXZlcxJCCgdl",
            "bnVtZXJvGAMgASgOMiguY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmls",
            "ZS5FbnVtZXJvUgdlbnVtZXJvEjYKA2JhchgEIAEoCzIkLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLmZpbGUuQmFyUgNiYXIaZQoITWFwRW50cnkSEAoD",
            "a2V5GAEgASgFUgNrZXkSQwoFdmFsdWUYAiABKAsyLS5jb20uenluZ2EucnVu",
            "dGltZS5wcm90b2J1Zi5maWxlLlJlY3Vyc2l2ZU1hcFIFdmFsdWU6AjgBIp8C",
            "Cg1SZWN1cnNpdmVMaXN0EkIKBGxpc3QYASADKAsyLi5jb20uenluZ2EucnVu",
            "dGltZS5wcm90b2J1Zi5maWxlLlJlY3Vyc2l2ZUxpc3RSBGxpc3QSTgoKcHJp",
            "bWl0aXZlcxgCIAEoCzIuLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLmZp",
            "bGUuQWxsUHJpbWl0aXZlc1IKcHJpbWl0aXZlcxJCCgdlbnVtZXJvGAMgASgO",
            "MiguY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuZmlsZS5FbnVtZXJvUgdl",
            "bnVtZXJvEjYKA2JhchgEIAEoCzIkLmNvbS56eW5nYS5ydW50aW1lLnByb3Rv",
            "YnVmLmZpbGUuQmFyUgNiYXIqLQoHRW51bWVybxIJCgVFTVBUWRAAEg0KCVNP",
            "TUVUSElORxABEggKBEhBTFAQAkIE2LgeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Com.Zynga.Runtime.Protobuf.NoEventsTestReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Zynga.Runtime.Protobuf.File.Enumero), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.TestBlob), global::Com.Zynga.Runtime.Protobuf.File.TestBlob.Parser, new[]{ "Bar", "Foo", "IntToString", "StringToFoo", "Ilist", "Slist", "Foolist", "Maybefoo", "Maybeint", "Maybestring", "NoEventsA", "HasEventsA", "Zam", "FieldBool", "Timestamp", "Duration", "AllPrims", "TestBlob_", "NoEventsB" }, new[]{ "Test" }, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.Foo), global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser, new[]{ "Long", "Str", "Foo_", "Enumero", "Okay" }, null, new[]{ typeof(global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.ok) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam), global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam.Parser, new[]{ "Hi" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.Bar), global::Com.Zynga.Runtime.Protobuf.File.Bar.Parser, new[]{ "Foo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives), global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives.Parser, new[]{ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap), global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap.Parser, new[]{ "Map", "Primitives", "Enumero", "Bar" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.File.RecursiveList), global::Com.Zynga.Runtime.Protobuf.File.RecursiveList.Parser, new[]{ "List", "Primitives", "Enumero", "Bar" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Enumero {
    [pbr::OriginalName("EMPTY")] Empty = 0,
    [pbr::OriginalName("SOMETHING")] Something = 1,
    [pbr::OriginalName("HALP")] Halp = 2,
  }

  #endregion

  #region Messages
  public sealed partial class TestBlob : zpr::EventRegistry<TestBlob>, pb::IMessage<TestBlob> {
    private static readonly pb::MessageParser<TestBlob> _parser = new pb::MessageParser<TestBlob>(() => new TestBlob());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestBlob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestBlob() {
      OnConstruction();
    intToString_ = new EventMapField<int, string>(intToStringMapConverter, Context, 3);
    stringToFoo_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo>(stringToFooMapConverter, Context, 4, true);
    ilist_ = new EventRepeatedField<int>(ilistDataConverter, Context, 5);
    slist_ = new EventRepeatedField<string>(slistDataConverter, Context, 6);
    foolist_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.Foo>(foolistDataConverter, Context, 7, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestBlob(TestBlob other) : this() {
      if(other.bar_ != null) {
        bar_ = other.Bar.Clone();
        bar_.SetParent(Context, 1);
      }
      if(other.foo_ != null) {
        foo_ = other.Foo.Clone();
        foo_.SetParent(Context, 2);
      }
      intToString_ = new EventMapField<int, string>(intToStringMapConverter, Context, 3, other.intToString_.Clone());
      stringToFoo_ = new EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo>(stringToFooMapConverter, Context, 4, other.stringToFoo_.Clone(), true);
      ilist_ = new EventRepeatedField<int>(ilistDataConverter, Context, 5, other.Ilist.Clone());
      slist_ = new EventRepeatedField<string>(slistDataConverter, Context, 6, other.Slist.Clone());
      foolist_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.Foo>(foolistDataConverter, Context, 7, other.Foolist.Clone(), true);
      if(other.zam_ != null) {
        zam_ = other.Zam.Clone();
        zam_.SetParent(Context, 11);
      }
      fieldBool_ = other.fieldBool_;
      timestamp_ = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      duration_ = other.duration_ != null ? other.Duration.Clone() : null;
      if(other.allPrims_ != null) {
        allPrims_ = other.AllPrims.Clone();
        allPrims_.SetParent(Context, 15);
      }
      if(other.testBlob_ != null) {
        testBlob_ = other.TestBlob_.Clone();
        testBlob_.SetParent(Context, 16);
      }
      noEventsB_ = other.noEventsB_ != null ? other.NoEventsB.Clone() : null;
      switch (other.TestCase) {
        case TestOneofCase.Maybefoo:
          Maybefoo = other.Maybefoo.Clone();
          break;
        case TestOneofCase.Maybeint:
          Maybeint = other.Maybeint;
          break;
        case TestOneofCase.Maybestring:
          Maybestring = other.Maybestring;
          break;
        case TestOneofCase.NoEventsA:
          NoEventsA = other.NoEventsA.Clone();
          break;
        case TestOneofCase.HasEventsA:
          HasEventsA = other.HasEventsA.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestBlob Clone() {
      return new TestBlob(this);
    }

    public static bool IsEventSourced = true;

    protected override TestBlob Message { get{ return this; } }

    /// <summary>Field number for the "bar" field.</summary>
    public const int BarFieldNumber = 1;
    private global::Com.Zynga.Runtime.Protobuf.File.Bar bar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Bar Bar {
      get { return bar_; }
      set {
        if(bar_ != null) bar_.ClearParent();
        value.SetParent(Context, 1);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(bar_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        bar_ = value;
      }
    }

    /// <summary>Field number for the "foo" field.</summary>
    public const int FooFieldNumber = 2;
    private global::Com.Zynga.Runtime.Protobuf.File.Foo foo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo Foo {
      get { return foo_; }
      set {
        if(foo_ != null) foo_.ClearParent();
        value.SetParent(Context, 2);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(foo_)) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        foo_ = value;
      }
    }

    /// <summary>Field number for the "int_to_string" field.</summary>
    public const int IntToStringFieldNumber = 3;
    private static readonly pbc::MapField<int, string>.Codec _map_intToString_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 26);
    internal class IntToStringMapConverter : EventMapConverter<int, string> {
      public override zpr.EventSource.MapKey GetMapKey(int key) {
        return new zpr.EventSource.MapKey { I32 = key };
      }
      public override int GetKey(zpr.EventSource.MapKey key) {
        return key.I32;
      }
      public override ByteString GetKeyValue(int key, string value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, string> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeyintToString = dataStream.ReadInt32();
        var realValueintToString = dataStream.ReadString();
        return new KeyValuePair<int, string>(realKeyintToString, realValueintToString);
      }
    }
    private static readonly EventMapConverter<int, string> intToStringMapConverter = new IntToStringMapConverter();
    private readonly EventMapField<int, string> intToString_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> IntToString {
      get { return intToString_; }
    }

    /// <summary>Field number for the "string_to_foo" field.</summary>
    public const int StringToFooFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo>.Codec _map_stringToFoo_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser), 34);
    internal class StringToFooMapConverter : EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.Foo> {
      public override zpr.EventSource.MapKey GetMapKey(string key) {
        return new zpr.EventSource.MapKey { StringData = key };
      }
      public override string GetKey(zpr.EventSource.MapKey key) {
        return key.StringData;
      }
      public override ByteString GetKeyValue(string key, global::Com.Zynga.Runtime.Protobuf.File.Foo value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.Foo> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeystringToFoo = dataStream.ReadString();
        var realValuestringToFoo = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
        dataStream.ReadMessage(realValuestringToFoo);;
        return new KeyValuePair<string, global::Com.Zynga.Runtime.Protobuf.File.Foo>(realKeystringToFoo, realValuestringToFoo);
      }
    }
    private static readonly EventMapConverter<string, global::Com.Zynga.Runtime.Protobuf.File.Foo> stringToFooMapConverter = new StringToFooMapConverter();
    private readonly EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo> stringToFoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, global::Com.Zynga.Runtime.Protobuf.File.Foo> StringToFoo {
      get { return stringToFoo_; }
    }

    /// <summary>Field number for the "ilist" field.</summary>
    public const int IlistFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ilist_codec
        = pb::FieldCodec.ForInt32(42);
    public class IlistDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static IlistDataConverter ilistDataConverter = new IlistDataConverter();
    private readonly EventRepeatedField<int> ilist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> Ilist {
      get { return ilist_; }
    }

    /// <summary>Field number for the "slist" field.</summary>
    public const int SlistFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_slist_codec
        = pb::FieldCodec.ForString(50);
    public class SlistDataConverter: EventDataConverter<string> {
      public override zpr.EventSource.EventContent GetEventData(string data) {
        return new zpr.EventSource.EventContent() { StringData = data };
      }
      public override string GetItem(zpr.EventSource.EventContent data) {
        return data.StringData;
      }
    }
    private static SlistDataConverter slistDataConverter = new SlistDataConverter();
    private readonly EventRepeatedField<string> slist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<string> Slist {
      get { return slist_; }
    }

    /// <summary>Field number for the "foolist" field.</summary>
    public const int FoolistFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Zynga.Runtime.Protobuf.File.Foo> _repeated_foolist_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser);
    public class FoolistDataConverter: EventDataConverter<global::Com.Zynga.Runtime.Protobuf.File.Foo> {
      public override zpr.EventSource.EventContent GetEventData(global::Com.Zynga.Runtime.Protobuf.File.Foo data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Com.Zynga.Runtime.Protobuf.File.Foo GetItem(zpr.EventSource.EventContent data) {
        return global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser.ParseFrom(data.ByteData);
      }
    }
    private static FoolistDataConverter foolistDataConverter = new FoolistDataConverter();
    private readonly EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.Foo> foolist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.Foo> Foolist {
      get { return foolist_; }
    }

    /// <summary>Field number for the "maybefoo" field.</summary>
    public const int MaybefooFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo Maybefoo {
      get { return testCase_ == TestOneofCase.Maybefoo ? (global::Com.Zynga.Runtime.Protobuf.File.Foo) test_ : null; }
      set {
        if(testCase_ == TestOneofCase.Maybefoo && test_ != null) ((global::Com.Zynga.Runtime.Protobuf.File.Foo) test_).ClearParent();
        value.SetParent(Context, 8);
        #if !DISABLE_EVENTS
        if(testCase_ != TestOneofCase.Maybefoo || !value.Equals(test_)) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Maybefoo;
      }
    }

    /// <summary>Field number for the "maybeint" field.</summary>
    public const int MaybeintFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maybeint {
      get { return testCase_ == TestOneofCase.Maybeint ? (int) test_ : 0; }
      set {
        #if !DISABLE_EVENTS
        if(testCase_ != TestOneofCase.Maybeint || value != (int) test_) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        test_ = value;
        testCase_ = TestOneofCase.Maybeint;
      }
    }

    /// <summary>Field number for the "maybestring" field.</summary>
    public const int MaybestringFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Maybestring {
      get { return testCase_ == TestOneofCase.Maybestring ? (string) test_ : ""; }
      set {
        #if !DISABLE_EVENTS
        if(testCase_ != TestOneofCase.Maybestring || value != (string) test_) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        test_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        testCase_ = TestOneofCase.Maybestring;
      }
    }

    /// <summary>Field number for the "no_events_a" field.</summary>
    public const int NoEventsAFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NoEvents NoEventsA {
      get { return testCase_ == TestOneofCase.NoEventsA ? (global::Com.Zynga.Runtime.Protobuf.NoEvents) test_ : null; }
      set {
        #if !DISABLE_EVENTS
        if(testCase_ != TestOneofCase.NoEventsA || !value.Equals(test_)) {
          Context.AddSetEvent(17, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.NoEventsA;
      }
    }

    /// <summary>Field number for the "has_events_a" field.</summary>
    public const int HasEventsAFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.HasEvents HasEventsA {
      get { return testCase_ == TestOneofCase.HasEventsA ? (global::Com.Zynga.Runtime.Protobuf.HasEvents) test_ : null; }
      set {
        if(testCase_ == TestOneofCase.HasEventsA && test_ != null) ((global::Com.Zynga.Runtime.Protobuf.HasEvents) test_).ClearParent();
        value.SetParent(Context, 19);
        #if !DISABLE_EVENTS
        if(testCase_ != TestOneofCase.HasEventsA || !value.Equals(test_)) {
          Context.AddSetEvent(19, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.HasEventsA;
      }
    }

    /// <summary>Field number for the "zam" field.</summary>
    public const int ZamFieldNumber = 11;
    private global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam zam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam Zam {
      get { return zam_; }
      set {
        if(zam_ != null) zam_.ClearParent();
        value.SetParent(Context, 11);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(zam_)) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        zam_ = value;
      }
    }

    /// <summary>Field number for the "field_bool" field.</summary>
    public const int FieldBoolFieldNumber = 12;
    private bool fieldBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FieldBool {
      get { return fieldBool_; }
      set {
        #if !DISABLE_EVENTS
        if(fieldBool_ != value) {
          Context.AddSetEvent(12, new zpr.EventSource.EventContent { BoolData = value });
        }
        #endif
        fieldBool_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(timestamp_)) {
          Context.AddSetEvent(13, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(duration_)) {
          Context.AddSetEvent(14, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        duration_ = value;
      }
    }

    /// <summary>Field number for the "all_prims" field.</summary>
    public const int AllPrimsFieldNumber = 15;
    private global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives allPrims_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives AllPrims {
      get { return allPrims_; }
      set {
        if(allPrims_ != null) allPrims_.ClearParent();
        value.SetParent(Context, 15);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(allPrims_)) {
          Context.AddSetEvent(15, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        allPrims_ = value;
      }
    }

    /// <summary>Field number for the "test_blob" field.</summary>
    public const int TestBlob_FieldNumber = 16;
    private global::Com.Zynga.Runtime.Protobuf.File.TestBlob testBlob_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.TestBlob TestBlob_ {
      get { return testBlob_; }
      set {
        if(testBlob_ != null) testBlob_.ClearParent();
        value.SetParent(Context, 16);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(testBlob_)) {
          Context.AddSetEvent(16, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        testBlob_ = value;
      }
    }

    /// <summary>Field number for the "no_events_b" field.</summary>
    public const int NoEventsBFieldNumber = 18;
    private global::Com.Zynga.Runtime.Protobuf.NoEvents noEventsB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NoEvents NoEventsB {
      get { return noEventsB_; }
      set {
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(noEventsB_)) {
          Context.AddSetEvent(18, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        noEventsB_ = value;
      }
    }

    private object test_;
    /// <summary>Enum of possible cases for the "test" oneof.</summary>
    public enum TestOneofCase {
      None = 0,
      Maybefoo = 8,
      Maybeint = 9,
      Maybestring = 10,
      NoEventsA = 17,
      HasEventsA = 19,
    }
    private TestOneofCase testCase_ = TestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofCase TestCase {
      get { return testCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTest() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestBlob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestBlob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bar, other.Bar)) return false;
      if (!object.Equals(Foo, other.Foo)) return false;
      if (!intToString_.Equals(other.intToString_)) return false;
      if (!stringToFoo_.Equals(other.stringToFoo_)) return false;
      if(!ilist_.Equals(other.ilist_)) return false;
      if(!slist_.Equals(other.slist_)) return false;
      if(!foolist_.Equals(other.foolist_)) return false;
      if (!object.Equals(Maybefoo, other.Maybefoo)) return false;
      if (Maybeint != other.Maybeint) return false;
      if (Maybestring != other.Maybestring) return false;
      if (!object.Equals(NoEventsA, other.NoEventsA)) return false;
      if (!object.Equals(HasEventsA, other.HasEventsA)) return false;
      if (!object.Equals(Zam, other.Zam)) return false;
      if (FieldBool != other.FieldBool) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(AllPrims, other.AllPrims)) return false;
      if (!object.Equals(TestBlob_, other.TestBlob_)) return false;
      if (!object.Equals(NoEventsB, other.NoEventsB)) return false;
      if (TestCase != other.TestCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bar_ != null) hash ^= Bar.GetHashCode();
      if (foo_ != null) hash ^= Foo.GetHashCode();
      hash ^= intToString_.GetHashCode();
      hash ^= stringToFoo_.GetHashCode();
      hash ^= ilist_.GetHashCode();
      hash ^= slist_.GetHashCode();
      hash ^= foolist_.GetHashCode();
      if (testCase_ == TestOneofCase.Maybefoo) hash ^= Maybefoo.GetHashCode();
      if (testCase_ == TestOneofCase.Maybeint) hash ^= Maybeint.GetHashCode();
      if (testCase_ == TestOneofCase.Maybestring) hash ^= Maybestring.GetHashCode();
      if (testCase_ == TestOneofCase.NoEventsA) hash ^= NoEventsA.GetHashCode();
      if (testCase_ == TestOneofCase.HasEventsA) hash ^= HasEventsA.GetHashCode();
      if (zam_ != null) hash ^= Zam.GetHashCode();
      if (FieldBool != false) hash ^= FieldBool.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (allPrims_ != null) hash ^= AllPrims.GetHashCode();
      if (testBlob_ != null) hash ^= TestBlob_.GetHashCode();
      if (noEventsB_ != null) hash ^= NoEventsB.GetHashCode();
      hash ^= (int) testCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bar_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bar);
      }
      if (foo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Foo);
      }
      intToString_.WriteTo(output, _map_intToString_codec);
      stringToFoo_.WriteTo(output, _map_stringToFoo_codec);
      ilist_.WriteTo(output, _repeated_ilist_codec);
      slist_.WriteTo(output, _repeated_slist_codec);
      foolist_.WriteTo(output, _repeated_foolist_codec);
      if (testCase_ == TestOneofCase.Maybefoo) {
        output.WriteRawTag(66);
        output.WriteMessage(Maybefoo);
      }
      if (testCase_ == TestOneofCase.Maybeint) {
        output.WriteRawTag(72);
        output.WriteInt32(Maybeint);
      }
      if (testCase_ == TestOneofCase.Maybestring) {
        output.WriteRawTag(82);
        output.WriteString(Maybestring);
      }
      if (zam_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Zam);
      }
      if (FieldBool != false) {
        output.WriteRawTag(96);
        output.WriteBool(FieldBool);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Timestamp);
      }
      if (duration_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Duration);
      }
      if (allPrims_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(AllPrims);
      }
      if (testBlob_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TestBlob_);
      }
      if (testCase_ == TestOneofCase.NoEventsA) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(NoEventsA);
      }
      if (noEventsB_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NoEventsB);
      }
      if (testCase_ == TestOneofCase.HasEventsA) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(HasEventsA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bar);
      }
      if (foo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Foo);
      }
      size += intToString_.CalculateSize(_map_intToString_codec);
      size += stringToFoo_.CalculateSize(_map_stringToFoo_codec);
      size += ilist_.CalculateSize(_repeated_ilist_codec);
      size += slist_.CalculateSize(_repeated_slist_codec);
      size += foolist_.CalculateSize(_repeated_foolist_codec);
      if (testCase_ == TestOneofCase.Maybefoo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maybefoo);
      }
      if (testCase_ == TestOneofCase.Maybeint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maybeint);
      }
      if (testCase_ == TestOneofCase.Maybestring) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maybestring);
      }
      if (testCase_ == TestOneofCase.NoEventsA) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoEventsA);
      }
      if (testCase_ == TestOneofCase.HasEventsA) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HasEventsA);
      }
      if (zam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zam);
      }
      if (FieldBool != false) {
        size += 1 + 1;
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (allPrims_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllPrims);
      }
      if (testBlob_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TestBlob_);
      }
      if (noEventsB_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoEventsB);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestBlob other) {
      if (other == null) {
        return;
      }
      if (other.bar_ != null) {
        if (bar_ == null) {
          bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
          bar_.SetParent(Context, 1);
        }
        Bar.MergeFrom(other.Bar);
      }
      if (other.foo_ != null) {
        if (foo_ == null) {
          foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
          foo_.SetParent(Context, 2);
        }
        Foo.MergeFrom(other.Foo);
      }
      intToString_.Add(other.intToString_);
      stringToFoo_.Add(other.stringToFoo_);
      ilist_.Add(other.ilist_);
      slist_.Add(other.slist_);
      foolist_.Add(other.foolist_);
      if (other.zam_ != null) {
        if (zam_ == null) {
          zam_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam();
          zam_.SetParent(Context, 11);
        }
        Zam.MergeFrom(other.Zam);
      }
      if (other.FieldBool != false) {
        fieldBool_ = other.FieldBool;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.allPrims_ != null) {
        if (allPrims_ == null) {
          allPrims_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
          allPrims_.SetParent(Context, 15);
        }
        AllPrims.MergeFrom(other.AllPrims);
      }
      if (other.testBlob_ != null) {
        if (testBlob_ == null) {
          testBlob_ = new global::Com.Zynga.Runtime.Protobuf.File.TestBlob();
          testBlob_.SetParent(Context, 16);
        }
        TestBlob_.MergeFrom(other.TestBlob_);
      }
      if (other.noEventsB_ != null) {
        if (noEventsB_ == null) {
          noEventsB_ = new global::Com.Zynga.Runtime.Protobuf.NoEvents();
        }
        NoEventsB.MergeFrom(other.NoEventsB);
      }
      switch (other.TestCase) {
        case TestOneofCase.Maybefoo:
          if (Maybefoo == null) {
            Maybefoo = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
            Maybefoo.SetParent(Context, 8);
          }
          Maybefoo.MergeFrom(other.Maybefoo);
          break;
        case TestOneofCase.Maybeint:
          Maybeint = other.Maybeint;
          break;
        case TestOneofCase.Maybestring:
          Maybestring = other.Maybestring;
          break;
        case TestOneofCase.NoEventsA:
          if (NoEventsA == null) {
            NoEventsA = new global::Com.Zynga.Runtime.Protobuf.NoEvents();
          }
          NoEventsA.MergeFrom(other.NoEventsA);
          break;
        case TestOneofCase.HasEventsA:
          if (HasEventsA == null) {
            HasEventsA = new global::Com.Zynga.Runtime.Protobuf.HasEvents();
            HasEventsA.SetParent(Context, 19);
          }
          HasEventsA.MergeFrom(other.HasEventsA);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bar_ == null) {
              bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
              bar_.SetParent(Context, 1);
            }
            input.ReadMessage(bar_);
            break;
          }
          case 18: {
            if (foo_ == null) {
              foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
              foo_.SetParent(Context, 2);
            }
            input.ReadMessage(foo_);
            break;
          }
          case 26: {
            intToString_.AddEntriesFrom(input, _map_intToString_codec);
            break;
          }
          case 34: {
            stringToFoo_.AddEntriesFrom(input, _map_stringToFoo_codec);
            break;
          }
          case 42:
          case 40: {
            ilist_.AddEntriesFrom(input, _repeated_ilist_codec);
            break;
          }
          case 50: {
            slist_.AddEntriesFrom(input, _repeated_slist_codec);
            break;
          }
          case 58: {
            foolist_.AddEntriesFrom(input, _repeated_foolist_codec);
            break;
          }
          case 66: {
            global::Com.Zynga.Runtime.Protobuf.File.Foo subBuilder = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
            if (testCase_ == TestOneofCase.Maybefoo) {
              subBuilder.MergeFrom(Maybefoo);
            }
            input.ReadMessage(subBuilder);
            test_ = subBuilder;
            testCase_ = TestOneofCase.Maybefoo;
            subBuilder.SetParent(Context, 8);
            break;
          }
          case 72: {
            test_ = input.ReadInt32();
            testCase_ = TestOneofCase.Maybeint;
            break;
          }
          case 82: {
            test_ = input.ReadString();
            testCase_ = TestOneofCase.Maybestring;
            break;
          }
          case 90: {
            if (zam_ == null) {
              zam_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam();
              zam_.SetParent(Context, 11);
            }
            input.ReadMessage(zam_);
            break;
          }
          case 96: {
            fieldBool_ = input.ReadBool();
            break;
          }
          case 106: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 114: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
          case 122: {
            if (allPrims_ == null) {
              allPrims_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
              allPrims_.SetParent(Context, 15);
            }
            input.ReadMessage(allPrims_);
            break;
          }
          case 130: {
            if (testBlob_ == null) {
              testBlob_ = new global::Com.Zynga.Runtime.Protobuf.File.TestBlob();
              testBlob_.SetParent(Context, 16);
            }
            input.ReadMessage(testBlob_);
            break;
          }
          case 138: {
            global::Com.Zynga.Runtime.Protobuf.NoEvents subBuilder = new global::Com.Zynga.Runtime.Protobuf.NoEvents();
            if (testCase_ == TestOneofCase.NoEventsA) {
              subBuilder.MergeFrom(NoEventsA);
            }
            input.ReadMessage(subBuilder);
            test_ = subBuilder;
            testCase_ = TestOneofCase.NoEventsA;
            break;
          }
          case 146: {
            if (noEventsB_ == null) {
              noEventsB_ = new global::Com.Zynga.Runtime.Protobuf.NoEvents();
            }
            input.ReadMessage(noEventsB_);
            break;
          }
          case 154: {
            global::Com.Zynga.Runtime.Protobuf.HasEvents subBuilder = new global::Com.Zynga.Runtime.Protobuf.HasEvents();
            if (testCase_ == TestOneofCase.HasEventsA) {
              subBuilder.MergeFrom(HasEventsA);
            }
            input.ReadMessage(subBuilder);
            test_ = subBuilder;
            testCase_ = TestOneofCase.HasEventsA;
            subBuilder.SetParent(Context, 19);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (bar_ == null) {
                bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
                bar_.SetParent(Context, 1);
              }
              (bar_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              bar_  = global::Com.Zynga.Runtime.Protobuf.File.Bar.Parser.ParseFrom(e.Set.ByteData);
              bar_.SetParent(Context, 1);
            }
          }
          break;
          case 2: {
            if (e.Path.Count - 1 != pathIndex) {
              if (foo_ == null) {
                foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
                foo_.SetParent(Context, 2);
              }
              (foo_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              foo_  = global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser.ParseFrom(e.Set.ByteData);
              foo_.SetParent(Context, 2);
            }
          }
          break;
          case 3: {
            intToString_.ApplyEvent(e.MapEvent);
          }
          break;
          case 4: {
            stringToFoo_.ApplyEvent(e.MapEvent);
          }
          break;
          case 5: {
            ilist_.ApplyEvent(e.ListEvent);
          }
          break;
          case 6: {
            slist_.ApplyEvent(e.ListEvent);
          }
          break;
          case 7: {
            foolist_.ApplyEvent(e.ListEvent);
          }
          break;
          case 8: {
            if (e.Path.Count - 1 != pathIndex) {
              if (test_ == null) {
                test_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
                (test_ as zpr::IEventRegistry)?.SetParent(Context, 8);
              }
              (test_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              test_   = global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser.ParseFrom(e.Set.ByteData);
              (test_ as zpr::IEventRegistry)?.SetParent(Context, 8);
            }
            testCase_ = test_ == null ? TestOneofCase.None : TestOneofCase.Maybefoo;
          }
          break;
          case 9: {
            test_ = e.Set.I32;
            testCase_ = TestOneofCase.Maybeint;
          }
          break;
          case 10: {
            test_ = pb::ProtoPreconditions.CheckNotNull(e.Set.StringData, "value");
            testCase_ = TestOneofCase.Maybestring;
          }
          break;
          case 17: {
            test_  = global::Com.Zynga.Runtime.Protobuf.NoEvents.Parser.ParseFrom(e.Set.ByteData);
            testCase_ = test_ == null ? TestOneofCase.None : TestOneofCase.NoEventsA;
          }
          break;
          case 19: {
            if (e.Path.Count - 1 != pathIndex) {
              if (test_ == null) {
                test_ = new global::Com.Zynga.Runtime.Protobuf.HasEvents();
                (test_ as zpr::IEventRegistry)?.SetParent(Context, 19);
              }
              (test_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              test_   = global::Com.Zynga.Runtime.Protobuf.HasEvents.Parser.ParseFrom(e.Set.ByteData);
              (test_ as zpr::IEventRegistry)?.SetParent(Context, 19);
            }
            testCase_ = test_ == null ? TestOneofCase.None : TestOneofCase.HasEventsA;
          }
          break;
          case 11: {
            if (e.Path.Count - 1 != pathIndex) {
              if (zam_ == null) {
                zam_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam();
                zam_.SetParent(Context, 11);
              }
              (zam_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              zam_  = global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.Zam.Parser.ParseFrom(e.Set.ByteData);
              zam_.SetParent(Context, 11);
            }
          }
          break;
          case 12: {
            fieldBool_ = e.Set.BoolData;
          }
          break;
          case 13: {
            timestamp_  = global::Google.Protobuf.WellKnownTypes.Timestamp.Parser.ParseFrom(e.Set.ByteData);
          }
          break;
          case 14: {
            duration_  = global::Google.Protobuf.WellKnownTypes.Duration.Parser.ParseFrom(e.Set.ByteData);
          }
          break;
          case 15: {
            if (e.Path.Count - 1 != pathIndex) {
              if (allPrims_ == null) {
                allPrims_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
                allPrims_.SetParent(Context, 15);
              }
              (allPrims_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              allPrims_  = global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives.Parser.ParseFrom(e.Set.ByteData);
              allPrims_.SetParent(Context, 15);
            }
          }
          break;
          case 16: {
            if (e.Path.Count - 1 != pathIndex) {
              if (testBlob_ == null) {
                testBlob_ = new global::Com.Zynga.Runtime.Protobuf.File.TestBlob();
                testBlob_.SetParent(Context, 16);
              }
              (testBlob_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              testBlob_  = global::Com.Zynga.Runtime.Protobuf.File.TestBlob.Parser.ParseFrom(e.Set.ByteData);
              testBlob_.SetParent(Context, 16);
            }
          }
          break;
          case 18: {
            noEventsB_  = global::Com.Zynga.Runtime.Protobuf.NoEvents.Parser.ParseFrom(e.Set.ByteData);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class Foo : zpr::EventRegistry<Foo>, pb::IMessage<Foo> {
    private static readonly pb::MessageParser<Foo> _parser = new pb::MessageParser<Foo>(() => new Foo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Foo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foo(Foo other) : this() {
      long_ = other.long_;
      str_ = other.str_;
      if(other.foo_ != null) {
        foo_ = other.Foo_.Clone();
        foo_.SetParent(Context, 3);
      }
      enumero_ = other.enumero_;
      okay_ = other.okay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foo Clone() {
      return new Foo(this);
    }

    public static bool IsEventSourced = true;

    protected override Foo Message { get{ return this; } }

    /// <summary>Field number for the "long" field.</summary>
    public const int LongFieldNumber = 1;
    private long long_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Long {
      get { return long_; }
      set {
        #if !DISABLE_EVENTS
        if(long_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        long_ = value;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 2;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        #if !DISABLE_EVENTS
        if(str_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "foo" field.</summary>
    public const int Foo_FieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.File.Foo foo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo Foo_ {
      get { return foo_; }
      set {
        if(foo_ != null) foo_.ClearParent();
        value.SetParent(Context, 3);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(foo_)) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        foo_ = value;
      }
    }

    /// <summary>Field number for the "enumero" field.</summary>
    public const int EnumeroFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.File.Enumero enumero_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Enumero Enumero {
      get { return enumero_; }
      set {
        #if !DISABLE_EVENTS
        if(enumero_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumero_ = value;
      }
    }

    /// <summary>Field number for the "okay" field.</summary>
    public const int OkayFieldNumber = 5;
    private global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.ok okay_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.ok Okay {
      get { return okay_; }
      set {
        #if !DISABLE_EVENTS
        if(okay_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        okay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Foo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Foo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Long != other.Long) return false;
      if (Str != other.Str) return false;
      if (!object.Equals(Foo_, other.Foo_)) return false;
      if (Enumero != other.Enumero) return false;
      if (Okay != other.Okay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Long != 0L) hash ^= Long.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (foo_ != null) hash ^= Foo_.GetHashCode();
      if (Enumero != 0) hash ^= Enumero.GetHashCode();
      if (Okay != 0) hash ^= Okay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Long != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Long);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Str);
      }
      if (foo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Foo_);
      }
      if (Enumero != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Enumero);
      }
      if (Okay != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Okay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Long != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Long);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (foo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Foo_);
      }
      if (Enumero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Enumero);
      }
      if (Okay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Okay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Foo other) {
      if (other == null) {
        return;
      }
      if (other.Long != 0L) {
        long_ = other.Long;
      }
      if (other.Str.Length != 0) {
        str_ = other.Str;
      }
      if (other.foo_ != null) {
        if (foo_ == null) {
          foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
          foo_.SetParent(Context, 3);
        }
        Foo_.MergeFrom(other.Foo_);
      }
      if (other.Enumero != 0) {
        enumero_ = other.Enumero;
      }
      if (other.Okay != 0) {
        okay_ = other.Okay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            long_ = input.ReadInt64();
            break;
          }
          case 18: {
            str_ = input.ReadString();
            break;
          }
          case 26: {
            if (foo_ == null) {
              foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
              foo_.SetParent(Context, 3);
            }
            input.ReadMessage(foo_);
            break;
          }
          case 32: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero) input.ReadEnum();
            break;
          }
          case 40: {
            okay_ = (global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.ok) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Foo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ok {
        [pbr::OriginalName("HI")] Hi = 0,
      }

      public sealed partial class Zam : zpr::EventRegistry<Zam>, pb::IMessage<Zam> {
        private static readonly pb::MessageParser<Zam> _parser = new pb::MessageParser<Zam>(() => new Zam());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Zam> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Zynga.Runtime.Protobuf.File.Foo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zam() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zam(Zam other) : this() {
          hi_ = other.hi_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zam Clone() {
          return new Zam(this);
        }

        public static bool IsEventSourced = true;

        protected override Zam Message { get{ return this; } }

        /// <summary>Field number for the "hi" field.</summary>
        public const int HiFieldNumber = 1;
        private int hi_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hi {
          get { return hi_; }
          set {
            #if !DISABLE_EVENTS
            if(hi_ != value) {
              Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
            }
            #endif
            hi_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Zam);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Zam other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hi != other.Hi) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hi != 0) hash ^= Hi.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hi != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Hi);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hi != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hi);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Zam other) {
          if (other == null) {
            return;
          }
          if (other.Hi != 0) {
            hi_ = other.Hi;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                hi_ = input.ReadInt32();
                break;
              }
            }
          }
        }

        public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
            if (e.Path.Count == 0) {
              this.MergeFrom(e.Set.ByteData);
              return true;
            }
            switch (e.Path[pathIndex]) {
              case 1: {
                hi_ = e.Set.I32;
              }
              break;
              default:
                return false;
              break;
            }
          return true;
        }

        public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
          ClearEvents();
          var er = new zpr.EventSource.EventSourceRoot();
          var setEvent = new zpr.EventSource.EventData {
            Set = new zpr.EventSource.EventContent {
              ByteData = this.ToByteString()
            }
          };
          er.Events.Add(setEvent);
          return er;
        }

      }

    }
    #endregion

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            long_ = e.Set.I64;
          }
          break;
          case 2: {
            str_ = e.Set.StringData;
          }
          break;
          case 3: {
            if (e.Path.Count - 1 != pathIndex) {
              if (foo_ == null) {
                foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
                foo_.SetParent(Context, 3);
              }
              (foo_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              foo_  = global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser.ParseFrom(e.Set.ByteData);
              foo_.SetParent(Context, 3);
            }
          }
          break;
          case 4: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero)e.Set.U32;
          }
          break;
          case 5: {
            okay_ = (global::Com.Zynga.Runtime.Protobuf.File.Foo.Types.ok)e.Set.U32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class Bar : zpr::EventRegistry<Bar>, pb::IMessage<Bar> {
    private static readonly pb::MessageParser<Bar> _parser = new pb::MessageParser<Bar>(() => new Bar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bar(Bar other) : this() {
      if(other.foo_ != null) {
        foo_ = other.Foo.Clone();
        foo_.SetParent(Context, 1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bar Clone() {
      return new Bar(this);
    }

    public static bool IsEventSourced = true;

    protected override Bar Message { get{ return this; } }

    /// <summary>Field number for the "foo" field.</summary>
    public const int FooFieldNumber = 1;
    private global::Com.Zynga.Runtime.Protobuf.File.Foo foo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Foo Foo {
      get { return foo_; }
      set {
        if(foo_ != null) foo_.ClearParent();
        value.SetParent(Context, 1);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(foo_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        foo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Foo, other.Foo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (foo_ != null) hash ^= Foo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (foo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Foo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (foo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Foo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bar other) {
      if (other == null) {
        return;
      }
      if (other.foo_ != null) {
        if (foo_ == null) {
          foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
          foo_.SetParent(Context, 1);
        }
        Foo.MergeFrom(other.Foo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (foo_ == null) {
              foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
              foo_.SetParent(Context, 1);
            }
            input.ReadMessage(foo_);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (foo_ == null) {
                foo_ = new global::Com.Zynga.Runtime.Protobuf.File.Foo();
                foo_.SetParent(Context, 1);
              }
              (foo_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              foo_  = global::Com.Zynga.Runtime.Protobuf.File.Foo.Parser.ParseFrom(e.Set.ByteData);
              foo_.SetParent(Context, 1);
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class AllPrimitives : zpr::EventRegistry<AllPrimitives>, pb::IMessage<AllPrimitives> {
    private static readonly pb::MessageParser<AllPrimitives> _parser = new pb::MessageParser<AllPrimitives>(() => new AllPrimitives());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllPrimitives> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPrimitives() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPrimitives(AllPrimitives other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
      d_ = other.d_;
      e_ = other.e_;
      f_ = other.f_;
      g_ = other.g_;
      h_ = other.h_;
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      l_ = other.l_;
      m_ = other.m_;
      n_ = other.n_;
      o_ = other.o_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPrimitives Clone() {
      return new AllPrimitives(this);
    }

    public static bool IsEventSourced = true;

    protected override AllPrimitives Message { get{ return this; } }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private uint a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        #if !DISABLE_EVENTS
        if(a_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { U32 = value });
        }
        #endif
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        #if !DISABLE_EVENTS
        if(b_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private ulong c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong C {
      get { return c_; }
      set {
        #if !DISABLE_EVENTS
        if(c_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { F64 = value });
        }
        #endif
        c_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 4;
    private uint d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint D {
      get { return d_; }
      set {
        #if !DISABLE_EVENTS
        if(d_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { F32 = value });
        }
        #endif
        d_ = value;
      }
    }

    /// <summary>Field number for the "e" field.</summary>
    public const int EFieldNumber = 5;
    private long e_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long E {
      get { return e_; }
      set {
        #if !DISABLE_EVENTS
        if(e_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { SF64 = value });
        }
        #endif
        e_ = value;
      }
    }

    /// <summary>Field number for the "f" field.</summary>
    public const int FFieldNumber = 6;
    private int f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F {
      get { return f_; }
      set {
        #if !DISABLE_EVENTS
        if(f_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { SF32 = value });
        }
        #endif
        f_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 7;
    private double g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double G {
      get { return g_; }
      set {
        #if !DISABLE_EVENTS
        if(g_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { R64 = value });
        }
        #endif
        g_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 8;
    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { return h_; }
      set {
        #if !DISABLE_EVENTS
        if(h_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        h_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 9;
    private bool i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { BoolData = value });
        }
        #endif
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 10;
    private string j_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string J {
      get { return j_; }
      set {
        #if !DISABLE_EVENTS
        if(j_ != value) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        j_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 11;
    private pb::ByteString k_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString K {
      get { return k_; }
      set {
        #if !DISABLE_EVENTS
        if(k_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { ByteData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        k_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 12;
    private long l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long L {
      get { return l_; }
      set {
        #if !DISABLE_EVENTS
        if(l_ != value) {
          Context.AddSetEvent(12, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        l_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 13;
    private ulong m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong M {
      get { return m_; }
      set {
        #if !DISABLE_EVENTS
        if(m_ != value) {
          Context.AddSetEvent(13, new zpr.EventSource.EventContent { U64 = value });
        }
        #endif
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 14;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        #if !DISABLE_EVENTS
        if(n_ != value) {
          Context.AddSetEvent(14, new zpr.EventSource.EventContent { SI32 = value });
        }
        #endif
        n_ = value;
      }
    }

    /// <summary>Field number for the "o" field.</summary>
    public const int OFieldNumber = 15;
    private long o_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long O {
      get { return o_; }
      set {
        #if !DISABLE_EVENTS
        if(o_ != value) {
          Context.AddSetEvent(15, new zpr.EventSource.EventContent { SI64 = value });
        }
        #endif
        o_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllPrimitives);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllPrimitives other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      if (D != other.D) return false;
      if (E != other.E) return false;
      if (F != other.F) return false;
      if (G != other.G) return false;
      if (H != other.H) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (L != other.L) return false;
      if (M != other.M) return false;
      if (N != other.N) return false;
      if (O != other.O) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (C != 0UL) hash ^= C.GetHashCode();
      if (D != 0) hash ^= D.GetHashCode();
      if (E != 0L) hash ^= E.GetHashCode();
      if (F != 0) hash ^= F.GetHashCode();
      if (G != 0D) hash ^= G.GetHashCode();
      if (H != 0F) hash ^= H.GetHashCode();
      if (I != false) hash ^= I.GetHashCode();
      if (J.Length != 0) hash ^= J.GetHashCode();
      if (K.Length != 0) hash ^= K.GetHashCode();
      if (L != 0L) hash ^= L.GetHashCode();
      if (M != 0UL) hash ^= M.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (O != 0L) hash ^= O.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(B);
      }
      if (C != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(C);
      }
      if (D != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(D);
      }
      if (E != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(E);
      }
      if (F != 0) {
        output.WriteRawTag(53);
        output.WriteSFixed32(F);
      }
      if (G != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(G);
      }
      if (H != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(H);
      }
      if (I != false) {
        output.WriteRawTag(72);
        output.WriteBool(I);
      }
      if (J.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(J);
      }
      if (K.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(K);
      }
      if (L != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(L);
      }
      if (M != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(M);
      }
      if (N != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(N);
      }
      if (O != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(O);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (C != 0UL) {
        size += 1 + 8;
      }
      if (D != 0) {
        size += 1 + 4;
      }
      if (E != 0L) {
        size += 1 + 8;
      }
      if (F != 0) {
        size += 1 + 4;
      }
      if (G != 0D) {
        size += 1 + 8;
      }
      if (H != 0F) {
        size += 1 + 4;
      }
      if (I != false) {
        size += 1 + 1;
      }
      if (J.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(J);
      }
      if (K.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(K);
      }
      if (L != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(L);
      }
      if (M != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(M);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(N);
      }
      if (O != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(O);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllPrimitives other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        a_ = other.A;
      }
      if (other.B != 0) {
        b_ = other.B;
      }
      if (other.C != 0UL) {
        c_ = other.C;
      }
      if (other.D != 0) {
        d_ = other.D;
      }
      if (other.E != 0L) {
        e_ = other.E;
      }
      if (other.F != 0) {
        f_ = other.F;
      }
      if (other.G != 0D) {
        g_ = other.G;
      }
      if (other.H != 0F) {
        h_ = other.H;
      }
      if (other.I != false) {
        i_ = other.I;
      }
      if (other.J.Length != 0) {
        j_ = other.J;
      }
      if (other.K.Length != 0) {
        k_ = other.K;
      }
      if (other.L != 0L) {
        l_ = other.L;
      }
      if (other.M != 0UL) {
        m_ = other.M;
      }
      if (other.N != 0) {
        n_ = other.N;
      }
      if (other.O != 0L) {
        o_ = other.O;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            a_ = input.ReadUInt32();
            break;
          }
          case 16: {
            b_ = input.ReadInt32();
            break;
          }
          case 25: {
            c_ = input.ReadFixed64();
            break;
          }
          case 37: {
            d_ = input.ReadFixed32();
            break;
          }
          case 41: {
            e_ = input.ReadSFixed64();
            break;
          }
          case 53: {
            f_ = input.ReadSFixed32();
            break;
          }
          case 57: {
            g_ = input.ReadDouble();
            break;
          }
          case 69: {
            h_ = input.ReadFloat();
            break;
          }
          case 72: {
            i_ = input.ReadBool();
            break;
          }
          case 82: {
            j_ = input.ReadString();
            break;
          }
          case 90: {
            k_ = input.ReadBytes();
            break;
          }
          case 96: {
            l_ = input.ReadInt64();
            break;
          }
          case 104: {
            m_ = input.ReadUInt64();
            break;
          }
          case 112: {
            n_ = input.ReadSInt32();
            break;
          }
          case 120: {
            o_ = input.ReadSInt64();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            a_ = e.Set.U32;
          }
          break;
          case 2: {
            b_ = e.Set.I32;
          }
          break;
          case 3: {
            c_ = e.Set.F64;
          }
          break;
          case 4: {
            d_ = e.Set.F32;
          }
          break;
          case 5: {
            e_ = e.Set.SF64;
          }
          break;
          case 6: {
            f_ = e.Set.SF32;
          }
          break;
          case 7: {
            g_ = e.Set.R64;
          }
          break;
          case 8: {
            h_ = e.Set.R32;
          }
          break;
          case 9: {
            i_ = e.Set.BoolData;
          }
          break;
          case 10: {
            j_ = e.Set.StringData;
          }
          break;
          case 11: {
            k_ = e.Set.ByteData;
          }
          break;
          case 12: {
            l_ = e.Set.I64;
          }
          break;
          case 13: {
            m_ = e.Set.U64;
          }
          break;
          case 14: {
            n_ = e.Set.SI32;
          }
          break;
          case 15: {
            o_ = e.Set.SI64;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class RecursiveMap : zpr::EventRegistry<RecursiveMap>, pb::IMessage<RecursiveMap> {
    private static readonly pb::MessageParser<RecursiveMap> _parser = new pb::MessageParser<RecursiveMap>(() => new RecursiveMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecursiveMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveMap() {
      OnConstruction();
    map_ = new EventMapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap>(mapMapConverter, Context, 1, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveMap(RecursiveMap other) : this() {
      map_ = new EventMapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap>(mapMapConverter, Context, 1, other.map_.Clone(), true);
      if(other.primitives_ != null) {
        primitives_ = other.Primitives.Clone();
        primitives_.SetParent(Context, 2);
      }
      enumero_ = other.enumero_;
      if(other.bar_ != null) {
        bar_ = other.Bar.Clone();
        bar_.SetParent(Context, 4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveMap Clone() {
      return new RecursiveMap(this);
    }

    public static bool IsEventSourced = true;

    protected override RecursiveMap Message { get{ return this; } }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap>.Codec _map_map_codec
        = new pbc::MapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap.Parser), 10);
    internal class MapMapConverter : EventMapConverter<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap> {
      public override zpr.EventSource.MapKey GetMapKey(int key) {
        return new zpr.EventSource.MapKey { I32 = key };
      }
      public override int GetKey(zpr.EventSource.MapKey key) {
        return key.I32;
      }
      public override ByteString GetKeyValue(int key, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap value) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap> GetItem(ByteString data) {
        var dataStream = data.CreateCodedInput();
        var realKeymap = dataStream.ReadInt32();
        var realValuemap = new global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap();
        dataStream.ReadMessage(realValuemap);;
        return new KeyValuePair<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap>(realKeymap, realValuemap);
      }
    }
    private static readonly EventMapConverter<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap> mapMapConverter = new MapMapConverter();
    private readonly EventMapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap> map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Com.Zynga.Runtime.Protobuf.File.RecursiveMap> Map {
      get { return map_; }
    }

    /// <summary>Field number for the "primitives" field.</summary>
    public const int PrimitivesFieldNumber = 2;
    private global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives primitives_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives Primitives {
      get { return primitives_; }
      set {
        if(primitives_ != null) primitives_.ClearParent();
        value.SetParent(Context, 2);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(primitives_)) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        primitives_ = value;
      }
    }

    /// <summary>Field number for the "enumero" field.</summary>
    public const int EnumeroFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.File.Enumero enumero_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Enumero Enumero {
      get { return enumero_; }
      set {
        #if !DISABLE_EVENTS
        if(enumero_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumero_ = value;
      }
    }

    /// <summary>Field number for the "bar" field.</summary>
    public const int BarFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.File.Bar bar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Bar Bar {
      get { return bar_; }
      set {
        if(bar_ != null) bar_.ClearParent();
        value.SetParent(Context, 4);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(bar_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        bar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecursiveMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecursiveMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!map_.Equals(other.map_)) return false;
      if (!object.Equals(Primitives, other.Primitives)) return false;
      if (Enumero != other.Enumero) return false;
      if (!object.Equals(Bar, other.Bar)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= map_.GetHashCode();
      if (primitives_ != null) hash ^= Primitives.GetHashCode();
      if (Enumero != 0) hash ^= Enumero.GetHashCode();
      if (bar_ != null) hash ^= Bar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      map_.WriteTo(output, _map_map_codec);
      if (primitives_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Primitives);
      }
      if (Enumero != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Enumero);
      }
      if (bar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += map_.CalculateSize(_map_map_codec);
      if (primitives_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Primitives);
      }
      if (Enumero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Enumero);
      }
      if (bar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecursiveMap other) {
      if (other == null) {
        return;
      }
      map_.Add(other.map_);
      if (other.primitives_ != null) {
        if (primitives_ == null) {
          primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
          primitives_.SetParent(Context, 2);
        }
        Primitives.MergeFrom(other.Primitives);
      }
      if (other.Enumero != 0) {
        enumero_ = other.Enumero;
      }
      if (other.bar_ != null) {
        if (bar_ == null) {
          bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
          bar_.SetParent(Context, 4);
        }
        Bar.MergeFrom(other.Bar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            map_.AddEntriesFrom(input, _map_map_codec);
            break;
          }
          case 18: {
            if (primitives_ == null) {
              primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
              primitives_.SetParent(Context, 2);
            }
            input.ReadMessage(primitives_);
            break;
          }
          case 24: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero) input.ReadEnum();
            break;
          }
          case 34: {
            if (bar_ == null) {
              bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
              bar_.SetParent(Context, 4);
            }
            input.ReadMessage(bar_);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            map_.ApplyEvent(e.MapEvent);
          }
          break;
          case 2: {
            if (e.Path.Count - 1 != pathIndex) {
              if (primitives_ == null) {
                primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
                primitives_.SetParent(Context, 2);
              }
              (primitives_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              primitives_  = global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives.Parser.ParseFrom(e.Set.ByteData);
              primitives_.SetParent(Context, 2);
            }
          }
          break;
          case 3: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (bar_ == null) {
                bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
                bar_.SetParent(Context, 4);
              }
              (bar_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              bar_  = global::Com.Zynga.Runtime.Protobuf.File.Bar.Parser.ParseFrom(e.Set.ByteData);
              bar_.SetParent(Context, 4);
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class RecursiveList : zpr::EventRegistry<RecursiveList>, pb::IMessage<RecursiveList> {
    private static readonly pb::MessageParser<RecursiveList> _parser = new pb::MessageParser<RecursiveList>(() => new RecursiveList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecursiveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.File.FileTestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveList() {
      OnConstruction();
    list_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList>(listDataConverter, Context, 1, true);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveList(RecursiveList other) : this() {
      list_ = new EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList>(listDataConverter, Context, 1, other.List.Clone(), true);
      if(other.primitives_ != null) {
        primitives_ = other.Primitives.Clone();
        primitives_.SetParent(Context, 2);
      }
      enumero_ = other.enumero_;
      if(other.bar_ != null) {
        bar_ = other.Bar.Clone();
        bar_.SetParent(Context, 4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecursiveList Clone() {
      return new RecursiveList(this);
    }

    public static bool IsEventSourced = true;

    protected override RecursiveList Message { get{ return this; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Zynga.Runtime.Protobuf.File.RecursiveList.Parser);
    public class ListDataConverter: EventDataConverter<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList> {
      public override zpr.EventSource.EventContent GetEventData(global::Com.Zynga.Runtime.Protobuf.File.RecursiveList data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Com.Zynga.Runtime.Protobuf.File.RecursiveList GetItem(zpr.EventSource.EventContent data) {
        return global::Com.Zynga.Runtime.Protobuf.File.RecursiveList.Parser.ParseFrom(data.ByteData);
      }
    }
    private static ListDataConverter listDataConverter = new ListDataConverter();
    private readonly EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList> list_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Com.Zynga.Runtime.Protobuf.File.RecursiveList> List {
      get { return list_; }
    }

    /// <summary>Field number for the "primitives" field.</summary>
    public const int PrimitivesFieldNumber = 2;
    private global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives primitives_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives Primitives {
      get { return primitives_; }
      set {
        if(primitives_ != null) primitives_.ClearParent();
        value.SetParent(Context, 2);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(primitives_)) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        primitives_ = value;
      }
    }

    /// <summary>Field number for the "enumero" field.</summary>
    public const int EnumeroFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.File.Enumero enumero_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Enumero Enumero {
      get { return enumero_; }
      set {
        #if !DISABLE_EVENTS
        if(enumero_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumero_ = value;
      }
    }

    /// <summary>Field number for the "bar" field.</summary>
    public const int BarFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.File.Bar bar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.File.Bar Bar {
      get { return bar_; }
      set {
        if(bar_ != null) bar_.ClearParent();
        value.SetParent(Context, 4);
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(bar_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        bar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecursiveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecursiveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (!object.Equals(Primitives, other.Primitives)) return false;
      if (Enumero != other.Enumero) return false;
      if (!object.Equals(Bar, other.Bar)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (primitives_ != null) hash ^= Primitives.GetHashCode();
      if (Enumero != 0) hash ^= Enumero.GetHashCode();
      if (bar_ != null) hash ^= Bar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (primitives_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Primitives);
      }
      if (Enumero != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Enumero);
      }
      if (bar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (primitives_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Primitives);
      }
      if (Enumero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Enumero);
      }
      if (bar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecursiveList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.primitives_ != null) {
        if (primitives_ == null) {
          primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
          primitives_.SetParent(Context, 2);
        }
        Primitives.MergeFrom(other.Primitives);
      }
      if (other.Enumero != 0) {
        enumero_ = other.Enumero;
      }
      if (other.bar_ != null) {
        if (bar_ == null) {
          bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
          bar_.SetParent(Context, 4);
        }
        Bar.MergeFrom(other.Bar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 18: {
            if (primitives_ == null) {
              primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
              primitives_.SetParent(Context, 2);
            }
            input.ReadMessage(primitives_);
            break;
          }
          case 24: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero) input.ReadEnum();
            break;
          }
          case 34: {
            if (bar_ == null) {
              bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
              bar_.SetParent(Context, 4);
            }
            input.ReadMessage(bar_);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            list_.ApplyEvent(e.ListEvent);
          }
          break;
          case 2: {
            if (e.Path.Count - 1 != pathIndex) {
              if (primitives_ == null) {
                primitives_ = new global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives();
                primitives_.SetParent(Context, 2);
              }
              (primitives_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              primitives_  = global::Com.Zynga.Runtime.Protobuf.File.AllPrimitives.Parser.ParseFrom(e.Set.ByteData);
              primitives_.SetParent(Context, 2);
            }
          }
          break;
          case 3: {
            enumero_ = (global::Com.Zynga.Runtime.Protobuf.File.Enumero)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (bar_ == null) {
                bar_ = new global::Com.Zynga.Runtime.Protobuf.File.Bar();
                bar_.SetParent(Context, 4);
              }
              (bar_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              bar_  = global::Com.Zynga.Runtime.Protobuf.File.Bar.Parser.ParseFrom(e.Set.ByteData);
              bar_.SetParent(Context, 4);
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
