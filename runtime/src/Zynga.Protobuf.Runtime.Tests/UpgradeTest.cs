// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/upgrade_test.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf {

  /// <summary>Holder for reflection information generated from test/upgrade_test.proto</summary>
  public static partial class UpgradeTestReflection {

    #region Descriptor
    /// <summary>File descriptor for test/upgrade_test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UpgradeTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chd0ZXN0L3VwZ3JhZGVfdGVzdC5wcm90bxIaY29tLnp5bmdhLnJ1bnRpbWUu",
            "cHJvdG9idWYaEmV2ZW50X3BsdWdpbi5wcm90byIrCg5OZXN0ZWRNZXNzYWdl",
            "MRITCgVpbnRfYRgBIAEoBVIEaW50QToEyLgeASJACg5OZXN0ZWRNZXNzYWdl",
            "MhITCgVpbnRfYRgBIAEoBVIEaW50QRITCgVpbnRfYhgCIAEoBVIEaW50QjoE",
            "yLgeASKGAwoPVXBncmFkZU1lc3NhZ2UxEhUKBmxvbmdfYRgBIAEoA1IFbG9u",
            "Z0ESEwoFc3RyX2EYAiABKAlSBHN0ckESOAoGZW51bV9hGAMgASgOMiEuY29t",
            "Lnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuRW51bTFSBWVudW1BEkUKCG5lc3Rl",
            "ZF9hGAQgASgLMiouY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuTmVzdGVk",
            "TWVzc2FnZTFSB25lc3RlZEESFQoGbGlzdF9hGAUgAygFUgVsaXN0QRJKCgVt",
            "YXBfYRgGIAMoCzI1LmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlVwZ3Jh",
            "ZGVNZXNzYWdlMS5NYXBBRW50cnlSBG1hcEESGQoHZmxvYXRfYRgHIAEoAkgA",
            "UgZmbG9hdEEaNwoJTWFwQUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZh",
            "bHVlGAIgASgJUgV2YWx1ZToCOAE6BMi4HgFCCQoHb25lb2ZfYSKGAwoPVXBn",
            "cmFkZU1lc3NhZ2UyEhUKBmxvbmdfYhgBIAEoA1IFbG9uZ0ISEwoFc3RyX2IY",
            "AiABKAlSBHN0ckISOAoGZW51bV9iGAMgASgOMiEuY29tLnp5bmdhLnJ1bnRp",
            "bWUucHJvdG9idWYuRW51bTFSBWVudW1CEkUKCG5lc3RlZF9iGAQgASgLMiou",
            "Y29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuTmVzdGVkTWVzc2FnZTFSB25l",
            "c3RlZEISFQoGbGlzdF9iGAUgAygFUgVsaXN0QhJKCgVtYXBfYhgGIAMoCzI1",
            "LmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlVwZ3JhZGVNZXNzYWdlMi5N",
            "YXBCRW50cnlSBG1hcEISGQoHZmxvYXRfYhgHIAEoAkgAUgZmbG9hdEIaNwoJ",
            "TWFwQkVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2",
            "YWx1ZToCOAE6BMi4HgFCCQoHb25lb2ZfYiK4AwoPVXBncmFkZU1lc3NhZ2Uz",
            "EhUKBmxvbmdfYhgBIAEoA1IFbG9uZ0ISEwoFc3RyX2IYAiABKAlSBHN0ckIS",
            "OAoGZW51bV9iGAMgASgOMiEuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYu",
            "RW51bTJSBWVudW1CEkUKCG5lc3RlZF9iGAQgASgLMiouY29tLnp5bmdhLnJ1",
            "bnRpbWUucHJvdG9idWYuTmVzdGVkTWVzc2FnZTJSB25lc3RlZEISFQoGbGlz",
            "dF9iGAUgAygFUgVsaXN0QhJKCgVtYXBfYhgGIAMoCzI1LmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLlVwZ3JhZGVNZXNzYWdlMy5NYXBCRW50cnlSBG1h",
            "cEISFQoGbG9uZ19jGAggASgDUgVsb25nQxIZCgdmbG9hdF9iGAcgASgCSABS",
            "BmZsb2F0QhIZCgdmbG9hdF9jGAkgASgCSABSBmZsb2F0Qxo3CglNYXBCRW50",
            "cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4",
            "AToEyLgeAUIJCgdvbmVvZl9iIogDCg9VcGdyYWRlTWVzc2FnZTQSFQoGbG9u",
            "Z19iGAEgASgDUgVsb25nQhI4CgZlbnVtX2IYAyABKA4yIS5jb20uenluZ2Eu",
            "cnVudGltZS5wcm90b2J1Zi5FbnVtMlIFZW51bUISRQoIbmVzdGVkX2IYBCAB",
            "KAsyKi5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5OZXN0ZWRNZXNzYWdl",
            "MlIHbmVzdGVkQhIVCgZsaXN0X2IYBSADKAVSBWxpc3RCEkoKBW1hcF9iGAYg",
            "AygLMjUuY29tLnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuVXBncmFkZU1lc3Nh",
            "Z2U0Lk1hcEJFbnRyeVIEbWFwQhIVCgZsb25nX2MYCCABKANSBWxvbmdDEhkK",
            "B2Zsb2F0X2MYCSABKAJIAFIGZmxvYXRDGjcKCU1hcEJFbnRyeRIQCgNrZXkY",
            "ASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6AjgBOgTIuB4BQgkK",
            "B29uZW9mX2IqOwoFRW51bTESEgoOTkVTVEVEX1VOU0VUXzEQABIOCgpORVNU",
            "RURfQV8xEAESDgoKTkVTVEVEX0JfMRACKksKBUVudW0yEhIKDk5FU1RFRF9V",
            "TlNFVF8yEAASDgoKTkVTVEVEX0FfMhABEg4KCk5FU1RFRF9CXzIQAhIOCgpO",
            "RVNURURfQ18yEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Zynga.Runtime.Protobuf.Enum1), typeof(global::Com.Zynga.Runtime.Protobuf.Enum2), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.NestedMessage1), global::Com.Zynga.Runtime.Protobuf.NestedMessage1.Parser, new[]{ "IntA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.NestedMessage2), global::Com.Zynga.Runtime.Protobuf.NestedMessage2.Parser, new[]{ "IntA", "IntB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.UpgradeMessage1), global::Com.Zynga.Runtime.Protobuf.UpgradeMessage1.Parser, new[]{ "LongA", "StrA", "EnumA", "NestedA", "ListA", "MapA", "FloatA" }, new[]{ "OneofA" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.UpgradeMessage2), global::Com.Zynga.Runtime.Protobuf.UpgradeMessage2.Parser, new[]{ "LongB", "StrB", "EnumB", "NestedB", "ListB", "MapB", "FloatB" }, new[]{ "OneofB" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.UpgradeMessage3), global::Com.Zynga.Runtime.Protobuf.UpgradeMessage3.Parser, new[]{ "LongB", "StrB", "EnumB", "NestedB", "ListB", "MapB", "LongC", "FloatB", "FloatC" }, new[]{ "OneofB" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.UpgradeMessage4), global::Com.Zynga.Runtime.Protobuf.UpgradeMessage4.Parser, new[]{ "LongB", "EnumB", "NestedB", "ListB", "MapB", "LongC", "FloatC" }, new[]{ "OneofB" }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum Enum1 {
    [pbr::OriginalName("NESTED_UNSET_1")] NestedUnset1 = 0,
    [pbr::OriginalName("NESTED_A_1")] NestedA1 = 1,
    [pbr::OriginalName("NESTED_B_1")] NestedB1 = 2,
  }

  public enum Enum2 {
    [pbr::OriginalName("NESTED_UNSET_2")] NestedUnset2 = 0,
    [pbr::OriginalName("NESTED_A_2")] NestedA2 = 1,
    [pbr::OriginalName("NESTED_B_2")] NestedB2 = 2,
    [pbr::OriginalName("NESTED_C_2")] NestedC2 = 3,
  }

  #endregion

  #region Messages
  public sealed partial class NestedMessage1 : zpr::EventRegistry<NestedMessage1>, pb::IMessage<NestedMessage1> {
    private static readonly pb::MessageParser<NestedMessage1> _parser = new pb::MessageParser<NestedMessage1>(() => new NestedMessage1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedMessage1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage1(NestedMessage1 other) : this() {
      intA_ = other.intA_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage1 Clone() {
      return new NestedMessage1(this);
    }

    public static bool IsEventSourced = true;

    protected override NestedMessage1 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "int_a" field.</summary>
    public const int IntAFieldNumber = 1;
    private int intA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntA {
      get { return intA_; }
      set {
        #if !DISABLE_EVENTS
        if(intA_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        intA_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedMessage1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedMessage1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntA != other.IntA) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntA != 0) hash ^= IntA.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntA != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntA);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedMessage1 other) {
      if (other == null) {
        return;
      }
      if (other.IntA != 0) {
        IntA = other.IntA;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntA = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            intA_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class NestedMessage2 : zpr::EventRegistry<NestedMessage2>, pb::IMessage<NestedMessage2> {
    private static readonly pb::MessageParser<NestedMessage2> _parser = new pb::MessageParser<NestedMessage2>(() => new NestedMessage2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedMessage2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage2(NestedMessage2 other) : this() {
      intA_ = other.intA_;
      intB_ = other.intB_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedMessage2 Clone() {
      return new NestedMessage2(this);
    }

    public static bool IsEventSourced = true;

    protected override NestedMessage2 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "int_a" field.</summary>
    public const int IntAFieldNumber = 1;
    private int intA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntA {
      get { return intA_; }
      set {
        #if !DISABLE_EVENTS
        if(intA_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        intA_ = value;
      }
    }

    /// <summary>Field number for the "int_b" field.</summary>
    public const int IntBFieldNumber = 2;
    private int intB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntB {
      get { return intB_; }
      set {
        #if !DISABLE_EVENTS
        if(intB_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        intB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedMessage2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedMessage2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntA != other.IntA) return false;
      if (IntB != other.IntB) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntA != 0) hash ^= IntA.GetHashCode();
      if (IntB != 0) hash ^= IntB.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntA != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntA);
      }
      if (IntB != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IntB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntA);
      }
      if (IntB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntB);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedMessage2 other) {
      if (other == null) {
        return;
      }
      if (other.IntA != 0) {
        IntA = other.IntA;
      }
      if (other.IntB != 0) {
        IntB = other.IntB;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntA = input.ReadInt32();
            break;
          }
          case 16: {
            IntB = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            intA_ = e.Set.I32;
          }
          break;
          case 2: {
            intB_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class UpgradeMessage1 : zpr::EventRegistry<UpgradeMessage1>, pb::IMessage<UpgradeMessage1> {
    private static readonly pb::MessageParser<UpgradeMessage1> _parser = new pb::MessageParser<UpgradeMessage1>(() => new UpgradeMessage1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeMessage1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage1() {
      OnConstruction();
      listA_.SetContext(Context, 5);
      mapA_.SetContext(Context, 6);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage1(UpgradeMessage1 other) : this() {
      longA_ = other.longA_;
      strA_ = other.strA_;
      enumA_ = other.enumA_;
      nestedA_ = other.nestedA_ != null ? other.NestedA.Clone() : null;
      listA_ = new EventRepeatedField<int>(listADataConverter, other.ListA.Clone());
      listA_.SetContext(Context, 5);
      mapA_ = new EventMapField<int, string>(mapAMapConverter, other.mapA_.Clone());
      mapA_.SetContext(Context, 6);
      switch (other.OneofACase) {
        case OneofAOneofCase.FloatA:
          FloatA = other.FloatA;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage1 Clone() {
      return new UpgradeMessage1(this);
    }

    public static bool IsEventSourced = true;

    protected override UpgradeMessage1 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      listA_.SetContext(Context, 5);
      mapA_.SetContext(Context, 6);
    }
    /// <summary>Field number for the "long_a" field.</summary>
    public const int LongAFieldNumber = 1;
    private long longA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongA {
      get { return longA_; }
      set {
        #if !DISABLE_EVENTS
        if(longA_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longA_ = value;
      }
    }

    /// <summary>Field number for the "str_a" field.</summary>
    public const int StrAFieldNumber = 2;
    private string strA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrA {
      get { return strA_; }
      set {
        #if !DISABLE_EVENTS
        if(strA_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        strA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enum_a" field.</summary>
    public const int EnumAFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.Enum1 enumA_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.Enum1 EnumA {
      get { return enumA_; }
      set {
        #if !DISABLE_EVENTS
        if(enumA_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumA_ = value;
      }
    }

    /// <summary>Field number for the "nested_a" field.</summary>
    public const int NestedAFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.NestedMessage1 nestedA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NestedMessage1 NestedA {
      get { return nestedA_; }
      set {
        if(nestedA_ != null) nestedA_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 4));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(nestedA_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        nestedA_ = value;
      }
    }

    /// <summary>Field number for the "list_a" field.</summary>
    public const int ListAFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_listA_codec
        = pb::FieldCodec.ForInt32(42);
    public class ListADataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static ListADataConverter listADataConverter = new ListADataConverter();
    private readonly EventRepeatedField<int> listA_ = new EventRepeatedField<int>(listADataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> ListA {
      get { return listA_; }
    }

    /// <summary>Field number for the "map_a" field.</summary>
    public const int MapAFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_mapA_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    internal class MapAMapConverter : EventMapConverter<int, string> {
      public override ByteString GetKeyValue(int key, string value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, string> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapA = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, string>(realKeymapA, default(string));
        }
        else {
          var realValuemapA = dataStream.ReadString();
          return new KeyValuePair<int, string>(realKeymapA, realValuemapA);
        }
      }
    }
    private static readonly EventMapConverter<int, string> mapAMapConverter = new MapAMapConverter();
    private readonly EventMapField<int, string> mapA_ = new EventMapField<int, string>(mapAMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> MapA {
      get { return mapA_; }
    }

    /// <summary>Field number for the "float_a" field.</summary>
    public const int FloatAFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatA {
      get { return oneofACase_ == OneofAOneofCase.FloatA ? (float) oneofA_ : 0F; }
      set {
        #if !DISABLE_EVENTS
        if(oneofACase_ != OneofAOneofCase.FloatA || value != (float) oneofA_) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        oneofA_ = value;
        oneofACase_ = OneofAOneofCase.FloatA;
      }
    }

    private object oneofA_;
    /// <summary>Enum of possible cases for the "oneof_a" oneof.</summary>
    public enum OneofAOneofCase {
      None = 0,
      FloatA = 7,
    }
    private OneofAOneofCase oneofACase_ = OneofAOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofAOneofCase OneofACase {
      get { return oneofACase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofA() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeMessage1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeMessage1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongA != other.LongA) return false;
      if (StrA != other.StrA) return false;
      if (EnumA != other.EnumA) return false;
      if (!object.Equals(NestedA, other.NestedA)) return false;
      if(!listA_.Equals(other.listA_)) return false;
      if (!mapA_.Equals(other.mapA_)) return false;
      if (FloatA != other.FloatA) return false;
      if (OneofACase != other.OneofACase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongA != 0L) hash ^= LongA.GetHashCode();
      if (StrA.Length != 0) hash ^= StrA.GetHashCode();
      if (EnumA != 0) hash ^= EnumA.GetHashCode();
      if (nestedA_ != null) hash ^= NestedA.GetHashCode();
      hash ^= listA_.GetHashCode();
      hash ^= mapA_.GetHashCode();
      if (oneofACase_ == OneofAOneofCase.FloatA) hash ^= FloatA.GetHashCode();
      hash ^= (int) oneofACase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongA != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LongA);
      }
      if (StrA.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StrA);
      }
      if (EnumA != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumA);
      }
      if (nestedA_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NestedA);
      }
      listA_.WriteTo(output, _repeated_listA_codec);
      mapA_.WriteTo(output, _map_mapA_codec);
      if (oneofACase_ == OneofAOneofCase.FloatA) {
        output.WriteRawTag(61);
        output.WriteFloat(FloatA);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongA);
      }
      if (StrA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrA);
      }
      if (EnumA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumA);
      }
      if (nestedA_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NestedA);
      }
      size += listA_.CalculateSize(_repeated_listA_codec);
      size += mapA_.CalculateSize(_map_mapA_codec);
      if (oneofACase_ == OneofAOneofCase.FloatA) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeMessage1 other) {
      if (other == null) {
        return;
      }
      if (other.LongA != 0L) {
        LongA = other.LongA;
      }
      if (other.StrA.Length != 0) {
        StrA = other.StrA;
      }
      if (other.EnumA != 0) {
        EnumA = other.EnumA;
      }
      if (other.nestedA_ != null) {
        if (nestedA_ == null) {
          nestedA_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
          nestedA_.SetParent(Context, new EventPath(Context.Path, 4));
        }
        NestedA.MergeFrom(other.NestedA);
      }
      listA_.Add(other.listA_);
      mapA_.Add(other.mapA_);
      switch (other.OneofACase) {
        case OneofAOneofCase.FloatA:
          FloatA = other.FloatA;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LongA = input.ReadInt64();
            break;
          }
          case 18: {
            StrA = input.ReadString();
            break;
          }
          case 24: {
            enumA_ = (global::Com.Zynga.Runtime.Protobuf.Enum1) input.ReadEnum();
            break;
          }
          case 34: {
            if (nestedA_ == null) {
              nestedA_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
              nestedA_.SetParent(Context, new EventPath(Context.Path, 4));
            }
            input.ReadMessage(nestedA_);
            break;
          }
          case 42:
          case 40: {
            listA_.AddEntriesFrom(input, _repeated_listA_codec);
            break;
          }
          case 50: {
            mapA_.AddEntriesFrom(input, _map_mapA_codec);
            break;
          }
          case 61: {
            FloatA = input.ReadFloat();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            longA_ = e.Set.I64;
          }
          break;
          case 2: {
            strA_ = e.Set.StringData;
          }
          break;
          case 3: {
            enumA_ = (global::Com.Zynga.Runtime.Protobuf.Enum1)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (nestedA_ == null) {
                nestedA_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
                nestedA_.SetParent(Context, new EventPath(Context.Path, 4));
              }
              (nestedA_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              nestedA_  = global::Com.Zynga.Runtime.Protobuf.NestedMessage1.Parser.ParseFrom(e.Set.ByteData);
              nestedA_.SetParent(Context, new EventPath(Context.Path, 4));
            }
          }
          break;
          case 5: {
            listA_.ApplyEvent(e.ListEvent);
          }
          break;
          case 6: {
            mapA_.ApplyEvent(e.MapEvent);
          }
          break;
          case 7: {
            oneofA_ = e.Set.R32;
            oneofACase_ = OneofAOneofCase.FloatA;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// just re-name fields
  /// </summary>
  public sealed partial class UpgradeMessage2 : zpr::EventRegistry<UpgradeMessage2>, pb::IMessage<UpgradeMessage2> {
    private static readonly pb::MessageParser<UpgradeMessage2> _parser = new pb::MessageParser<UpgradeMessage2>(() => new UpgradeMessage2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeMessage2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage2() {
      OnConstruction();
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage2(UpgradeMessage2 other) : this() {
      longB_ = other.longB_;
      strB_ = other.strB_;
      enumB_ = other.enumB_;
      nestedB_ = other.nestedB_ != null ? other.NestedB.Clone() : null;
      listB_ = new EventRepeatedField<int>(listBDataConverter, other.ListB.Clone());
      listB_.SetContext(Context, 5);
      mapB_ = new EventMapField<int, string>(mapBMapConverter, other.mapB_.Clone());
      mapB_.SetContext(Context, 6);
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatB:
          FloatB = other.FloatB;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage2 Clone() {
      return new UpgradeMessage2(this);
    }

    public static bool IsEventSourced = true;

    protected override UpgradeMessage2 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }
    /// <summary>Field number for the "long_b" field.</summary>
    public const int LongBFieldNumber = 1;
    private long longB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongB {
      get { return longB_; }
      set {
        #if !DISABLE_EVENTS
        if(longB_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longB_ = value;
      }
    }

    /// <summary>Field number for the "str_b" field.</summary>
    public const int StrBFieldNumber = 2;
    private string strB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrB {
      get { return strB_; }
      set {
        #if !DISABLE_EVENTS
        if(strB_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        strB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enum_b" field.</summary>
    public const int EnumBFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.Enum1 enumB_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.Enum1 EnumB {
      get { return enumB_; }
      set {
        #if !DISABLE_EVENTS
        if(enumB_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumB_ = value;
      }
    }

    /// <summary>Field number for the "nested_b" field.</summary>
    public const int NestedBFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.NestedMessage1 nestedB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NestedMessage1 NestedB {
      get { return nestedB_; }
      set {
        if(nestedB_ != null) nestedB_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 4));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(nestedB_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        nestedB_ = value;
      }
    }

    /// <summary>Field number for the "list_b" field.</summary>
    public const int ListBFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_listB_codec
        = pb::FieldCodec.ForInt32(42);
    public class ListBDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static ListBDataConverter listBDataConverter = new ListBDataConverter();
    private readonly EventRepeatedField<int> listB_ = new EventRepeatedField<int>(listBDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> ListB {
      get { return listB_; }
    }

    /// <summary>Field number for the "map_b" field.</summary>
    public const int MapBFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_mapB_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    internal class MapBMapConverter : EventMapConverter<int, string> {
      public override ByteString GetKeyValue(int key, string value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, string> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapB = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, string>(realKeymapB, default(string));
        }
        else {
          var realValuemapB = dataStream.ReadString();
          return new KeyValuePair<int, string>(realKeymapB, realValuemapB);
        }
      }
    }
    private static readonly EventMapConverter<int, string> mapBMapConverter = new MapBMapConverter();
    private readonly EventMapField<int, string> mapB_ = new EventMapField<int, string>(mapBMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> MapB {
      get { return mapB_; }
    }

    /// <summary>Field number for the "float_b" field.</summary>
    public const int FloatBFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatB {
      get { return oneofBCase_ == OneofBOneofCase.FloatB ? (float) oneofB_ : 0F; }
      set {
        #if !DISABLE_EVENTS
        if(oneofBCase_ != OneofBOneofCase.FloatB || value != (float) oneofB_) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        oneofB_ = value;
        oneofBCase_ = OneofBOneofCase.FloatB;
      }
    }

    private object oneofB_;
    /// <summary>Enum of possible cases for the "oneof_b" oneof.</summary>
    public enum OneofBOneofCase {
      None = 0,
      FloatB = 7,
    }
    private OneofBOneofCase oneofBCase_ = OneofBOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofBOneofCase OneofBCase {
      get { return oneofBCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofB() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeMessage2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeMessage2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongB != other.LongB) return false;
      if (StrB != other.StrB) return false;
      if (EnumB != other.EnumB) return false;
      if (!object.Equals(NestedB, other.NestedB)) return false;
      if(!listB_.Equals(other.listB_)) return false;
      if (!mapB_.Equals(other.mapB_)) return false;
      if (FloatB != other.FloatB) return false;
      if (OneofBCase != other.OneofBCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongB != 0L) hash ^= LongB.GetHashCode();
      if (StrB.Length != 0) hash ^= StrB.GetHashCode();
      if (EnumB != 0) hash ^= EnumB.GetHashCode();
      if (nestedB_ != null) hash ^= NestedB.GetHashCode();
      hash ^= listB_.GetHashCode();
      hash ^= mapB_.GetHashCode();
      if (oneofBCase_ == OneofBOneofCase.FloatB) hash ^= FloatB.GetHashCode();
      hash ^= (int) oneofBCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongB != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LongB);
      }
      if (StrB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StrB);
      }
      if (EnumB != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumB);
      }
      if (nestedB_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NestedB);
      }
      listB_.WriteTo(output, _repeated_listB_codec);
      mapB_.WriteTo(output, _map_mapB_codec);
      if (oneofBCase_ == OneofBOneofCase.FloatB) {
        output.WriteRawTag(61);
        output.WriteFloat(FloatB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongB);
      }
      if (StrB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrB);
      }
      if (EnumB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumB);
      }
      if (nestedB_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NestedB);
      }
      size += listB_.CalculateSize(_repeated_listB_codec);
      size += mapB_.CalculateSize(_map_mapB_codec);
      if (oneofBCase_ == OneofBOneofCase.FloatB) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeMessage2 other) {
      if (other == null) {
        return;
      }
      if (other.LongB != 0L) {
        LongB = other.LongB;
      }
      if (other.StrB.Length != 0) {
        StrB = other.StrB;
      }
      if (other.EnumB != 0) {
        EnumB = other.EnumB;
      }
      if (other.nestedB_ != null) {
        if (nestedB_ == null) {
          nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
          nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
        }
        NestedB.MergeFrom(other.NestedB);
      }
      listB_.Add(other.listB_);
      mapB_.Add(other.mapB_);
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatB:
          FloatB = other.FloatB;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LongB = input.ReadInt64();
            break;
          }
          case 18: {
            StrB = input.ReadString();
            break;
          }
          case 24: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum1) input.ReadEnum();
            break;
          }
          case 34: {
            if (nestedB_ == null) {
              nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
            input.ReadMessage(nestedB_);
            break;
          }
          case 42:
          case 40: {
            listB_.AddEntriesFrom(input, _repeated_listB_codec);
            break;
          }
          case 50: {
            mapB_.AddEntriesFrom(input, _map_mapB_codec);
            break;
          }
          case 61: {
            FloatB = input.ReadFloat();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            longB_ = e.Set.I64;
          }
          break;
          case 2: {
            strB_ = e.Set.StringData;
          }
          break;
          case 3: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum1)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (nestedB_ == null) {
                nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage1();
                nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
              }
              (nestedB_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              nestedB_  = global::Com.Zynga.Runtime.Protobuf.NestedMessage1.Parser.ParseFrom(e.Set.ByteData);
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
          }
          break;
          case 5: {
            listB_.ApplyEvent(e.ListEvent);
          }
          break;
          case 6: {
            mapB_.ApplyEvent(e.MapEvent);
          }
          break;
          case 7: {
            oneofB_ = e.Set.R32;
            oneofBCase_ = OneofBOneofCase.FloatB;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// add a few fields
  /// </summary>
  public sealed partial class UpgradeMessage3 : zpr::EventRegistry<UpgradeMessage3>, pb::IMessage<UpgradeMessage3> {
    private static readonly pb::MessageParser<UpgradeMessage3> _parser = new pb::MessageParser<UpgradeMessage3>(() => new UpgradeMessage3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeMessage3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage3() {
      OnConstruction();
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage3(UpgradeMessage3 other) : this() {
      longB_ = other.longB_;
      strB_ = other.strB_;
      enumB_ = other.enumB_;
      nestedB_ = other.nestedB_ != null ? other.NestedB.Clone() : null;
      listB_ = new EventRepeatedField<int>(listBDataConverter, other.ListB.Clone());
      listB_.SetContext(Context, 5);
      mapB_ = new EventMapField<int, string>(mapBMapConverter, other.mapB_.Clone());
      mapB_.SetContext(Context, 6);
      longC_ = other.longC_;
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatB:
          FloatB = other.FloatB;
          break;
        case OneofBOneofCase.FloatC:
          FloatC = other.FloatC;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage3 Clone() {
      return new UpgradeMessage3(this);
    }

    public static bool IsEventSourced = true;

    protected override UpgradeMessage3 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }
    /// <summary>Field number for the "long_b" field.</summary>
    public const int LongBFieldNumber = 1;
    private long longB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongB {
      get { return longB_; }
      set {
        #if !DISABLE_EVENTS
        if(longB_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longB_ = value;
      }
    }

    /// <summary>Field number for the "str_b" field.</summary>
    public const int StrBFieldNumber = 2;
    private string strB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrB {
      get { return strB_; }
      set {
        #if !DISABLE_EVENTS
        if(strB_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        strB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enum_b" field.</summary>
    public const int EnumBFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.Enum2 enumB_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.Enum2 EnumB {
      get { return enumB_; }
      set {
        #if !DISABLE_EVENTS
        if(enumB_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumB_ = value;
      }
    }

    /// <summary>Field number for the "nested_b" field.</summary>
    public const int NestedBFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.NestedMessage2 nestedB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NestedMessage2 NestedB {
      get { return nestedB_; }
      set {
        if(nestedB_ != null) nestedB_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 4));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(nestedB_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        nestedB_ = value;
      }
    }

    /// <summary>Field number for the "list_b" field.</summary>
    public const int ListBFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_listB_codec
        = pb::FieldCodec.ForInt32(42);
    public class ListBDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static ListBDataConverter listBDataConverter = new ListBDataConverter();
    private readonly EventRepeatedField<int> listB_ = new EventRepeatedField<int>(listBDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> ListB {
      get { return listB_; }
    }

    /// <summary>Field number for the "map_b" field.</summary>
    public const int MapBFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_mapB_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    internal class MapBMapConverter : EventMapConverter<int, string> {
      public override ByteString GetKeyValue(int key, string value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, string> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapB = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, string>(realKeymapB, default(string));
        }
        else {
          var realValuemapB = dataStream.ReadString();
          return new KeyValuePair<int, string>(realKeymapB, realValuemapB);
        }
      }
    }
    private static readonly EventMapConverter<int, string> mapBMapConverter = new MapBMapConverter();
    private readonly EventMapField<int, string> mapB_ = new EventMapField<int, string>(mapBMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> MapB {
      get { return mapB_; }
    }

    /// <summary>Field number for the "long_c" field.</summary>
    public const int LongCFieldNumber = 8;
    private long longC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongC {
      get { return longC_; }
      set {
        #if !DISABLE_EVENTS
        if(longC_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longC_ = value;
      }
    }

    /// <summary>Field number for the "float_b" field.</summary>
    public const int FloatBFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatB {
      get { return oneofBCase_ == OneofBOneofCase.FloatB ? (float) oneofB_ : 0F; }
      set {
        #if !DISABLE_EVENTS
        if(oneofBCase_ != OneofBOneofCase.FloatB || value != (float) oneofB_) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        oneofB_ = value;
        oneofBCase_ = OneofBOneofCase.FloatB;
      }
    }

    /// <summary>Field number for the "float_c" field.</summary>
    public const int FloatCFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatC {
      get { return oneofBCase_ == OneofBOneofCase.FloatC ? (float) oneofB_ : 0F; }
      set {
        #if !DISABLE_EVENTS
        if(oneofBCase_ != OneofBOneofCase.FloatC || value != (float) oneofB_) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        oneofB_ = value;
        oneofBCase_ = OneofBOneofCase.FloatC;
      }
    }

    private object oneofB_;
    /// <summary>Enum of possible cases for the "oneof_b" oneof.</summary>
    public enum OneofBOneofCase {
      None = 0,
      FloatB = 7,
      FloatC = 9,
    }
    private OneofBOneofCase oneofBCase_ = OneofBOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofBOneofCase OneofBCase {
      get { return oneofBCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofB() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeMessage3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeMessage3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongB != other.LongB) return false;
      if (StrB != other.StrB) return false;
      if (EnumB != other.EnumB) return false;
      if (!object.Equals(NestedB, other.NestedB)) return false;
      if(!listB_.Equals(other.listB_)) return false;
      if (!mapB_.Equals(other.mapB_)) return false;
      if (LongC != other.LongC) return false;
      if (FloatB != other.FloatB) return false;
      if (FloatC != other.FloatC) return false;
      if (OneofBCase != other.OneofBCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongB != 0L) hash ^= LongB.GetHashCode();
      if (StrB.Length != 0) hash ^= StrB.GetHashCode();
      if (EnumB != 0) hash ^= EnumB.GetHashCode();
      if (nestedB_ != null) hash ^= NestedB.GetHashCode();
      hash ^= listB_.GetHashCode();
      hash ^= mapB_.GetHashCode();
      if (LongC != 0L) hash ^= LongC.GetHashCode();
      if (oneofBCase_ == OneofBOneofCase.FloatB) hash ^= FloatB.GetHashCode();
      if (oneofBCase_ == OneofBOneofCase.FloatC) hash ^= FloatC.GetHashCode();
      hash ^= (int) oneofBCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongB != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LongB);
      }
      if (StrB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StrB);
      }
      if (EnumB != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumB);
      }
      if (nestedB_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NestedB);
      }
      listB_.WriteTo(output, _repeated_listB_codec);
      mapB_.WriteTo(output, _map_mapB_codec);
      if (oneofBCase_ == OneofBOneofCase.FloatB) {
        output.WriteRawTag(61);
        output.WriteFloat(FloatB);
      }
      if (LongC != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LongC);
      }
      if (oneofBCase_ == OneofBOneofCase.FloatC) {
        output.WriteRawTag(77);
        output.WriteFloat(FloatC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongB);
      }
      if (StrB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrB);
      }
      if (EnumB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumB);
      }
      if (nestedB_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NestedB);
      }
      size += listB_.CalculateSize(_repeated_listB_codec);
      size += mapB_.CalculateSize(_map_mapB_codec);
      if (LongC != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongC);
      }
      if (oneofBCase_ == OneofBOneofCase.FloatB) {
        size += 1 + 4;
      }
      if (oneofBCase_ == OneofBOneofCase.FloatC) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeMessage3 other) {
      if (other == null) {
        return;
      }
      if (other.LongB != 0L) {
        LongB = other.LongB;
      }
      if (other.StrB.Length != 0) {
        StrB = other.StrB;
      }
      if (other.EnumB != 0) {
        EnumB = other.EnumB;
      }
      if (other.nestedB_ != null) {
        if (nestedB_ == null) {
          nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
          nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
        }
        NestedB.MergeFrom(other.NestedB);
      }
      listB_.Add(other.listB_);
      mapB_.Add(other.mapB_);
      if (other.LongC != 0L) {
        LongC = other.LongC;
      }
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatB:
          FloatB = other.FloatB;
          break;
        case OneofBOneofCase.FloatC:
          FloatC = other.FloatC;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LongB = input.ReadInt64();
            break;
          }
          case 18: {
            StrB = input.ReadString();
            break;
          }
          case 24: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum2) input.ReadEnum();
            break;
          }
          case 34: {
            if (nestedB_ == null) {
              nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
            input.ReadMessage(nestedB_);
            break;
          }
          case 42:
          case 40: {
            listB_.AddEntriesFrom(input, _repeated_listB_codec);
            break;
          }
          case 50: {
            mapB_.AddEntriesFrom(input, _map_mapB_codec);
            break;
          }
          case 61: {
            FloatB = input.ReadFloat();
            break;
          }
          case 64: {
            LongC = input.ReadInt64();
            break;
          }
          case 77: {
            FloatC = input.ReadFloat();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            longB_ = e.Set.I64;
          }
          break;
          case 2: {
            strB_ = e.Set.StringData;
          }
          break;
          case 3: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum2)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (nestedB_ == null) {
                nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
                nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
              }
              (nestedB_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              nestedB_  = global::Com.Zynga.Runtime.Protobuf.NestedMessage2.Parser.ParseFrom(e.Set.ByteData);
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
          }
          break;
          case 5: {
            listB_.ApplyEvent(e.ListEvent);
          }
          break;
          case 6: {
            mapB_.ApplyEvent(e.MapEvent);
          }
          break;
          case 8: {
            longC_ = e.Set.I64;
          }
          break;
          case 7: {
            oneofB_ = e.Set.R32;
            oneofBCase_ = OneofBOneofCase.FloatB;
          }
          break;
          case 9: {
            oneofB_ = e.Set.R32;
            oneofBCase_ = OneofBOneofCase.FloatC;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// remove a few fields
  /// </summary>
  public sealed partial class UpgradeMessage4 : zpr::EventRegistry<UpgradeMessage4>, pb::IMessage<UpgradeMessage4> {
    private static readonly pb::MessageParser<UpgradeMessage4> _parser = new pb::MessageParser<UpgradeMessage4>(() => new UpgradeMessage4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeMessage4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.UpgradeTestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage4() {
      OnConstruction();
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage4(UpgradeMessage4 other) : this() {
      longB_ = other.longB_;
      enumB_ = other.enumB_;
      nestedB_ = other.nestedB_ != null ? other.NestedB.Clone() : null;
      listB_ = new EventRepeatedField<int>(listBDataConverter, other.ListB.Clone());
      listB_.SetContext(Context, 5);
      mapB_ = new EventMapField<int, string>(mapBMapConverter, other.mapB_.Clone());
      mapB_.SetContext(Context, 6);
      longC_ = other.longC_;
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatC:
          FloatC = other.FloatC;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeMessage4 Clone() {
      return new UpgradeMessage4(this);
    }

    public static bool IsEventSourced = true;

    protected override UpgradeMessage4 Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      listB_.SetContext(Context, 5);
      mapB_.SetContext(Context, 6);
    }
    /// <summary>Field number for the "long_b" field.</summary>
    public const int LongBFieldNumber = 1;
    private long longB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongB {
      get { return longB_; }
      set {
        #if !DISABLE_EVENTS
        if(longB_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longB_ = value;
      }
    }

    /// <summary>Field number for the "enum_b" field.</summary>
    public const int EnumBFieldNumber = 3;
    private global::Com.Zynga.Runtime.Protobuf.Enum2 enumB_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.Enum2 EnumB {
      get { return enumB_; }
      set {
        #if !DISABLE_EVENTS
        if(enumB_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumB_ = value;
      }
    }

    /// <summary>Field number for the "nested_b" field.</summary>
    public const int NestedBFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.NestedMessage2 nestedB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.NestedMessage2 NestedB {
      get { return nestedB_; }
      set {
        if(nestedB_ != null) nestedB_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 4));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(nestedB_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        nestedB_ = value;
      }
    }

    /// <summary>Field number for the "list_b" field.</summary>
    public const int ListBFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_listB_codec
        = pb::FieldCodec.ForInt32(42);
    public class ListBDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static ListBDataConverter listBDataConverter = new ListBDataConverter();
    private readonly EventRepeatedField<int> listB_ = new EventRepeatedField<int>(listBDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> ListB {
      get { return listB_; }
    }

    /// <summary>Field number for the "map_b" field.</summary>
    public const int MapBFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_mapB_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    internal class MapBMapConverter : EventMapConverter<int, string> {
      public override ByteString GetKeyValue(int key, string value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, string> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapB = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, string>(realKeymapB, default(string));
        }
        else {
          var realValuemapB = dataStream.ReadString();
          return new KeyValuePair<int, string>(realKeymapB, realValuemapB);
        }
      }
    }
    private static readonly EventMapConverter<int, string> mapBMapConverter = new MapBMapConverter();
    private readonly EventMapField<int, string> mapB_ = new EventMapField<int, string>(mapBMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> MapB {
      get { return mapB_; }
    }

    /// <summary>Field number for the "long_c" field.</summary>
    public const int LongCFieldNumber = 8;
    private long longC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongC {
      get { return longC_; }
      set {
        #if !DISABLE_EVENTS
        if(longC_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        longC_ = value;
      }
    }

    /// <summary>Field number for the "float_c" field.</summary>
    public const int FloatCFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatC {
      get { return oneofBCase_ == OneofBOneofCase.FloatC ? (float) oneofB_ : 0F; }
      set {
        #if !DISABLE_EVENTS
        if(oneofBCase_ != OneofBOneofCase.FloatC || value != (float) oneofB_) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        oneofB_ = value;
        oneofBCase_ = OneofBOneofCase.FloatC;
      }
    }

    private object oneofB_;
    /// <summary>Enum of possible cases for the "oneof_b" oneof.</summary>
    public enum OneofBOneofCase {
      None = 0,
      FloatC = 9,
    }
    private OneofBOneofCase oneofBCase_ = OneofBOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofBOneofCase OneofBCase {
      get { return oneofBCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofB() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeMessage4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeMessage4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongB != other.LongB) return false;
      if (EnumB != other.EnumB) return false;
      if (!object.Equals(NestedB, other.NestedB)) return false;
      if(!listB_.Equals(other.listB_)) return false;
      if (!mapB_.Equals(other.mapB_)) return false;
      if (LongC != other.LongC) return false;
      if (FloatC != other.FloatC) return false;
      if (OneofBCase != other.OneofBCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongB != 0L) hash ^= LongB.GetHashCode();
      if (EnumB != 0) hash ^= EnumB.GetHashCode();
      if (nestedB_ != null) hash ^= NestedB.GetHashCode();
      hash ^= listB_.GetHashCode();
      hash ^= mapB_.GetHashCode();
      if (LongC != 0L) hash ^= LongC.GetHashCode();
      if (oneofBCase_ == OneofBOneofCase.FloatC) hash ^= FloatC.GetHashCode();
      hash ^= (int) oneofBCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongB != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LongB);
      }
      if (EnumB != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumB);
      }
      if (nestedB_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NestedB);
      }
      listB_.WriteTo(output, _repeated_listB_codec);
      mapB_.WriteTo(output, _map_mapB_codec);
      if (LongC != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LongC);
      }
      if (oneofBCase_ == OneofBOneofCase.FloatC) {
        output.WriteRawTag(77);
        output.WriteFloat(FloatC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongB);
      }
      if (EnumB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumB);
      }
      if (nestedB_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NestedB);
      }
      size += listB_.CalculateSize(_repeated_listB_codec);
      size += mapB_.CalculateSize(_map_mapB_codec);
      if (LongC != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongC);
      }
      if (oneofBCase_ == OneofBOneofCase.FloatC) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeMessage4 other) {
      if (other == null) {
        return;
      }
      if (other.LongB != 0L) {
        LongB = other.LongB;
      }
      if (other.EnumB != 0) {
        EnumB = other.EnumB;
      }
      if (other.nestedB_ != null) {
        if (nestedB_ == null) {
          nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
          nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
        }
        NestedB.MergeFrom(other.NestedB);
      }
      listB_.Add(other.listB_);
      mapB_.Add(other.mapB_);
      if (other.LongC != 0L) {
        LongC = other.LongC;
      }
      switch (other.OneofBCase) {
        case OneofBOneofCase.FloatC:
          FloatC = other.FloatC;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LongB = input.ReadInt64();
            break;
          }
          case 24: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum2) input.ReadEnum();
            break;
          }
          case 34: {
            if (nestedB_ == null) {
              nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
            input.ReadMessage(nestedB_);
            break;
          }
          case 42:
          case 40: {
            listB_.AddEntriesFrom(input, _repeated_listB_codec);
            break;
          }
          case 50: {
            mapB_.AddEntriesFrom(input, _map_mapB_codec);
            break;
          }
          case 64: {
            LongC = input.ReadInt64();
            break;
          }
          case 77: {
            FloatC = input.ReadFloat();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            longB_ = e.Set.I64;
          }
          break;
          case 3: {
            enumB_ = (global::Com.Zynga.Runtime.Protobuf.Enum2)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (nestedB_ == null) {
                nestedB_ = new global::Com.Zynga.Runtime.Protobuf.NestedMessage2();
                nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
              }
              (nestedB_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              nestedB_  = global::Com.Zynga.Runtime.Protobuf.NestedMessage2.Parser.ParseFrom(e.Set.ByteData);
              nestedB_.SetParent(Context, new EventPath(Context.Path, 4));
            }
          }
          break;
          case 5: {
            listB_.ApplyEvent(e.ListEvent);
          }
          break;
          case 6: {
            mapB_.ApplyEvent(e.MapEvent);
          }
          break;
          case 8: {
            longC_ = e.Set.I64;
          }
          break;
          case 9: {
            oneofB_ = e.Set.R32;
            oneofBCase_ = OneofBOneofCase.FloatC;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
