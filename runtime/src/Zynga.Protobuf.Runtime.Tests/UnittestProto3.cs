// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/unittest_proto3.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Google.Protobuf.TestProtos {

  /// <summary>Holder for reflection information generated from test/unittest_proto3.proto</summary>
  public static partial class UnittestProto3Reflection {

    #region Descriptor
    /// <summary>File descriptor for test/unittest_proto3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnittestProto3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chp0ZXN0L3VuaXR0ZXN0X3Byb3RvMy5wcm90bxIScHJvdG9idWZfdW5pdHRl",
            "c3QzGiF0ZXN0L3VuaXR0ZXN0X2ltcG9ydF9wcm90bzMucHJvdG8aEmV2ZW50",
            "X3BsdWdpbi5wcm90byLcOQoMVGVzdEFsbFR5cGVzEiEKDHNpbmdsZV9pbnQz",
            "MhgBIAEoBVILc2luZ2xlSW50MzISIQoMc2luZ2xlX2ludDY0GAIgASgDUgtz",
            "aW5nbGVJbnQ2NBIjCg1zaW5nbGVfdWludDMyGAMgASgNUgxzaW5nbGVVaW50",
            "MzISIwoNc2luZ2xlX3VpbnQ2NBgEIAEoBFIMc2luZ2xlVWludDY0EiMKDXNp",
            "bmdsZV9zaW50MzIYBSABKBFSDHNpbmdsZVNpbnQzMhIjCg1zaW5nbGVfc2lu",
            "dDY0GAYgASgSUgxzaW5nbGVTaW50NjQSJQoOc2luZ2xlX2ZpeGVkMzIYByAB",
            "KAdSDXNpbmdsZUZpeGVkMzISJQoOc2luZ2xlX2ZpeGVkNjQYCCABKAZSDXNp",
            "bmdsZUZpeGVkNjQSJwoPc2luZ2xlX3NmaXhlZDMyGAkgASgPUg5zaW5nbGVT",
            "Zml4ZWQzMhInCg9zaW5nbGVfc2ZpeGVkNjQYCiABKBBSDnNpbmdsZVNmaXhl",
            "ZDY0EiEKDHNpbmdsZV9mbG9hdBgLIAEoAlILc2luZ2xlRmxvYXQSIwoNc2lu",
            "Z2xlX2RvdWJsZRgMIAEoAVIMc2luZ2xlRG91YmxlEh8KC3NpbmdsZV9ib29s",
            "GA0gASgIUgpzaW5nbGVCb29sEiMKDXNpbmdsZV9zdHJpbmcYDiABKAlSDHNp",
            "bmdsZVN0cmluZxIhCgxzaW5nbGVfYnl0ZXMYDyABKAxSC3NpbmdsZUJ5dGVz",
            "EmIKFXNpbmdsZV9uZXN0ZWRfbWVzc2FnZRgSIAEoCzIuLnByb3RvYnVmX3Vu",
            "aXR0ZXN0My5UZXN0QWxsVHlwZXMuTmVzdGVkTWVzc2FnZVITc2luZ2xlTmVz",
            "dGVkTWVzc2FnZRJYChZzaW5nbGVfZm9yZWlnbl9tZXNzYWdlGBMgASgLMiIu",
            "cHJvdG9idWZfdW5pdHRlc3QzLkZvcmVpZ25NZXNzYWdlUhRzaW5nbGVGb3Jl",
            "aWduTWVzc2FnZRJbChVzaW5nbGVfaW1wb3J0X21lc3NhZ2UYFCABKAsyJy5w",
            "cm90b2J1Zl91bml0dGVzdF9pbXBvcnQuSW1wb3J0TWVzc2FnZVITc2luZ2xl",
            "SW1wb3J0TWVzc2FnZRJZChJzaW5nbGVfbmVzdGVkX2VudW0YFSABKA4yKy5w",
            "cm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzLk5lc3RlZEVudW1SEHNp",
            "bmdsZU5lc3RlZEVudW0STwoTc2luZ2xlX2ZvcmVpZ25fZW51bRgWIAEoDjIf",
            "LnByb3RvYnVmX3VuaXR0ZXN0My5Gb3JlaWduRW51bVIRc2luZ2xlRm9yZWln",
            "bkVudW0SUgoSc2luZ2xlX2ltcG9ydF9lbnVtGBcgASgOMiQucHJvdG9idWZf",
            "dW5pdHRlc3RfaW1wb3J0LkltcG9ydEVudW1SEHNpbmdsZUltcG9ydEVudW0S",
            "bgocc2luZ2xlX3B1YmxpY19pbXBvcnRfbWVzc2FnZRgaIAEoCzItLnByb3Rv",
            "YnVmX3VuaXR0ZXN0X2ltcG9ydC5QdWJsaWNJbXBvcnRNZXNzYWdlUhlzaW5n",
            "bGVQdWJsaWNJbXBvcnRNZXNzYWdlEiUKDnJlcGVhdGVkX2ludDMyGB8gAygF",
            "Ug1yZXBlYXRlZEludDMyEiUKDnJlcGVhdGVkX2ludDY0GCAgAygDUg1yZXBl",
            "YXRlZEludDY0EicKD3JlcGVhdGVkX3VpbnQzMhghIAMoDVIOcmVwZWF0ZWRV",
            "aW50MzISJwoPcmVwZWF0ZWRfdWludDY0GCIgAygEUg5yZXBlYXRlZFVpbnQ2",
            "NBInCg9yZXBlYXRlZF9zaW50MzIYIyADKBFSDnJlcGVhdGVkU2ludDMyEicK",
            "D3JlcGVhdGVkX3NpbnQ2NBgkIAMoElIOcmVwZWF0ZWRTaW50NjQSKQoQcmVw",
            "ZWF0ZWRfZml4ZWQzMhglIAMoB1IPcmVwZWF0ZWRGaXhlZDMyEikKEHJlcGVh",
            "dGVkX2ZpeGVkNjQYJiADKAZSD3JlcGVhdGVkRml4ZWQ2NBIrChFyZXBlYXRl",
            "ZF9zZml4ZWQzMhgnIAMoD1IQcmVwZWF0ZWRTZml4ZWQzMhIrChFyZXBlYXRl",
            "ZF9zZml4ZWQ2NBgoIAMoEFIQcmVwZWF0ZWRTZml4ZWQ2NBIlCg5yZXBlYXRl",
            "ZF9mbG9hdBgpIAMoAlINcmVwZWF0ZWRGbG9hdBInCg9yZXBlYXRlZF9kb3Vi",
            "bGUYKiADKAFSDnJlcGVhdGVkRG91YmxlEiMKDXJlcGVhdGVkX2Jvb2wYKyAD",
            "KAhSDHJlcGVhdGVkQm9vbBInCg9yZXBlYXRlZF9zdHJpbmcYLCADKAlSDnJl",
            "cGVhdGVkU3RyaW5nEiUKDnJlcGVhdGVkX2J5dGVzGC0gAygMUg1yZXBlYXRl",
            "ZEJ5dGVzEmYKF3JlcGVhdGVkX25lc3RlZF9tZXNzYWdlGDAgAygLMi4ucHJv",
            "dG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlcy5OZXN0ZWRNZXNzYWdlUhVy",
            "ZXBlYXRlZE5lc3RlZE1lc3NhZ2USXAoYcmVwZWF0ZWRfZm9yZWlnbl9tZXNz",
            "YWdlGDEgAygLMiIucHJvdG9idWZfdW5pdHRlc3QzLkZvcmVpZ25NZXNzYWdl",
            "UhZyZXBlYXRlZEZvcmVpZ25NZXNzYWdlEl8KF3JlcGVhdGVkX2ltcG9ydF9t",
            "ZXNzYWdlGDIgAygLMicucHJvdG9idWZfdW5pdHRlc3RfaW1wb3J0LkltcG9y",
            "dE1lc3NhZ2VSFXJlcGVhdGVkSW1wb3J0TWVzc2FnZRJqChlyZXBlYXRlZF9p",
            "bXBvcnRfbm9fZXZlbnRzGDcgAygLMi8ucHJvdG9idWZfdW5pdHRlc3RfaW1w",
            "b3J0LkltcG9ydE1lc3NhZ2VOb0V2ZW50c1IWcmVwZWF0ZWRJbXBvcnROb0V2",
            "ZW50cxJmCh9yZXBlYXRlZF90ZXN0X2FsbF90eXBlc19tZXNzYWdlGDggAygL",
            "MiAucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IbcmVwZWF0ZWRU",
            "ZXN0QWxsVHlwZXNNZXNzYWdlEoABCilyZXBlYXRlZF90ZXN0X2FsbF90eXBl",
            "c19ub19ldmVudHNfbWVzc2FnZRg5IAMoCzIoLnByb3RvYnVmX3VuaXR0ZXN0",
            "My5UZXN0QWxsVHlwZXNOb0V2ZW50c1IjcmVwZWF0ZWRUZXN0QWxsVHlwZXNO",
            "b0V2ZW50c01lc3NhZ2USXQoUcmVwZWF0ZWRfbmVzdGVkX2VudW0YMyADKA4y",
            "Ky5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzLk5lc3RlZEVudW1S",
            "EnJlcGVhdGVkTmVzdGVkRW51bRJTChVyZXBlYXRlZF9mb3JlaWduX2VudW0Y",
            "NCADKA4yHy5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbkVudW1SE3JlcGVh",
            "dGVkRm9yZWlnbkVudW0SVgoUcmVwZWF0ZWRfaW1wb3J0X2VudW0YNSADKA4y",
            "JC5wcm90b2J1Zl91bml0dGVzdF9pbXBvcnQuSW1wb3J0RW51bVIScmVwZWF0",
            "ZWRJbXBvcnRFbnVtEiMKDG9uZW9mX3VpbnQzMhhvIAEoDUgAUgtvbmVvZlVp",
            "bnQzMhJiChRvbmVvZl9uZXN0ZWRfbWVzc2FnZRhwIAEoCzIuLnByb3RvYnVm",
            "X3VuaXR0ZXN0My5UZXN0QWxsVHlwZXMuTmVzdGVkTWVzc2FnZUgAUhJvbmVv",
            "Zk5lc3RlZE1lc3NhZ2USIwoMb25lb2Zfc3RyaW5nGHEgASgJSABSC29uZW9m",
            "U3RyaW5nEiEKC29uZW9mX2J5dGVzGHIgASgMSABSCm9uZW9mQnl0ZXMSWQoV",
            "b25lb2ZfZm9yZWlnbl9tZXNzYWdlGIkBIAEoCzIiLnByb3RvYnVmX3VuaXR0",
            "ZXN0My5Gb3JlaWduTWVzc2FnZUgAUhNvbmVvZkZvcmVpZ25NZXNzYWdlEnMK",
            "H29uZW9mX2ZvcmVpZ25fbWVzc2FnZV9ub19ldmVudHMYigEgASgLMioucHJv",
            "dG9idWZfdW5pdHRlc3QzLkZvcmVpZ25NZXNzYWdlTm9FdmVudHNIAFIbb25l",
            "b2ZGb3JlaWduTWVzc2FnZU5vRXZlbnRzEksKD29uZW9mX2FsbF90eXBlcxiL",
            "ASABKAsyIC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzSABSDW9u",
            "ZW9mQWxsVHlwZXMSZQoZb25lb2ZfYWxsX3R5cGVzX25vX2V2ZW50cxiMASAB",
            "KAsyKC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9FdmVudHNI",
            "AFIVb25lb2ZBbGxUeXBlc05vRXZlbnRzElsKD21hcF9pbnQzMl9pbnQzMhhz",
            "IAMoCzIzLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXMuTWFwSW50",
            "MzJJbnQzMkVudHJ5Ug1tYXBJbnQzMkludDMyElsKD21hcF9pbnQ2NF9pbnQ2",
            "NBh0IAMoCzIzLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXMuTWFw",
            "SW50NjRJbnQ2NEVudHJ5Ug1tYXBJbnQ2NEludDY0EmEKEW1hcF91aW50MzJf",
            "dWludDMyGHUgAygLMjUucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBl",
            "cy5NYXBVaW50MzJVaW50MzJFbnRyeVIPbWFwVWludDMyVWludDMyEmEKEW1h",
            "cF91aW50NjRfdWludDY0GHYgAygLMjUucHJvdG9idWZfdW5pdHRlc3QzLlRl",
            "c3RBbGxUeXBlcy5NYXBVaW50NjRVaW50NjRFbnRyeVIPbWFwVWludDY0VWlu",
            "dDY0EmEKEW1hcF9zaW50MzJfc2ludDMyGHcgAygLMjUucHJvdG9idWZfdW5p",
            "dHRlc3QzLlRlc3RBbGxUeXBlcy5NYXBTaW50MzJTaW50MzJFbnRyeVIPbWFw",
            "U2ludDMyU2ludDMyEmEKEW1hcF9zaW50NjRfc2ludDY0GHggAygLMjUucHJv",
            "dG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlcy5NYXBTaW50NjRTaW50NjRF",
            "bnRyeVIPbWFwU2ludDY0U2ludDY0EmcKE21hcF9maXhlZDMyX2ZpeGVkMzIY",
            "eSADKAsyNy5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzLk1hcEZp",
            "eGVkMzJGaXhlZDMyRW50cnlSEW1hcEZpeGVkMzJGaXhlZDMyEmcKE21hcF9m",
            "aXhlZDY0X2ZpeGVkNjQYeiADKAsyNy5wcm90b2J1Zl91bml0dGVzdDMuVGVz",
            "dEFsbFR5cGVzLk1hcEZpeGVkNjRGaXhlZDY0RW50cnlSEW1hcEZpeGVkNjRG",
            "aXhlZDY0Em0KFW1hcF9zZml4ZWQzMl9zZml4ZWQzMhh7IAMoCzI5LnByb3Rv",
            "YnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXMuTWFwU2ZpeGVkMzJTZml4ZWQz",
            "MkVudHJ5UhNtYXBTZml4ZWQzMlNmaXhlZDMyEm0KFW1hcF9zZml4ZWQ2NF9z",
            "Zml4ZWQ2NBh8IAMoCzI5LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlw",
            "ZXMuTWFwU2ZpeGVkNjRTZml4ZWQ2NEVudHJ5UhNtYXBTZml4ZWQ2NFNmaXhl",
            "ZDY0ElsKD21hcF9pbnQzMl9mbG9hdBh9IAMoCzIzLnByb3RvYnVmX3VuaXR0",
            "ZXN0My5UZXN0QWxsVHlwZXMuTWFwSW50MzJGbG9hdEVudHJ5Ug1tYXBJbnQz",
            "MkZsb2F0El4KEG1hcF9pbnQzMl9kb3VibGUYfiADKAsyNC5wcm90b2J1Zl91",
            "bml0dGVzdDMuVGVzdEFsbFR5cGVzLk1hcEludDMyRG91YmxlRW50cnlSDm1h",
            "cEludDMyRG91YmxlElUKDW1hcF9ib29sX2Jvb2wYfyADKAsyMS5wcm90b2J1",
            "Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzLk1hcEJvb2xCb29sRW50cnlSC21h",
            "cEJvb2xCb29sEmIKEW1hcF9zdHJpbmdfc3RyaW5nGIABIAMoCzI1LnByb3Rv",
            "YnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXMuTWFwU3RyaW5nU3RyaW5nRW50",
            "cnlSD21hcFN0cmluZ1N0cmluZxJcCg9tYXBfaW50MzJfYnl0ZXMYgQEgAygL",
            "MjMucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlcy5NYXBJbnQzMkJ5",
            "dGVzRW50cnlSDW1hcEludDMyQnl0ZXMSWQoObWFwX2ludDMyX2VudW0YggEg",
            "AygLMjIucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlcy5NYXBJbnQz",
            "MkVudW1FbnRyeVIMbWFwSW50MzJFbnVtEngKGW1hcF9pbnQzMl9mb3JlaWdu",
            "X21lc3NhZ2UYgwEgAygLMjwucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxU",
            "eXBlcy5NYXBJbnQzMkZvcmVpZ25NZXNzYWdlRW50cnlSFm1hcEludDMyRm9y",
            "ZWlnbk1lc3NhZ2USkgEKI21hcF9pbnQzMl9mb3JlaWduX25vX2V2ZW50c19t",
            "ZXNzYWdlGIQBIAMoCzJELnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlw",
            "ZXMuTWFwSW50MzJGb3JlaWduTm9FdmVudHNNZXNzYWdlRW50cnlSHm1hcElu",
            "dDMyRm9yZWlnbk5vRXZlbnRzTWVzc2FnZRKJAQogbWFwX2ludDMyX3Rlc3Rf",
            "YWxsX3R5cGVzX21lc3NhZ2UYhQEgAygLMkEucHJvdG9idWZfdW5pdHRlc3Qz",
            "LlRlc3RBbGxUeXBlcy5NYXBJbnQzMlRlc3RBbGxUeXBlc01lc3NhZ2VFbnRy",
            "eVIbbWFwSW50MzJUZXN0QWxsVHlwZXNNZXNzYWdlEqMBCiptYXBfaW50MzJf",
            "dGVzdF9hbGxfdHlwZXNfbm9fZXZlbnRzX21lc3NhZ2UYhgEgAygLMkkucHJv",
            "dG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlcy5NYXBJbnQzMlRlc3RBbGxU",
            "eXBlc05vRXZlbnRzTWVzc2FnZUVudHJ5UiNtYXBJbnQzMlRlc3RBbGxUeXBl",
            "c05vRXZlbnRzTWVzc2FnZRI+CglhbGxfdHlwZXMYhwEgASgLMiAucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IIYWxsVHlwZXMSWAoTYWxsX3R5",
            "cGVzX25vX2V2ZW50cxiIASABKAsyKC5wcm90b2J1Zl91bml0dGVzdDMuVGVz",
            "dEFsbFR5cGVzTm9FdmVudHNSEGFsbFR5cGVzTm9FdmVudHMaJQoNTmVzdGVk",
            "TWVzc2FnZRIOCgJiYhgBIAEoBVICYmI6BMi4HgEaQAoSTWFwSW50MzJJbnQz",
            "MkVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZhbHVlGAIgASgFUgV2YWx1",
            "ZToCOAEaQAoSTWFwSW50NjRJbnQ2NEVudHJ5EhAKA2tleRgBIAEoA1IDa2V5",
            "EhQKBXZhbHVlGAIgASgDUgV2YWx1ZToCOAEaQgoUTWFwVWludDMyVWludDMy",
            "RW50cnkSEAoDa2V5GAEgASgNUgNrZXkSFAoFdmFsdWUYAiABKA1SBXZhbHVl",
            "OgI4ARpCChRNYXBVaW50NjRVaW50NjRFbnRyeRIQCgNrZXkYASABKARSA2tl",
            "eRIUCgV2YWx1ZRgCIAEoBFIFdmFsdWU6AjgBGkIKFE1hcFNpbnQzMlNpbnQz",
            "MkVudHJ5EhAKA2tleRgBIAEoEVIDa2V5EhQKBXZhbHVlGAIgASgRUgV2YWx1",
            "ZToCOAEaQgoUTWFwU2ludDY0U2ludDY0RW50cnkSEAoDa2V5GAEgASgSUgNr",
            "ZXkSFAoFdmFsdWUYAiABKBJSBXZhbHVlOgI4ARpEChZNYXBGaXhlZDMyRml4",
            "ZWQzMkVudHJ5EhAKA2tleRgBIAEoB1IDa2V5EhQKBXZhbHVlGAIgASgHUgV2",
            "YWx1ZToCOAEaRAoWTWFwRml4ZWQ2NEZpeGVkNjRFbnRyeRIQCgNrZXkYASAB",
            "KAZSA2tleRIUCgV2YWx1ZRgCIAEoBlIFdmFsdWU6AjgBGkYKGE1hcFNmaXhl",
            "ZDMyU2ZpeGVkMzJFbnRyeRIQCgNrZXkYASABKA9SA2tleRIUCgV2YWx1ZRgC",
            "IAEoD1IFdmFsdWU6AjgBGkYKGE1hcFNmaXhlZDY0U2ZpeGVkNjRFbnRyeRIQ",
            "CgNrZXkYASABKBBSA2tleRIUCgV2YWx1ZRgCIAEoEFIFdmFsdWU6AjgBGkAK",
            "Ek1hcEludDMyRmxvYXRFbnRyeRIQCgNrZXkYASABKAVSA2tleRIUCgV2YWx1",
            "ZRgCIAEoAlIFdmFsdWU6AjgBGkEKE01hcEludDMyRG91YmxlRW50cnkSEAoD",
            "a2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAFSBXZhbHVlOgI4ARo+ChBN",
            "YXBCb29sQm9vbEVudHJ5EhAKA2tleRgBIAEoCFIDa2V5EhQKBXZhbHVlGAIg",
            "ASgIUgV2YWx1ZToCOAEaQgoUTWFwU3RyaW5nU3RyaW5nRW50cnkSEAoDa2V5",
            "GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARpAChJNYXBJ",
            "bnQzMkJ5dGVzRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiAB",
            "KAxSBXZhbHVlOgI4ARpcChFNYXBJbnQzMkVudW1FbnRyeRIQCgNrZXkYASAB",
            "KAVSA2tleRIxCgV2YWx1ZRgCIAEoDjIbLnByb3RvYnVmX3VuaXR0ZXN0My5N",
            "YXBFbnVtUgV2YWx1ZToCOAEabQobTWFwSW50MzJGb3JlaWduTWVzc2FnZUVu",
            "dHJ5EhAKA2tleRgBIAEoBVIDa2V5EjgKBXZhbHVlGAIgASgLMiIucHJvdG9i",
            "dWZfdW5pdHRlc3QzLkZvcmVpZ25NZXNzYWdlUgV2YWx1ZToCOAEafQojTWFw",
            "SW50MzJGb3JlaWduTm9FdmVudHNNZXNzYWdlRW50cnkSEAoDa2V5GAEgASgF",
            "UgNrZXkSQAoFdmFsdWUYAiABKAsyKi5wcm90b2J1Zl91bml0dGVzdDMuRm9y",
            "ZWlnbk1lc3NhZ2VOb0V2ZW50c1IFdmFsdWU6AjgBGnAKIE1hcEludDMyVGVz",
            "dEFsbFR5cGVzTWVzc2FnZUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EjYKBXZh",
            "bHVlGAIgASgLMiAucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IF",
            "dmFsdWU6AjgBGoABCihNYXBJbnQzMlRlc3RBbGxUeXBlc05vRXZlbnRzTWVz",
            "c2FnZUVudHJ5EhAKA2tleRgBIAEoBVIDa2V5Ej4KBXZhbHVlGAIgASgLMigu",
            "cHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzUgV2YWx1",
            "ZToCOAEiVgoKTmVzdGVkRW51bRIbChdORVNURURfRU5VTV9VTlNQRUNJRklF",
            "RBAAEgcKA0ZPTxABEgcKA0JBUhACEgcKA0JBWhADEhAKA05FRxD/////////",
            "//8BOgTIuB4BQg0KC29uZW9mX2ZpZWxkIuMBChJOZXN0ZWRUZXN0QWxsVHlw",
            "ZXMSPAoFY2hpbGQYASABKAsyJi5wcm90b2J1Zl91bml0dGVzdDMuTmVzdGVk",
            "VGVzdEFsbFR5cGVzUgVjaGlsZBI6CgdwYXlsb2FkGAIgASgLMiAucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IHcGF5bG9hZBJNCg5yZXBlYXRl",
            "ZF9jaGlsZBgDIAMoCzImLnByb3RvYnVmX3VuaXR0ZXN0My5OZXN0ZWRUZXN0",
            "QWxsVHlwZXNSDXJlcGVhdGVkQ2hpbGQ6BMi4HgEiSwoUVGVzdERlcHJlY2F0",
            "ZWRGaWVsZHMSLQoQZGVwcmVjYXRlZF9pbnQzMhgBIAEoBUICGAFSD2RlcHJl",
            "Y2F0ZWRJbnQzMjoEyLgeASIkCg5Gb3JlaWduTWVzc2FnZRIMCgFjGAEgASgF",
            "UgFjOgTIuB4BIjYKElRlc3RSZXNlcnZlZEZpZWxkczoEyLgeAUoECAIQA0oE",
            "CA8QEEoECAkQDFIDYmFyUgNiYXoicAoRVGVzdEZvcmVpZ25OZXN0ZWQSVQoO",
            "Zm9yZWlnbl9uZXN0ZWQYASABKAsyLi5wcm90b2J1Zl91bml0dGVzdDMuVGVz",
            "dEFsbFR5cGVzLk5lc3RlZE1lc3NhZ2VSDWZvcmVpZ25OZXN0ZWQ6BMi4HgEi",
            "QQoYVGVzdFJlYWxseUxhcmdlVGFnTnVtYmVyEgwKAWEYASABKAVSAWESEQoC",
            "YmIY////fyABKAVSAmJiOgTIuB4BImIKFFRlc3RSZWN1cnNpdmVNZXNzYWdl",
            "EjYKAWEYASABKAsyKC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdFJlY3Vyc2l2",
            "ZU1lc3NhZ2VSAWESDAoBaRgCIAEoBVIBaToEyLgeASJWChRUZXN0TXV0dWFs",
            "UmVjdXJzaW9uQRI4CgJiYhgBIAEoCzIoLnByb3RvYnVmX3VuaXR0ZXN0My5U",
            "ZXN0TXV0dWFsUmVjdXJzaW9uQlICYmI6BMi4HgEiewoUVGVzdE11dHVhbFJl",
            "Y3Vyc2lvbkISNgoBYRgBIAEoCzIoLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0",
            "TXV0dWFsUmVjdXJzaW9uQVIBYRIlCg5vcHRpb25hbF9pbnQzMhgCIAEoBVIN",
            "b3B0aW9uYWxJbnQzMjoEyLgeASJaChJUZXN0RW51bUFsbG93QWxpYXMSPgoF",
            "dmFsdWUYASABKA4yKC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEVudW1XaXRo",
            "RHVwVmFsdWVSBXZhbHVlOgTIuB4BIoEEChdUZXN0Q2FtZWxDYXNlRmllbGRO",
            "YW1lcxImCg5QcmltaXRpdmVGaWVsZBgBIAEoBVIOUHJpbWl0aXZlRmllbGQS",
            "IAoLU3RyaW5nRmllbGQYAiABKAlSC1N0cmluZ0ZpZWxkEj0KCUVudW1GaWVs",
            "ZBgDIAEoDjIfLnByb3RvYnVmX3VuaXR0ZXN0My5Gb3JlaWduRW51bVIJRW51",
            "bUZpZWxkEkYKDE1lc3NhZ2VGaWVsZBgEIAEoCzIiLnByb3RvYnVmX3VuaXR0",
            "ZXN0My5Gb3JlaWduTWVzc2FnZVIMTWVzc2FnZUZpZWxkEjYKFlJlcGVhdGVk",
            "UHJpbWl0aXZlRmllbGQYByADKAVSFlJlcGVhdGVkUHJpbWl0aXZlRmllbGQS",
            "MAoTUmVwZWF0ZWRTdHJpbmdGaWVsZBgIIAMoCVITUmVwZWF0ZWRTdHJpbmdG",
            "aWVsZBJNChFSZXBlYXRlZEVudW1GaWVsZBgJIAMoDjIfLnByb3RvYnVmX3Vu",
            "aXR0ZXN0My5Gb3JlaWduRW51bVIRUmVwZWF0ZWRFbnVtRmllbGQSVgoUUmVw",
            "ZWF0ZWRNZXNzYWdlRmllbGQYCiADKAsyIi5wcm90b2J1Zl91bml0dGVzdDMu",
            "Rm9yZWlnbk1lc3NhZ2VSFFJlcGVhdGVkTWVzc2FnZUZpZWxkOgTIuB4BIosC",
            "ChJUZXN0RmllbGRPcmRlcmluZ3MSGwoJbXlfc3RyaW5nGAsgASgJUghteVN0",
            "cmluZxIVCgZteV9pbnQYASABKANSBW15SW50EhkKCG15X2Zsb2F0GGUgASgC",
            "UgdteUZsb2F0EmkKFXNpbmdsZV9uZXN0ZWRfbWVzc2FnZRjIASABKAsyNC5w",
            "cm90b2J1Zl91bml0dGVzdDMuVGVzdEZpZWxkT3JkZXJpbmdzLk5lc3RlZE1l",
            "c3NhZ2VSE3NpbmdsZU5lc3RlZE1lc3NhZ2UaNQoNTmVzdGVkTWVzc2FnZRIO",
            "CgJvbxgCIAEoA1ICb28SDgoCYmIYASABKAVSAmJiOgTIuB4BOgTIuB4BIl4K",
            "EVNwYXJzZUVudW1NZXNzYWdlEkMKC3NwYXJzZV9lbnVtGAEgASgOMiIucHJv",
            "dG9idWZfdW5pdHRlc3QzLlRlc3RTcGFyc2VFbnVtUgpzcGFyc2VFbnVtOgTI",
            "uB4BIiUKCU9uZVN0cmluZxISCgRkYXRhGAEgASgJUgRkYXRhOgTIuB4BIiYK",
            "Ck1vcmVTdHJpbmcSEgoEZGF0YRgBIAMoCVIEZGF0YToEyLgeASIkCghPbmVC",
            "eXRlcxISCgRkYXRhGAEgASgMUgRkYXRhOgTIuB4BIiUKCU1vcmVCeXRlcxIS",
            "CgRkYXRhGAEgASgMUgRkYXRhOgTIuB4BIigKDEludDMyTWVzc2FnZRISCgRk",
            "YXRhGAEgASgFUgRkYXRhOgTIuB4BIikKDVVpbnQzMk1lc3NhZ2USEgoEZGF0",
            "YRgBIAEoDVIEZGF0YToEyLgeASIoCgxJbnQ2NE1lc3NhZ2USEgoEZGF0YRgB",
            "IAEoA1IEZGF0YToEyLgeASIpCg1VaW50NjRNZXNzYWdlEhIKBGRhdGEYASAB",
            "KARSBGRhdGE6BMi4HgEiJwoLQm9vbE1lc3NhZ2USEgoEZGF0YRgBIAEoCFIE",
            "ZGF0YToEyLgeASKZAQoJVGVzdE9uZW9mEhkKB2Zvb19pbnQYASABKAVIAFIG",
            "Zm9vSW50Eh8KCmZvb19zdHJpbmcYAiABKAlIAFIJZm9vU3RyaW5nEkMKC2Zv",
            "b19tZXNzYWdlGAMgASgLMiAucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxU",
            "eXBlc0gAUgpmb29NZXNzYWdlOgTIuB4BQgUKA2ZvbyL0BAoPVGVzdFBhY2tl",
            "ZFR5cGVzEiUKDHBhY2tlZF9pbnQzMhhaIAMoBUICEAFSC3BhY2tlZEludDMy",
            "EiUKDHBhY2tlZF9pbnQ2NBhbIAMoA0ICEAFSC3BhY2tlZEludDY0EicKDXBh",
            "Y2tlZF91aW50MzIYXCADKA1CAhABUgxwYWNrZWRVaW50MzISJwoNcGFja2Vk",
            "X3VpbnQ2NBhdIAMoBEICEAFSDHBhY2tlZFVpbnQ2NBInCg1wYWNrZWRfc2lu",
            "dDMyGF4gAygRQgIQAVIMcGFja2VkU2ludDMyEicKDXBhY2tlZF9zaW50NjQY",
            "XyADKBJCAhABUgxwYWNrZWRTaW50NjQSKQoOcGFja2VkX2ZpeGVkMzIYYCAD",
            "KAdCAhABUg1wYWNrZWRGaXhlZDMyEikKDnBhY2tlZF9maXhlZDY0GGEgAygG",
            "QgIQAVINcGFja2VkRml4ZWQ2NBIrCg9wYWNrZWRfc2ZpeGVkMzIYYiADKA9C",
            "AhABUg5wYWNrZWRTZml4ZWQzMhIrCg9wYWNrZWRfc2ZpeGVkNjQYYyADKBBC",
            "AhABUg5wYWNrZWRTZml4ZWQ2NBIlCgxwYWNrZWRfZmxvYXQYZCADKAJCAhAB",
            "UgtwYWNrZWRGbG9hdBInCg1wYWNrZWRfZG91YmxlGGUgAygBQgIQAVIMcGFj",
            "a2VkRG91YmxlEiMKC3BhY2tlZF9ib29sGGYgAygIQgIQAVIKcGFja2VkQm9v",
            "bBJECgtwYWNrZWRfZW51bRhnIAMoDjIfLnByb3RvYnVmX3VuaXR0ZXN0My5G",
            "b3JlaWduRW51bUICEAFSCnBhY2tlZEVudW06BMi4HgEirgUKEVRlc3RVbnBh",
            "Y2tlZFR5cGVzEikKDnVucGFja2VkX2ludDMyGFogAygFQgIQAFINdW5wYWNr",
            "ZWRJbnQzMhIpCg51bnBhY2tlZF9pbnQ2NBhbIAMoA0ICEABSDXVucGFja2Vk",
            "SW50NjQSKwoPdW5wYWNrZWRfdWludDMyGFwgAygNQgIQAFIOdW5wYWNrZWRV",
            "aW50MzISKwoPdW5wYWNrZWRfdWludDY0GF0gAygEQgIQAFIOdW5wYWNrZWRV",
            "aW50NjQSKwoPdW5wYWNrZWRfc2ludDMyGF4gAygRQgIQAFIOdW5wYWNrZWRT",
            "aW50MzISKwoPdW5wYWNrZWRfc2ludDY0GF8gAygSQgIQAFIOdW5wYWNrZWRT",
            "aW50NjQSLQoQdW5wYWNrZWRfZml4ZWQzMhhgIAMoB0ICEABSD3VucGFja2Vk",
            "Rml4ZWQzMhItChB1bnBhY2tlZF9maXhlZDY0GGEgAygGQgIQAFIPdW5wYWNr",
            "ZWRGaXhlZDY0Ei8KEXVucGFja2VkX3NmaXhlZDMyGGIgAygPQgIQAFIQdW5w",
            "YWNrZWRTZml4ZWQzMhIvChF1bnBhY2tlZF9zZml4ZWQ2NBhjIAMoEEICEABS",
            "EHVucGFja2VkU2ZpeGVkNjQSKQoOdW5wYWNrZWRfZmxvYXQYZCADKAJCAhAA",
            "Ug11bnBhY2tlZEZsb2F0EisKD3VucGFja2VkX2RvdWJsZRhlIAMoAUICEABS",
            "DnVucGFja2VkRG91YmxlEicKDXVucGFja2VkX2Jvb2wYZiADKAhCAhAAUgx1",
            "bnBhY2tlZEJvb2wSSAoNdW5wYWNrZWRfZW51bRhnIAMoDjIfLnByb3RvYnVm",
            "X3VuaXR0ZXN0My5Gb3JlaWduRW51bUICEABSDHVucGFja2VkRW51bToEyLge",
            "ASKlAgojVGVzdFJlcGVhdGVkU2NhbGFyRGlmZmVyZW50VGFnU2l6ZXMSKQoQ",
            "cmVwZWF0ZWRfZml4ZWQzMhgMIAMoB1IPcmVwZWF0ZWRGaXhlZDMyEiUKDnJl",
            "cGVhdGVkX2ludDMyGA0gAygFUg1yZXBlYXRlZEludDMyEioKEHJlcGVhdGVk",
            "X2ZpeGVkNjQY/g8gAygGUg9yZXBlYXRlZEZpeGVkNjQSJgoOcmVwZWF0ZWRf",
            "aW50NjQY/w8gAygDUg1yZXBlYXRlZEludDY0EicKDnJlcGVhdGVkX2Zsb2F0",
            "GP7/DyADKAJSDXJlcGVhdGVkRmxvYXQSKQoPcmVwZWF0ZWRfdWludDY0GP//",
            "DyADKARSDnJlcGVhdGVkVWludDY0OgTIuB4BIjEKG1Rlc3RDb21tZW50SW5q",
            "ZWN0aW9uTWVzc2FnZRIMCgFhGAEgASgJUgFhOgTIuB4BIhIKCkZvb1JlcXVl",
            "c3Q6BMi4HgEiEwoLRm9vUmVzcG9uc2U6BMi4HgEiGAoQRm9vQ2xpZW50TWVz",
            "c2FnZToEyLgeASIYChBGb29TZXJ2ZXJNZXNzYWdlOgTIuB4BIhIKCkJhclJl",
            "cXVlc3Q6BMi4HgEiEwoLQmFyUmVzcG9uc2U6BMi4HgEiGAoQVGVzdEVtcHR5",
            "TWVzc2FnZToEyLgeASKoPQoUVGVzdEFsbFR5cGVzTm9FdmVudHMSIQoMc2lu",
            "Z2xlX2ludDMyGAEgASgFUgtzaW5nbGVJbnQzMhIhCgxzaW5nbGVfaW50NjQY",
            "AiABKANSC3NpbmdsZUludDY0EiMKDXNpbmdsZV91aW50MzIYAyABKA1SDHNp",
            "bmdsZVVpbnQzMhIjCg1zaW5nbGVfdWludDY0GAQgASgEUgxzaW5nbGVVaW50",
            "NjQSIwoNc2luZ2xlX3NpbnQzMhgFIAEoEVIMc2luZ2xlU2ludDMyEiMKDXNp",
            "bmdsZV9zaW50NjQYBiABKBJSDHNpbmdsZVNpbnQ2NBIlCg5zaW5nbGVfZml4",
            "ZWQzMhgHIAEoB1INc2luZ2xlRml4ZWQzMhIlCg5zaW5nbGVfZml4ZWQ2NBgI",
            "IAEoBlINc2luZ2xlRml4ZWQ2NBInCg9zaW5nbGVfc2ZpeGVkMzIYCSABKA9S",
            "DnNpbmdsZVNmaXhlZDMyEicKD3NpbmdsZV9zZml4ZWQ2NBgKIAEoEFIOc2lu",
            "Z2xlU2ZpeGVkNjQSIQoMc2luZ2xlX2Zsb2F0GAsgASgCUgtzaW5nbGVGbG9h",
            "dBIjCg1zaW5nbGVfZG91YmxlGAwgASgBUgxzaW5nbGVEb3VibGUSHwoLc2lu",
            "Z2xlX2Jvb2wYDSABKAhSCnNpbmdsZUJvb2wSIwoNc2luZ2xlX3N0cmluZxgO",
            "IAEoCVIMc2luZ2xlU3RyaW5nEiEKDHNpbmdsZV9ieXRlcxgPIAEoDFILc2lu",
            "Z2xlQnl0ZXMScgoVc2luZ2xlX25lc3RlZF9tZXNzYWdlGBIgASgLMj4ucHJv",
            "dG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk5lc3RlZE1l",
            "c3NhZ2VOb0V2ZW50c1ITc2luZ2xlTmVzdGVkTWVzc2FnZRJgChZzaW5nbGVf",
            "Zm9yZWlnbl9tZXNzYWdlGBMgASgLMioucHJvdG9idWZfdW5pdHRlc3QzLkZv",
            "cmVpZ25NZXNzYWdlTm9FdmVudHNSFHNpbmdsZUZvcmVpZ25NZXNzYWdlEmMK",
            "FXNpbmdsZV9pbXBvcnRfbWVzc2FnZRgUIAEoCzIvLnByb3RvYnVmX3VuaXR0",
            "ZXN0X2ltcG9ydC5JbXBvcnRNZXNzYWdlTm9FdmVudHNSE3NpbmdsZUltcG9y",
            "dE1lc3NhZ2USaQoSc2luZ2xlX25lc3RlZF9lbnVtGBUgASgOMjsucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk5lc3RlZEVudW1O",
            "b0V2ZW50c1IQc2luZ2xlTmVzdGVkRW51bRJPChNzaW5nbGVfZm9yZWlnbl9l",
            "bnVtGBYgASgOMh8ucHJvdG9idWZfdW5pdHRlc3QzLkZvcmVpZ25FbnVtUhFz",
            "aW5nbGVGb3JlaWduRW51bRJSChJzaW5nbGVfaW1wb3J0X2VudW0YFyABKA4y",
            "JC5wcm90b2J1Zl91bml0dGVzdF9pbXBvcnQuSW1wb3J0RW51bVIQc2luZ2xl",
            "SW1wb3J0RW51bRJ2ChxzaW5nbGVfcHVibGljX2ltcG9ydF9tZXNzYWdlGBog",
            "ASgLMjUucHJvdG9idWZfdW5pdHRlc3RfaW1wb3J0LlB1YmxpY0ltcG9ydE1l",
            "c3NhZ2VOb0V2ZW50c1IZc2luZ2xlUHVibGljSW1wb3J0TWVzc2FnZRIlCg5y",
            "ZXBlYXRlZF9pbnQzMhgfIAMoBVINcmVwZWF0ZWRJbnQzMhIlCg5yZXBlYXRl",
            "ZF9pbnQ2NBggIAMoA1INcmVwZWF0ZWRJbnQ2NBInCg9yZXBlYXRlZF91aW50",
            "MzIYISADKA1SDnJlcGVhdGVkVWludDMyEicKD3JlcGVhdGVkX3VpbnQ2NBgi",
            "IAMoBFIOcmVwZWF0ZWRVaW50NjQSJwoPcmVwZWF0ZWRfc2ludDMyGCMgAygR",
            "Ug5yZXBlYXRlZFNpbnQzMhInCg9yZXBlYXRlZF9zaW50NjQYJCADKBJSDnJl",
            "cGVhdGVkU2ludDY0EikKEHJlcGVhdGVkX2ZpeGVkMzIYJSADKAdSD3JlcGVh",
            "dGVkRml4ZWQzMhIpChByZXBlYXRlZF9maXhlZDY0GCYgAygGUg9yZXBlYXRl",
            "ZEZpeGVkNjQSKwoRcmVwZWF0ZWRfc2ZpeGVkMzIYJyADKA9SEHJlcGVhdGVk",
            "U2ZpeGVkMzISKwoRcmVwZWF0ZWRfc2ZpeGVkNjQYKCADKBBSEHJlcGVhdGVk",
            "U2ZpeGVkNjQSJQoOcmVwZWF0ZWRfZmxvYXQYKSADKAJSDXJlcGVhdGVkRmxv",
            "YXQSJwoPcmVwZWF0ZWRfZG91YmxlGCogAygBUg5yZXBlYXRlZERvdWJsZRIj",
            "Cg1yZXBlYXRlZF9ib29sGCsgAygIUgxyZXBlYXRlZEJvb2wSJwoPcmVwZWF0",
            "ZWRfc3RyaW5nGCwgAygJUg5yZXBlYXRlZFN0cmluZxIlCg5yZXBlYXRlZF9i",
            "eXRlcxgtIAMoDFINcmVwZWF0ZWRCeXRlcxJ2ChdyZXBlYXRlZF9uZXN0ZWRf",
            "bWVzc2FnZRgwIAMoCzI+LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlw",
            "ZXNOb0V2ZW50cy5OZXN0ZWRNZXNzYWdlTm9FdmVudHNSFXJlcGVhdGVkTmVz",
            "dGVkTWVzc2FnZRJkChhyZXBlYXRlZF9mb3JlaWduX21lc3NhZ2UYMSADKAsy",
            "Ki5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VOb0V2ZW50c1IW",
            "cmVwZWF0ZWRGb3JlaWduTWVzc2FnZRJfChdyZXBlYXRlZF9pbXBvcnRfbWVz",
            "c2FnZRgyIAMoCzInLnByb3RvYnVmX3VuaXR0ZXN0X2ltcG9ydC5JbXBvcnRN",
            "ZXNzYWdlUhVyZXBlYXRlZEltcG9ydE1lc3NhZ2USagoZcmVwZWF0ZWRfaW1w",
            "b3J0X25vX2V2ZW50cxg3IAMoCzIvLnByb3RvYnVmX3VuaXR0ZXN0X2ltcG9y",
            "dC5JbXBvcnRNZXNzYWdlTm9FdmVudHNSFnJlcGVhdGVkSW1wb3J0Tm9FdmVu",
            "dHMSZgofcmVwZWF0ZWRfdGVzdF9hbGxfdHlwZXNfbWVzc2FnZRg4IAMoCzIg",
            "LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNSG3JlcGVhdGVkVGVz",
            "dEFsbFR5cGVzTWVzc2FnZRKAAQopcmVwZWF0ZWRfdGVzdF9hbGxfdHlwZXNf",
            "bm9fZXZlbnRzX21lc3NhZ2UYOSADKAsyKC5wcm90b2J1Zl91bml0dGVzdDMu",
            "VGVzdEFsbFR5cGVzTm9FdmVudHNSI3JlcGVhdGVkVGVzdEFsbFR5cGVzTm9F",
            "dmVudHNNZXNzYWdlEm0KFHJlcGVhdGVkX25lc3RlZF9lbnVtGDMgAygOMjsu",
            "cHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk5lc3Rl",
            "ZEVudW1Ob0V2ZW50c1IScmVwZWF0ZWROZXN0ZWRFbnVtElMKFXJlcGVhdGVk",
            "X2ZvcmVpZ25fZW51bRg0IAMoDjIfLnByb3RvYnVmX3VuaXR0ZXN0My5Gb3Jl",
            "aWduRW51bVITcmVwZWF0ZWRGb3JlaWduRW51bRJWChRyZXBlYXRlZF9pbXBv",
            "cnRfZW51bRg1IAMoDjIkLnByb3RvYnVmX3VuaXR0ZXN0X2ltcG9ydC5JbXBv",
            "cnRFbnVtUhJyZXBlYXRlZEltcG9ydEVudW0SegoecmVwZWF0ZWRfcHVibGlj",
            "X2ltcG9ydF9tZXNzYWdlGDYgAygLMjUucHJvdG9idWZfdW5pdHRlc3RfaW1w",
            "b3J0LlB1YmxpY0ltcG9ydE1lc3NhZ2VOb0V2ZW50c1IbcmVwZWF0ZWRQdWJs",
            "aWNJbXBvcnRNZXNzYWdlEiMKDG9uZW9mX3VpbnQzMhhvIAEoDUgAUgtvbmVv",
            "ZlVpbnQzMhJyChRvbmVvZl9uZXN0ZWRfbWVzc2FnZRhwIAEoCzI+LnByb3Rv",
            "YnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5OZXN0ZWRNZXNz",
            "YWdlTm9FdmVudHNIAFISb25lb2ZOZXN0ZWRNZXNzYWdlEiMKDG9uZW9mX3N0",
            "cmluZxhxIAEoCUgAUgtvbmVvZlN0cmluZxIhCgtvbmVvZl9ieXRlcxhyIAEo",
            "DEgAUgpvbmVvZkJ5dGVzElkKFW9uZW9mX2ZvcmVpZ25fbWVzc2FnZRiJASAB",
            "KAsyIi5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VIAFITb25l",
            "b2ZGb3JlaWduTWVzc2FnZRJzCh9vbmVvZl9mb3JlaWduX21lc3NhZ2Vfbm9f",
            "ZXZlbnRzGIoBIAEoCzIqLnByb3RvYnVmX3VuaXR0ZXN0My5Gb3JlaWduTWVz",
            "c2FnZU5vRXZlbnRzSABSG29uZW9mRm9yZWlnbk1lc3NhZ2VOb0V2ZW50cxJL",
            "Cg9vbmVvZl9hbGxfdHlwZXMYiwEgASgLMiAucHJvdG9idWZfdW5pdHRlc3Qz",
            "LlRlc3RBbGxUeXBlc0gAUg1vbmVvZkFsbFR5cGVzEmUKGW9uZW9mX2FsbF90",
            "eXBlc19ub19ldmVudHMYjAEgASgLMigucHJvdG9idWZfdW5pdHRlc3QzLlRl",
            "c3RBbGxUeXBlc05vRXZlbnRzSABSFW9uZW9mQWxsVHlwZXNOb0V2ZW50cxJj",
            "Cg9tYXBfaW50MzJfaW50MzIYcyADKAsyOy5wcm90b2J1Zl91bml0dGVzdDMu",
            "VGVzdEFsbFR5cGVzTm9FdmVudHMuTWFwSW50MzJJbnQzMkVudHJ5Ug1tYXBJ",
            "bnQzMkludDMyEmMKD21hcF9pbnQ2NF9pbnQ2NBh0IAMoCzI7LnByb3RvYnVm",
            "X3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBJbnQ2NEludDY0",
            "RW50cnlSDW1hcEludDY0SW50NjQSaQoRbWFwX3VpbnQzMl91aW50MzIYdSAD",
            "KAsyPS5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9FdmVudHMu",
            "TWFwVWludDMyVWludDMyRW50cnlSD21hcFVpbnQzMlVpbnQzMhJpChFtYXBf",
            "dWludDY0X3VpbnQ2NBh2IAMoCzI9LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0",
            "QWxsVHlwZXNOb0V2ZW50cy5NYXBVaW50NjRVaW50NjRFbnRyeVIPbWFwVWlu",
            "dDY0VWludDY0EmkKEW1hcF9zaW50MzJfc2ludDMyGHcgAygLMj0ucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk1hcFNpbnQzMlNp",
            "bnQzMkVudHJ5Ug9tYXBTaW50MzJTaW50MzISaQoRbWFwX3NpbnQ2NF9zaW50",
            "NjQYeCADKAsyPS5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9F",
            "dmVudHMuTWFwU2ludDY0U2ludDY0RW50cnlSD21hcFNpbnQ2NFNpbnQ2NBJv",
            "ChNtYXBfZml4ZWQzMl9maXhlZDMyGHkgAygLMj8ucHJvdG9idWZfdW5pdHRl",
            "c3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk1hcEZpeGVkMzJGaXhlZDMyRW50",
            "cnlSEW1hcEZpeGVkMzJGaXhlZDMyEm8KE21hcF9maXhlZDY0X2ZpeGVkNjQY",
            "eiADKAsyPy5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9FdmVu",
            "dHMuTWFwRml4ZWQ2NEZpeGVkNjRFbnRyeVIRbWFwRml4ZWQ2NEZpeGVkNjQS",
            "dQoVbWFwX3NmaXhlZDMyX3NmaXhlZDMyGHsgAygLMkEucHJvdG9idWZfdW5p",
            "dHRlc3QzLlRlc3RBbGxUeXBlc05vRXZlbnRzLk1hcFNmaXhlZDMyU2ZpeGVk",
            "MzJFbnRyeVITbWFwU2ZpeGVkMzJTZml4ZWQzMhJ1ChVtYXBfc2ZpeGVkNjRf",
            "c2ZpeGVkNjQYfCADKAsyQS5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5",
            "cGVzTm9FdmVudHMuTWFwU2ZpeGVkNjRTZml4ZWQ2NEVudHJ5UhNtYXBTZml4",
            "ZWQ2NFNmaXhlZDY0EmMKD21hcF9pbnQzMl9mbG9hdBh9IAMoCzI7LnByb3Rv",
            "YnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBJbnQzMkZs",
            "b2F0RW50cnlSDW1hcEludDMyRmxvYXQSZgoQbWFwX2ludDMyX2RvdWJsZRh+",
            "IAMoCzI8LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50",
            "cy5NYXBJbnQzMkRvdWJsZUVudHJ5Ug5tYXBJbnQzMkRvdWJsZRJdCg1tYXBf",
            "Ym9vbF9ib29sGH8gAygLMjkucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RBbGxU",
            "eXBlc05vRXZlbnRzLk1hcEJvb2xCb29sRW50cnlSC21hcEJvb2xCb29sEmoK",
            "EW1hcF9zdHJpbmdfc3RyaW5nGIABIAMoCzI9LnByb3RvYnVmX3VuaXR0ZXN0",
            "My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBTdHJpbmdTdHJpbmdFbnRyeVIP",
            "bWFwU3RyaW5nU3RyaW5nEmQKD21hcF9pbnQzMl9ieXRlcxiBASADKAsyOy5w",
            "cm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9FdmVudHMuTWFwSW50",
            "MzJCeXRlc0VudHJ5Ug1tYXBJbnQzMkJ5dGVzEmEKDm1hcF9pbnQzMl9lbnVt",
            "GIIBIAMoCzI6LnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2",
            "ZW50cy5NYXBJbnQzMkVudW1FbnRyeVIMbWFwSW50MzJFbnVtEoABChltYXBf",
            "aW50MzJfZm9yZWlnbl9tZXNzYWdlGIMBIAMoCzJELnByb3RvYnVmX3VuaXR0",
            "ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBJbnQzMkZvcmVpZ25NZXNz",
            "YWdlRW50cnlSFm1hcEludDMyRm9yZWlnbk1lc3NhZ2USmgEKI21hcF9pbnQz",
            "Ml9mb3JlaWduX25vX2V2ZW50c19tZXNzYWdlGIQBIAMoCzJMLnByb3RvYnVm",
            "X3VuaXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBJbnQzMkZvcmVp",
            "Z25Ob0V2ZW50c01lc3NhZ2VFbnRyeVIebWFwSW50MzJGb3JlaWduTm9FdmVu",
            "dHNNZXNzYWdlEpEBCiBtYXBfaW50MzJfdGVzdF9hbGxfdHlwZXNfbWVzc2Fn",
            "ZRiFASADKAsySS5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9F",
            "dmVudHMuTWFwSW50MzJUZXN0QWxsVHlwZXNNZXNzYWdlRW50cnlSG21hcElu",
            "dDMyVGVzdEFsbFR5cGVzTWVzc2FnZRKrAQoqbWFwX2ludDMyX3Rlc3RfYWxs",
            "X3R5cGVzX25vX2V2ZW50c19tZXNzYWdlGIYBIAMoCzJRLnByb3RvYnVmX3Vu",
            "aXR0ZXN0My5UZXN0QWxsVHlwZXNOb0V2ZW50cy5NYXBJbnQzMlRlc3RBbGxU",
            "eXBlc05vRXZlbnRzTWVzc2FnZUVudHJ5UiNtYXBJbnQzMlRlc3RBbGxUeXBl",
            "c05vRXZlbnRzTWVzc2FnZRI+CglhbGxfdHlwZXMYhwEgASgLMiAucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RBbGxUeXBlc1IIYWxsVHlwZXMSWAoTYWxsX3R5",
            "cGVzX25vX2V2ZW50cxiIASABKAsyKC5wcm90b2J1Zl91bml0dGVzdDMuVGVz",
            "dEFsbFR5cGVzTm9FdmVudHNSEGFsbFR5cGVzTm9FdmVudHMaJwoVTmVzdGVk",
            "TWVzc2FnZU5vRXZlbnRzEg4KAmJiGAEgASgFUgJiYhpAChJNYXBJbnQzMklu",
            "dDMyRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAVSBXZh",
            "bHVlOgI4ARpAChJNYXBJbnQ2NEludDY0RW50cnkSEAoDa2V5GAEgASgDUgNr",
            "ZXkSFAoFdmFsdWUYAiABKANSBXZhbHVlOgI4ARpCChRNYXBVaW50MzJVaW50",
            "MzJFbnRyeRIQCgNrZXkYASABKA1SA2tleRIUCgV2YWx1ZRgCIAEoDVIFdmFs",
            "dWU6AjgBGkIKFE1hcFVpbnQ2NFVpbnQ2NEVudHJ5EhAKA2tleRgBIAEoBFID",
            "a2V5EhQKBXZhbHVlGAIgASgEUgV2YWx1ZToCOAEaQgoUTWFwU2ludDMyU2lu",
            "dDMyRW50cnkSEAoDa2V5GAEgASgRUgNrZXkSFAoFdmFsdWUYAiABKBFSBXZh",
            "bHVlOgI4ARpCChRNYXBTaW50NjRTaW50NjRFbnRyeRIQCgNrZXkYASABKBJS",
            "A2tleRIUCgV2YWx1ZRgCIAEoElIFdmFsdWU6AjgBGkQKFk1hcEZpeGVkMzJG",
            "aXhlZDMyRW50cnkSEAoDa2V5GAEgASgHUgNrZXkSFAoFdmFsdWUYAiABKAdS",
            "BXZhbHVlOgI4ARpEChZNYXBGaXhlZDY0Rml4ZWQ2NEVudHJ5EhAKA2tleRgB",
            "IAEoBlIDa2V5EhQKBXZhbHVlGAIgASgGUgV2YWx1ZToCOAEaRgoYTWFwU2Zp",
            "eGVkMzJTZml4ZWQzMkVudHJ5EhAKA2tleRgBIAEoD1IDa2V5EhQKBXZhbHVl",
            "GAIgASgPUgV2YWx1ZToCOAEaRgoYTWFwU2ZpeGVkNjRTZml4ZWQ2NEVudHJ5",
            "EhAKA2tleRgBIAEoEFIDa2V5EhQKBXZhbHVlGAIgASgQUgV2YWx1ZToCOAEa",
            "QAoSTWFwSW50MzJGbG9hdEVudHJ5EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZh",
            "bHVlGAIgASgCUgV2YWx1ZToCOAEaQQoTTWFwSW50MzJEb3VibGVFbnRyeRIQ",
            "CgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoAVIFdmFsdWU6AjgBGj4K",
            "EE1hcEJvb2xCb29sRW50cnkSEAoDa2V5GAEgASgIUgNrZXkSFAoFdmFsdWUY",
            "AiABKAhSBXZhbHVlOgI4ARpCChRNYXBTdHJpbmdTdHJpbmdFbnRyeRIQCgNr",
            "ZXkYASABKAlSA2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6AjgBGkAKEk1h",
            "cEludDMyQnl0ZXNFbnRyeRIQCgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgC",
            "IAEoDFIFdmFsdWU6AjgBGlwKEU1hcEludDMyRW51bUVudHJ5EhAKA2tleRgB",
            "IAEoBVIDa2V5EjEKBXZhbHVlGAIgASgOMhsucHJvdG9idWZfdW5pdHRlc3Qz",
            "Lk1hcEVudW1SBXZhbHVlOgI4ARptChtNYXBJbnQzMkZvcmVpZ25NZXNzYWdl",
            "RW50cnkSEAoDa2V5GAEgASgFUgNrZXkSOAoFdmFsdWUYAiABKAsyIi5wcm90",
            "b2J1Zl91bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VSBXZhbHVlOgI4ARp9CiNN",
            "YXBJbnQzMkZvcmVpZ25Ob0V2ZW50c01lc3NhZ2VFbnRyeRIQCgNrZXkYASAB",
            "KAVSA2tleRJACgV2YWx1ZRgCIAEoCzIqLnByb3RvYnVmX3VuaXR0ZXN0My5G",
            "b3JlaWduTWVzc2FnZU5vRXZlbnRzUgV2YWx1ZToCOAEacAogTWFwSW50MzJU",
            "ZXN0QWxsVHlwZXNNZXNzYWdlRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSNgoF",
            "dmFsdWUYAiABKAsyIC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVz",
            "UgV2YWx1ZToCOAEagAEKKE1hcEludDMyVGVzdEFsbFR5cGVzTm9FdmVudHNN",
            "ZXNzYWdlRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSPgoFdmFsdWUYAiABKAsy",
            "KC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFsbFR5cGVzTm9FdmVudHNSBXZh",
            "bHVlOgI4ASKQAQoSTmVzdGVkRW51bU5vRXZlbnRzEiUKIU5FU1RFRF9FTlVN",
            "X1VOU1BFQ0lGSUVEX05PX0VWRU5UUxAAEhEKDUZPT19OT19FVkVOVFMQARIR",
            "Cg1CQVJfTk9fRVZFTlRTEAISEQoNQkFaX05PX0VWRU5UUxADEhoKDU5FR19O",
            "T19FVkVOVFMQ////////////AUINCgtvbmVvZl9maWVsZCL9AQoaTmVzdGVk",
            "VGVzdEFsbFR5cGVzTm9FdmVudHMSRAoFY2hpbGQYASABKAsyLi5wcm90b2J1",
            "Zl91bml0dGVzdDMuTmVzdGVkVGVzdEFsbFR5cGVzTm9FdmVudHNSBWNoaWxk",
            "EkIKB3BheWxvYWQYAiABKAsyKC5wcm90b2J1Zl91bml0dGVzdDMuVGVzdEFs",
            "bFR5cGVzTm9FdmVudHNSB3BheWxvYWQSVQoOcmVwZWF0ZWRfY2hpbGQYAyAD",
            "KAsyLi5wcm90b2J1Zl91bml0dGVzdDMuTmVzdGVkVGVzdEFsbFR5cGVzTm9F",
            "dmVudHNSDXJlcGVhdGVkQ2hpbGQiTQocVGVzdERlcHJlY2F0ZWRGaWVsZHNO",
            "b0V2ZW50cxItChBkZXByZWNhdGVkX2ludDMyGAEgASgFQgIYAVIPZGVwcmVj",
            "YXRlZEludDMyIiYKFkZvcmVpZ25NZXNzYWdlTm9FdmVudHMSDAoBYxgBIAEo",
            "BVIBYyI4ChpUZXN0UmVzZXJ2ZWRGaWVsZHNOb0V2ZW50c0oECAIQA0oECA8Q",
            "EEoECAkQDFIDYmFyUgNiYXoiggEKGVRlc3RGb3JlaWduTmVzdGVkTm9FdmVu",
            "dHMSZQoOZm9yZWlnbl9uZXN0ZWQYASABKAsyPi5wcm90b2J1Zl91bml0dGVz",
            "dDMuVGVzdEFsbFR5cGVzTm9FdmVudHMuTmVzdGVkTWVzc2FnZU5vRXZlbnRz",
            "Ug1mb3JlaWduTmVzdGVkIkMKIFRlc3RSZWFsbHlMYXJnZVRhZ051bWJlck5v",
            "RXZlbnRzEgwKAWEYASABKAVSAWESEQoCYmIY////fyABKAVSAmJiImwKHFRl",
            "c3RSZWN1cnNpdmVNZXNzYWdlTm9FdmVudHMSPgoBYRgBIAEoCzIwLnByb3Rv",
            "YnVmX3VuaXR0ZXN0My5UZXN0UmVjdXJzaXZlTWVzc2FnZU5vRXZlbnRzUgFh",
            "EgwKAWkYAiABKAVSAWkiYAocVGVzdE11dHVhbFJlY3Vyc2lvbkFOb0V2ZW50",
            "cxJACgJiYhgBIAEoCzIwLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0TXV0dWFs",
            "UmVjdXJzaW9uQk5vRXZlbnRzUgJiYiKFAQocVGVzdE11dHVhbFJlY3Vyc2lv",
            "bkJOb0V2ZW50cxI+CgFhGAEgASgLMjAucHJvdG9idWZfdW5pdHRlc3QzLlRl",
            "c3RNdXR1YWxSZWN1cnNpb25BTm9FdmVudHNSAWESJQoOb3B0aW9uYWxfaW50",
            "MzIYAiABKAVSDW9wdGlvbmFsSW50MzIiZAoaVGVzdEVudW1BbGxvd0FsaWFz",
            "Tm9FdmVudHMSRgoFdmFsdWUYASABKA4yMC5wcm90b2J1Zl91bml0dGVzdDMu",
            "VGVzdEVudW1XaXRoRHVwVmFsdWVOb0V2ZW50c1IFdmFsdWUikwQKH1Rlc3RD",
            "YW1lbENhc2VGaWVsZE5hbWVzTm9FdmVudHMSJgoOUHJpbWl0aXZlRmllbGQY",
            "ASABKAVSDlByaW1pdGl2ZUZpZWxkEiAKC1N0cmluZ0ZpZWxkGAIgASgJUgtT",
            "dHJpbmdGaWVsZBI9CglFbnVtRmllbGQYAyABKA4yHy5wcm90b2J1Zl91bml0",
            "dGVzdDMuRm9yZWlnbkVudW1SCUVudW1GaWVsZBJOCgxNZXNzYWdlRmllbGQY",
            "BCABKAsyKi5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VOb0V2",
            "ZW50c1IMTWVzc2FnZUZpZWxkEjYKFlJlcGVhdGVkUHJpbWl0aXZlRmllbGQY",
            "ByADKAVSFlJlcGVhdGVkUHJpbWl0aXZlRmllbGQSMAoTUmVwZWF0ZWRTdHJp",
            "bmdGaWVsZBgIIAMoCVITUmVwZWF0ZWRTdHJpbmdGaWVsZBJNChFSZXBlYXRl",
            "ZEVudW1GaWVsZBgJIAMoDjIfLnByb3RvYnVmX3VuaXR0ZXN0My5Gb3JlaWdu",
            "RW51bVIRUmVwZWF0ZWRFbnVtRmllbGQSXgoUUmVwZWF0ZWRNZXNzYWdlRmll",
            "bGQYCiADKAsyKi5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbk1lc3NhZ2VO",
            "b0V2ZW50c1IUUmVwZWF0ZWRNZXNzYWdlRmllbGQinwIKGlRlc3RGaWVsZE9y",
            "ZGVyaW5nc05vRXZlbnRzEhsKCW15X3N0cmluZxgLIAEoCVIIbXlTdHJpbmcS",
            "FQoGbXlfaW50GAEgASgDUgVteUludBIZCghteV9mbG9hdBhlIAEoAlIHbXlG",
            "bG9hdBJ5ChVzaW5nbGVfbmVzdGVkX21lc3NhZ2UYyAEgASgLMkQucHJvdG9i",
            "dWZfdW5pdHRlc3QzLlRlc3RGaWVsZE9yZGVyaW5nc05vRXZlbnRzLk5lc3Rl",
            "ZE1lc3NhZ2VOb0V2ZW50c1ITc2luZ2xlTmVzdGVkTWVzc2FnZRo3ChVOZXN0",
            "ZWRNZXNzYWdlTm9FdmVudHMSDgoCb28YAiABKANSAm9vEg4KAmJiGAEgASgF",
            "UgJiYiJoChlTcGFyc2VFbnVtTWVzc2FnZU5vRXZlbnRzEksKC3NwYXJzZV9l",
            "bnVtGAEgASgOMioucHJvdG9idWZfdW5pdHRlc3QzLlRlc3RTcGFyc2VFbnVt",
            "Tm9FdmVudHNSCnNwYXJzZUVudW0iJwoRT25lU3RyaW5nTm9FdmVudHMSEgoE",
            "ZGF0YRgBIAEoCVIEZGF0YSIoChJNb3JlU3RyaW5nTm9FdmVudHMSEgoEZGF0",
            "YRgBIAMoCVIEZGF0YSImChBPbmVCeXRlc05vRXZlbnRzEhIKBGRhdGEYASAB",
            "KAxSBGRhdGEiJwoRTW9yZUJ5dGVzTm9FdmVudHMSEgoEZGF0YRgBIAEoDFIE",
            "ZGF0YSIqChRJbnQzMk1lc3NhZ2VOb0V2ZW50cxISCgRkYXRhGAEgASgFUgRk",
            "YXRhIisKFVVpbnQzMk1lc3NhZ2VOb0V2ZW50cxISCgRkYXRhGAEgASgNUgRk",
            "YXRhIioKFEludDY0TWVzc2FnZU5vRXZlbnRzEhIKBGRhdGEYASABKANSBGRh",
            "dGEiKwoVVWludDY0TWVzc2FnZU5vRXZlbnRzEhIKBGRhdGEYASABKARSBGRh",
            "dGEiKQoTQm9vbE1lc3NhZ2VOb0V2ZW50cxISCgRkYXRhGAEgASgIUgRkYXRh",
            "IqMBChFUZXN0T25lb2ZOb0V2ZW50cxIZCgdmb29faW50GAEgASgFSABSBmZv",
            "b0ludBIfCgpmb29fc3RyaW5nGAIgASgJSABSCWZvb1N0cmluZxJLCgtmb29f",
            "bWVzc2FnZRgDIAEoCzIoLnByb3RvYnVmX3VuaXR0ZXN0My5UZXN0QWxsVHlw",
            "ZXNOb0V2ZW50c0gAUgpmb29NZXNzYWdlQgUKA2ZvbyL2BAoXVGVzdFBhY2tl",
            "ZFR5cGVzTm9FdmVudHMSJQoMcGFja2VkX2ludDMyGFogAygFQgIQAVILcGFj",
            "a2VkSW50MzISJQoMcGFja2VkX2ludDY0GFsgAygDQgIQAVILcGFja2VkSW50",
            "NjQSJwoNcGFja2VkX3VpbnQzMhhcIAMoDUICEAFSDHBhY2tlZFVpbnQzMhIn",
            "Cg1wYWNrZWRfdWludDY0GF0gAygEQgIQAVIMcGFja2VkVWludDY0EicKDXBh",
            "Y2tlZF9zaW50MzIYXiADKBFCAhABUgxwYWNrZWRTaW50MzISJwoNcGFja2Vk",
            "X3NpbnQ2NBhfIAMoEkICEAFSDHBhY2tlZFNpbnQ2NBIpCg5wYWNrZWRfZml4",
            "ZWQzMhhgIAMoB0ICEAFSDXBhY2tlZEZpeGVkMzISKQoOcGFja2VkX2ZpeGVk",
            "NjQYYSADKAZCAhABUg1wYWNrZWRGaXhlZDY0EisKD3BhY2tlZF9zZml4ZWQz",
            "MhhiIAMoD0ICEAFSDnBhY2tlZFNmaXhlZDMyEisKD3BhY2tlZF9zZml4ZWQ2",
            "NBhjIAMoEEICEAFSDnBhY2tlZFNmaXhlZDY0EiUKDHBhY2tlZF9mbG9hdBhk",
            "IAMoAkICEAFSC3BhY2tlZEZsb2F0EicKDXBhY2tlZF9kb3VibGUYZSADKAFC",
            "AhABUgxwYWNrZWREb3VibGUSIwoLcGFja2VkX2Jvb2wYZiADKAhCAhABUgpw",
            "YWNrZWRCb29sEkQKC3BhY2tlZF9lbnVtGGcgAygOMh8ucHJvdG9idWZfdW5p",
            "dHRlc3QzLkZvcmVpZ25FbnVtQgIQAVIKcGFja2VkRW51bSKwBQoZVGVzdFVu",
            "cGFja2VkVHlwZXNOb0V2ZW50cxIpCg51bnBhY2tlZF9pbnQzMhhaIAMoBUIC",
            "EABSDXVucGFja2VkSW50MzISKQoOdW5wYWNrZWRfaW50NjQYWyADKANCAhAA",
            "Ug11bnBhY2tlZEludDY0EisKD3VucGFja2VkX3VpbnQzMhhcIAMoDUICEABS",
            "DnVucGFja2VkVWludDMyEisKD3VucGFja2VkX3VpbnQ2NBhdIAMoBEICEABS",
            "DnVucGFja2VkVWludDY0EisKD3VucGFja2VkX3NpbnQzMhheIAMoEUICEABS",
            "DnVucGFja2VkU2ludDMyEisKD3VucGFja2VkX3NpbnQ2NBhfIAMoEkICEABS",
            "DnVucGFja2VkU2ludDY0Ei0KEHVucGFja2VkX2ZpeGVkMzIYYCADKAdCAhAA",
            "Ug91bnBhY2tlZEZpeGVkMzISLQoQdW5wYWNrZWRfZml4ZWQ2NBhhIAMoBkIC",
            "EABSD3VucGFja2VkRml4ZWQ2NBIvChF1bnBhY2tlZF9zZml4ZWQzMhhiIAMo",
            "D0ICEABSEHVucGFja2VkU2ZpeGVkMzISLwoRdW5wYWNrZWRfc2ZpeGVkNjQY",
            "YyADKBBCAhAAUhB1bnBhY2tlZFNmaXhlZDY0EikKDnVucGFja2VkX2Zsb2F0",
            "GGQgAygCQgIQAFINdW5wYWNrZWRGbG9hdBIrCg91bnBhY2tlZF9kb3VibGUY",
            "ZSADKAFCAhAAUg51bnBhY2tlZERvdWJsZRInCg11bnBhY2tlZF9ib29sGGYg",
            "AygIQgIQAFIMdW5wYWNrZWRCb29sEkgKDXVucGFja2VkX2VudW0YZyADKA4y",
            "Hy5wcm90b2J1Zl91bml0dGVzdDMuRm9yZWlnbkVudW1CAhAAUgx1bnBhY2tl",
            "ZEVudW0ipwIKK1Rlc3RSZXBlYXRlZFNjYWxhckRpZmZlcmVudFRhZ1NpemVz",
            "Tm9FdmVudHMSKQoQcmVwZWF0ZWRfZml4ZWQzMhgMIAMoB1IPcmVwZWF0ZWRG",
            "aXhlZDMyEiUKDnJlcGVhdGVkX2ludDMyGA0gAygFUg1yZXBlYXRlZEludDMy",
            "EioKEHJlcGVhdGVkX2ZpeGVkNjQY/g8gAygGUg9yZXBlYXRlZEZpeGVkNjQS",
            "JgoOcmVwZWF0ZWRfaW50NjQY/w8gAygDUg1yZXBlYXRlZEludDY0EicKDnJl",
            "cGVhdGVkX2Zsb2F0GP7/DyADKAJSDXJlcGVhdGVkRmxvYXQSKQoPcmVwZWF0",
            "ZWRfdWludDY0GP//DyADKARSDnJlcGVhdGVkVWludDY0IjMKI1Rlc3RDb21t",
            "ZW50SW5qZWN0aW9uTWVzc2FnZU5vRXZlbnRzEgwKAWEYASABKAlSAWEiFAoS",
            "Rm9vUmVxdWVzdE5vRXZlbnRzIhUKE0Zvb1Jlc3BvbnNlTm9FdmVudHMiGgoY",
            "Rm9vQ2xpZW50TWVzc2FnZU5vRXZlbnRzIhoKGEZvb1NlcnZlck1lc3NhZ2VO",
            "b0V2ZW50cyIUChJCYXJSZXF1ZXN0Tm9FdmVudHMiFQoTQmFyUmVzcG9uc2VO",
            "b0V2ZW50cyIaChhUZXN0RW1wdHlNZXNzYWdlTm9FdmVudHMqPwoHTWFwRW51",
            "bRIQCgxNQVBfRU5VTV9GT08QABIQCgxNQVBfRU5VTV9CQVIQARIQCgxNQVBf",
            "RU5VTV9CQVoQAipZCgtGb3JlaWduRW51bRIXChNGT1JFSUdOX1VOU1BFQ0lG",
            "SUVEEAASDwoLRk9SRUlHTl9GT08QBBIPCgtGT1JFSUdOX0JBUhAFEg8KC0ZP",
            "UkVJR05fQkFaEAYqdQoUVGVzdEVudW1XaXRoRHVwVmFsdWUSKAokVEVTVF9F",
            "TlVNX1dJVEhfRFVQX1ZBTFVFX1VOU1BFQ0lGSUVEEAASCAoERk9PMRABEggK",
            "BEJBUjEQAhIHCgNCQVoQAxIICgRGT08yEAESCAoEQkFSMhACGgIQASqdAQoO",
            "VGVzdFNwYXJzZUVudW0SIAocVEVTVF9TUEFSU0VfRU5VTV9VTlNQRUNJRklF",
            "RBAAEgwKCFNQQVJTRV9BEHsSDgoIU1BBUlNFX0IQpucDEg8KCFNQQVJTRV9D",
            "ELKxgAYSFQoIU1BBUlNFX0QQ8f//////////ARIVCghTUEFSU0VfRRC03vz/",
            "//////8BEgwKCFNQQVJTRV9HEAIquQEKHFRlc3RFbnVtV2l0aER1cFZhbHVl",
            "Tm9FdmVudHMSMgouVEVTVF9FTlVNX1dJVEhfRFVQX1ZBTFVFX1VOU1BFQ0lG",
            "SUVEX05PX0VWRU5UUxAAEhIKDkZPTzFfTk9fRVZFTlRTEAESEgoOQkFSMV9O",
            "T19FVkVOVFMQAhIRCg1CQVpfTk9fRVZFTlRTEAMSEgoORk9PMl9OT19FVkVO",
            "VFMQARISCg5CQVIyX05PX0VWRU5UUxACGgIQASrrAQoWVGVzdFNwYXJzZUVu",
            "dW1Ob0V2ZW50cxIqCiZURVNUX1NQQVJTRV9FTlVNX1VOU1BFQ0lGSUVEX05P",
            "X0VWRU5UUxAAEhYKElNQQVJTRV9BX05PX0VWRU5UUxB7EhgKElNQQVJTRV9C",
            "X05PX0VWRU5UUxCm5wMSGQoSU1BBUlNFX0NfTk9fRVZFTlRTELKxgAYSHwoS",
            "U1BBUlNFX0RfTk9fRVZFTlRTEPH//////////wESHwoSU1BBUlNFX0VfTk9f",
            "RVZFTlRTELTe/P///////wESFgoSU1BBUlNFX0dfTk9fRVZFTlRTEAIynQEK",
            "C1Rlc3RTZXJ2aWNlEkYKA0ZvbxIeLnByb3RvYnVmX3VuaXR0ZXN0My5Gb29S",
            "ZXF1ZXN0Gh8ucHJvdG9idWZfdW5pdHRlc3QzLkZvb1Jlc3BvbnNlEkYKA0Jh",
            "chIeLnByb3RvYnVmX3VuaXR0ZXN0My5CYXJSZXF1ZXN0Gh8ucHJvdG9idWZf",
            "dW5pdHRlc3QzLkJhclJlc3BvbnNlMsUBChNUZXN0U2VydmljZU5vRXZlbnRz",
            "ElYKA0ZvbxImLnByb3RvYnVmX3VuaXR0ZXN0My5Gb29SZXF1ZXN0Tm9FdmVu",
            "dHMaJy5wcm90b2J1Zl91bml0dGVzdDMuRm9vUmVzcG9uc2VOb0V2ZW50cxJW",
            "CgNCYXISJi5wcm90b2J1Zl91bml0dGVzdDMuQmFyUmVxdWVzdE5vRXZlbnRz",
            "GicucHJvdG9idWZfdW5pdHRlc3QzLkJhclJlc3BvbnNlTm9FdmVudHNCLEIN",
            "VW5pdHRlc3RQcm90b6oCGkdvb2dsZS5Qcm90b2J1Zi5UZXN0UHJvdG9zYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.TestProtos.UnittestImportProto3Reflection.Descriptor, global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.TestProtos.MapEnum), typeof(global::Google.Protobuf.TestProtos.ForeignEnum), typeof(global::Google.Protobuf.TestProtos.TestEnumWithDupValue), typeof(global::Google.Protobuf.TestProtos.TestSparseEnum), typeof(global::Google.Protobuf.TestProtos.TestEnumWithDupValueNoEvents), typeof(global::Google.Protobuf.TestProtos.TestSparseEnumNoEvents), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestAllTypes), global::Google.Protobuf.TestProtos.TestAllTypes.Parser, new[]{ "SingleInt32", "SingleInt64", "SingleUint32", "SingleUint64", "SingleSint32", "SingleSint64", "SingleFixed32", "SingleFixed64", "SingleSfixed32", "SingleSfixed64", "SingleFloat", "SingleDouble", "SingleBool", "SingleString", "SingleBytes", "SingleNestedMessage", "SingleForeignMessage", "SingleImportMessage", "SingleNestedEnum", "SingleForeignEnum", "SingleImportEnum", "SinglePublicImportMessage", "RepeatedInt32", "RepeatedInt64", "RepeatedUint32", "RepeatedUint64", "RepeatedSint32", "RepeatedSint64", "RepeatedFixed32", "RepeatedFixed64", "RepeatedSfixed32", "RepeatedSfixed64", "RepeatedFloat", "RepeatedDouble", "RepeatedBool", "RepeatedString", "RepeatedBytes", "RepeatedNestedMessage", "RepeatedForeignMessage", "RepeatedImportMessage", "RepeatedImportNoEvents", "RepeatedTestAllTypesMessage", "RepeatedTestAllTypesNoEventsMessage", "RepeatedNestedEnum", "RepeatedForeignEnum", "RepeatedImportEnum", "OneofUint32", "OneofNestedMessage", "OneofString", "OneofBytes", "OneofForeignMessage", "OneofForeignMessageNoEvents", "OneofAllTypes", "OneofAllTypesNoEvents", "MapInt32Int32", "MapInt64Int64", "MapUint32Uint32", "MapUint64Uint64", "MapSint32Sint32", "MapSint64Sint64", "MapFixed32Fixed32", "MapFixed64Fixed64", "MapSfixed32Sfixed32", "MapSfixed64Sfixed64", "MapInt32Float", "MapInt32Double", "MapBoolBool", "MapStringString", "MapInt32Bytes", "MapInt32Enum", "MapInt32ForeignMessage", "MapInt32ForeignNoEventsMessage", "MapInt32TestAllTypesMessage", "MapInt32TestAllTypesNoEventsMessage", "AllTypes", "AllTypesNoEvents" }, new[]{ "OneofField" }, new[]{ typeof(global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage), global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser, new[]{ "Bb" }, null, null, null),
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.NestedTestAllTypes), global::Google.Protobuf.TestProtos.NestedTestAllTypes.Parser, new[]{ "Child", "Payload", "RepeatedChild" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestDeprecatedFields), global::Google.Protobuf.TestProtos.TestDeprecatedFields.Parser, new[]{ "DeprecatedInt32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.ForeignMessage), global::Google.Protobuf.TestProtos.ForeignMessage.Parser, new[]{ "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestReservedFields), global::Google.Protobuf.TestProtos.TestReservedFields.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestForeignNested), global::Google.Protobuf.TestProtos.TestForeignNested.Parser, new[]{ "ForeignNested" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestReallyLargeTagNumber), global::Google.Protobuf.TestProtos.TestReallyLargeTagNumber.Parser, new[]{ "A", "Bb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestRecursiveMessage), global::Google.Protobuf.TestProtos.TestRecursiveMessage.Parser, new[]{ "A", "I" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestMutualRecursionA), global::Google.Protobuf.TestProtos.TestMutualRecursionA.Parser, new[]{ "Bb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestMutualRecursionB), global::Google.Protobuf.TestProtos.TestMutualRecursionB.Parser, new[]{ "A", "OptionalInt32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestEnumAllowAlias), global::Google.Protobuf.TestProtos.TestEnumAllowAlias.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestCamelCaseFieldNames), global::Google.Protobuf.TestProtos.TestCamelCaseFieldNames.Parser, new[]{ "PrimitiveField", "StringField", "EnumField", "MessageField", "RepeatedPrimitiveField", "RepeatedStringField", "RepeatedEnumField", "RepeatedMessageField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestFieldOrderings), global::Google.Protobuf.TestProtos.TestFieldOrderings.Parser, new[]{ "MyString", "MyInt", "MyFloat", "SingleNestedMessage" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage), global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage.Parser, new[]{ "Oo", "Bb" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.SparseEnumMessage), global::Google.Protobuf.TestProtos.SparseEnumMessage.Parser, new[]{ "SparseEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.OneString), global::Google.Protobuf.TestProtos.OneString.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.MoreString), global::Google.Protobuf.TestProtos.MoreString.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.OneBytes), global::Google.Protobuf.TestProtos.OneBytes.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.MoreBytes), global::Google.Protobuf.TestProtos.MoreBytes.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Int32Message), global::Google.Protobuf.TestProtos.Int32Message.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Uint32Message), global::Google.Protobuf.TestProtos.Uint32Message.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Int64Message), global::Google.Protobuf.TestProtos.Int64Message.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Uint64Message), global::Google.Protobuf.TestProtos.Uint64Message.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BoolMessage), global::Google.Protobuf.TestProtos.BoolMessage.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestOneof), global::Google.Protobuf.TestProtos.TestOneof.Parser, new[]{ "FooInt", "FooString", "FooMessage" }, new[]{ "Foo" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestPackedTypes), global::Google.Protobuf.TestProtos.TestPackedTypes.Parser, new[]{ "PackedInt32", "PackedInt64", "PackedUint32", "PackedUint64", "PackedSint32", "PackedSint64", "PackedFixed32", "PackedFixed64", "PackedSfixed32", "PackedSfixed64", "PackedFloat", "PackedDouble", "PackedBool", "PackedEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestUnpackedTypes), global::Google.Protobuf.TestProtos.TestUnpackedTypes.Parser, new[]{ "UnpackedInt32", "UnpackedInt64", "UnpackedUint32", "UnpackedUint64", "UnpackedSint32", "UnpackedSint64", "UnpackedFixed32", "UnpackedFixed64", "UnpackedSfixed32", "UnpackedSfixed64", "UnpackedFloat", "UnpackedDouble", "UnpackedBool", "UnpackedEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestRepeatedScalarDifferentTagSizes), global::Google.Protobuf.TestProtos.TestRepeatedScalarDifferentTagSizes.Parser, new[]{ "RepeatedFixed32", "RepeatedInt32", "RepeatedFixed64", "RepeatedInt64", "RepeatedFloat", "RepeatedUint64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestCommentInjectionMessage), global::Google.Protobuf.TestProtos.TestCommentInjectionMessage.Parser, new[]{ "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooRequest), global::Google.Protobuf.TestProtos.FooRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooResponse), global::Google.Protobuf.TestProtos.FooResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooClientMessage), global::Google.Protobuf.TestProtos.FooClientMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooServerMessage), global::Google.Protobuf.TestProtos.FooServerMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BarRequest), global::Google.Protobuf.TestProtos.BarRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BarResponse), global::Google.Protobuf.TestProtos.BarResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestEmptyMessage), global::Google.Protobuf.TestProtos.TestEmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestAllTypesNoEvents), global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser, new[]{ "SingleInt32", "SingleInt64", "SingleUint32", "SingleUint64", "SingleSint32", "SingleSint64", "SingleFixed32", "SingleFixed64", "SingleSfixed32", "SingleSfixed64", "SingleFloat", "SingleDouble", "SingleBool", "SingleString", "SingleBytes", "SingleNestedMessage", "SingleForeignMessage", "SingleImportMessage", "SingleNestedEnum", "SingleForeignEnum", "SingleImportEnum", "SinglePublicImportMessage", "RepeatedInt32", "RepeatedInt64", "RepeatedUint32", "RepeatedUint64", "RepeatedSint32", "RepeatedSint64", "RepeatedFixed32", "RepeatedFixed64", "RepeatedSfixed32", "RepeatedSfixed64", "RepeatedFloat", "RepeatedDouble", "RepeatedBool", "RepeatedString", "RepeatedBytes", "RepeatedNestedMessage", "RepeatedForeignMessage", "RepeatedImportMessage", "RepeatedImportNoEvents", "RepeatedTestAllTypesMessage", "RepeatedTestAllTypesNoEventsMessage", "RepeatedNestedEnum", "RepeatedForeignEnum", "RepeatedImportEnum", "RepeatedPublicImportMessage", "OneofUint32", "OneofNestedMessage", "OneofString", "OneofBytes", "OneofForeignMessage", "OneofForeignMessageNoEvents", "OneofAllTypes", "OneofAllTypesNoEvents", "MapInt32Int32", "MapInt64Int64", "MapUint32Uint32", "MapUint64Uint64", "MapSint32Sint32", "MapSint64Sint64", "MapFixed32Fixed32", "MapFixed64Fixed64", "MapSfixed32Sfixed32", "MapSfixed64Sfixed64", "MapInt32Float", "MapInt32Double", "MapBoolBool", "MapStringString", "MapInt32Bytes", "MapInt32Enum", "MapInt32ForeignMessage", "MapInt32ForeignNoEventsMessage", "MapInt32TestAllTypesMessage", "MapInt32TestAllTypesNoEventsMessage", "AllTypes", "AllTypesNoEvents" }, new[]{ "OneofField" }, new[]{ typeof(global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents), global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents.Parser, new[]{ "Bb" }, null, null, null),
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents), global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents.Parser, new[]{ "Child", "Payload", "RepeatedChild" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestDeprecatedFieldsNoEvents), global::Google.Protobuf.TestProtos.TestDeprecatedFieldsNoEvents.Parser, new[]{ "DeprecatedInt32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.ForeignMessageNoEvents), global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser, new[]{ "C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestReservedFieldsNoEvents), global::Google.Protobuf.TestProtos.TestReservedFieldsNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestForeignNestedNoEvents), global::Google.Protobuf.TestProtos.TestForeignNestedNoEvents.Parser, new[]{ "ForeignNested" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestReallyLargeTagNumberNoEvents), global::Google.Protobuf.TestProtos.TestReallyLargeTagNumberNoEvents.Parser, new[]{ "A", "Bb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents), global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents.Parser, new[]{ "A", "I" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents), global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents.Parser, new[]{ "Bb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents), global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents.Parser, new[]{ "A", "OptionalInt32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestEnumAllowAliasNoEvents), global::Google.Protobuf.TestProtos.TestEnumAllowAliasNoEvents.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestCamelCaseFieldNamesNoEvents), global::Google.Protobuf.TestProtos.TestCamelCaseFieldNamesNoEvents.Parser, new[]{ "PrimitiveField", "StringField", "EnumField", "MessageField", "RepeatedPrimitiveField", "RepeatedStringField", "RepeatedEnumField", "RepeatedMessageField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents), global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Parser, new[]{ "MyString", "MyInt", "MyFloat", "SingleNestedMessage" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents), global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents.Parser, new[]{ "Oo", "Bb" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.SparseEnumMessageNoEvents), global::Google.Protobuf.TestProtos.SparseEnumMessageNoEvents.Parser, new[]{ "SparseEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.OneStringNoEvents), global::Google.Protobuf.TestProtos.OneStringNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.MoreStringNoEvents), global::Google.Protobuf.TestProtos.MoreStringNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.OneBytesNoEvents), global::Google.Protobuf.TestProtos.OneBytesNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.MoreBytesNoEvents), global::Google.Protobuf.TestProtos.MoreBytesNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Int32MessageNoEvents), global::Google.Protobuf.TestProtos.Int32MessageNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Uint32MessageNoEvents), global::Google.Protobuf.TestProtos.Uint32MessageNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Int64MessageNoEvents), global::Google.Protobuf.TestProtos.Int64MessageNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.Uint64MessageNoEvents), global::Google.Protobuf.TestProtos.Uint64MessageNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BoolMessageNoEvents), global::Google.Protobuf.TestProtos.BoolMessageNoEvents.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestOneofNoEvents), global::Google.Protobuf.TestProtos.TestOneofNoEvents.Parser, new[]{ "FooInt", "FooString", "FooMessage" }, new[]{ "Foo" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestPackedTypesNoEvents), global::Google.Protobuf.TestProtos.TestPackedTypesNoEvents.Parser, new[]{ "PackedInt32", "PackedInt64", "PackedUint32", "PackedUint64", "PackedSint32", "PackedSint64", "PackedFixed32", "PackedFixed64", "PackedSfixed32", "PackedSfixed64", "PackedFloat", "PackedDouble", "PackedBool", "PackedEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestUnpackedTypesNoEvents), global::Google.Protobuf.TestProtos.TestUnpackedTypesNoEvents.Parser, new[]{ "UnpackedInt32", "UnpackedInt64", "UnpackedUint32", "UnpackedUint64", "UnpackedSint32", "UnpackedSint64", "UnpackedFixed32", "UnpackedFixed64", "UnpackedSfixed32", "UnpackedSfixed64", "UnpackedFloat", "UnpackedDouble", "UnpackedBool", "UnpackedEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestRepeatedScalarDifferentTagSizesNoEvents), global::Google.Protobuf.TestProtos.TestRepeatedScalarDifferentTagSizesNoEvents.Parser, new[]{ "RepeatedFixed32", "RepeatedInt32", "RepeatedFixed64", "RepeatedInt64", "RepeatedFloat", "RepeatedUint64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestCommentInjectionMessageNoEvents), global::Google.Protobuf.TestProtos.TestCommentInjectionMessageNoEvents.Parser, new[]{ "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooRequestNoEvents), global::Google.Protobuf.TestProtos.FooRequestNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooResponseNoEvents), global::Google.Protobuf.TestProtos.FooResponseNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooClientMessageNoEvents), global::Google.Protobuf.TestProtos.FooClientMessageNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.FooServerMessageNoEvents), global::Google.Protobuf.TestProtos.FooServerMessageNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BarRequestNoEvents), global::Google.Protobuf.TestProtos.BarRequestNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.BarResponseNoEvents), global::Google.Protobuf.TestProtos.BarResponseNoEvents.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.TestProtos.TestEmptyMessageNoEvents), global::Google.Protobuf.TestProtos.TestEmptyMessageNoEvents.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MapEnum {
    [pbr::OriginalName("MAP_ENUM_FOO")] Foo = 0,
    [pbr::OriginalName("MAP_ENUM_BAR")] Bar = 1,
    [pbr::OriginalName("MAP_ENUM_BAZ")] Baz = 2,
  }

  public enum ForeignEnum {
    [pbr::OriginalName("FOREIGN_UNSPECIFIED")] ForeignUnspecified = 0,
    [pbr::OriginalName("FOREIGN_FOO")] ForeignFoo = 4,
    [pbr::OriginalName("FOREIGN_BAR")] ForeignBar = 5,
    [pbr::OriginalName("FOREIGN_BAZ")] ForeignBaz = 6,
  }

  /// <summary>
  /// Test an enum that has multiple values with the same number.
  /// </summary>
  public enum TestEnumWithDupValue {
    [pbr::OriginalName("TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FOO1")] Foo1 = 1,
    [pbr::OriginalName("BAR1")] Bar1 = 2,
    [pbr::OriginalName("BAZ")] Baz = 3,
    [pbr::OriginalName("FOO2", PreferredAlias = false)] Foo2 = 1,
    [pbr::OriginalName("BAR2", PreferredAlias = false)] Bar2 = 2,
  }

  /// <summary>
  /// Test an enum with large, unordered values.
  /// </summary>
  public enum TestSparseEnum {
    [pbr::OriginalName("TEST_SPARSE_ENUM_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("SPARSE_A")] SparseA = 123,
    [pbr::OriginalName("SPARSE_B")] SparseB = 62374,
    [pbr::OriginalName("SPARSE_C")] SparseC = 12589234,
    [pbr::OriginalName("SPARSE_D")] SparseD = -15,
    [pbr::OriginalName("SPARSE_E")] SparseE = -53452,
    /// <summary>
    /// In proto3, value 0 must be the first one specified
    /// SPARSE_F = 0;
    /// </summary>
    [pbr::OriginalName("SPARSE_G")] SparseG = 2,
  }

  /// <summary>
  /// Test an enum that has multiple values with the same number.
  /// </summary>
  public enum TestEnumWithDupValueNoEvents {
    [pbr::OriginalName("TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED_NO_EVENTS")] TestEnumWithDupValueUnspecifiedNoEvents = 0,
    [pbr::OriginalName("FOO1_NO_EVENTS")] Foo1NoEvents = 1,
    [pbr::OriginalName("BAR1_NO_EVENTS")] Bar1NoEvents = 2,
    [pbr::OriginalName("BAZ_NO_EVENTS")] BazNoEvents = 3,
    [pbr::OriginalName("FOO2_NO_EVENTS", PreferredAlias = false)] Foo2NoEvents = 1,
    [pbr::OriginalName("BAR2_NO_EVENTS", PreferredAlias = false)] Bar2NoEvents = 2,
  }

  /// <summary>
  /// Test an enum with large, unordered values.
  /// </summary>
  public enum TestSparseEnumNoEvents {
    [pbr::OriginalName("TEST_SPARSE_ENUM_UNSPECIFIED_NO_EVENTS")] TestSparseEnumUnspecifiedNoEvents = 0,
    [pbr::OriginalName("SPARSE_A_NO_EVENTS")] SparseANoEvents = 123,
    [pbr::OriginalName("SPARSE_B_NO_EVENTS")] SparseBNoEvents = 62374,
    [pbr::OriginalName("SPARSE_C_NO_EVENTS")] SparseCNoEvents = 12589234,
    [pbr::OriginalName("SPARSE_D_NO_EVENTS")] SparseDNoEvents = -15,
    [pbr::OriginalName("SPARSE_E_NO_EVENTS")] SparseENoEvents = -53452,
    /// <summary>
    /// In proto3, value 0 must be the first one specified
    /// SPARSE_F = 0;
    /// </summary>
    [pbr::OriginalName("SPARSE_G_NO_EVENTS")] SparseGNoEvents = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// This proto includes every type of field in both singular and repeated
  /// forms.
  /// </summary>
  public sealed partial class TestAllTypes : zpr::EventRegistry<TestAllTypes>, pb::IMessage<TestAllTypes> {
    private static readonly pb::MessageParser<TestAllTypes> _parser = new pb::MessageParser<TestAllTypes>(() => new TestAllTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestAllTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes() {
      OnConstruction();
      repeatedInt32_.SetContext(Context, 31);
      repeatedInt64_.SetContext(Context, 32);
      repeatedUint32_.SetContext(Context, 33);
      repeatedUint64_.SetContext(Context, 34);
      repeatedSint32_.SetContext(Context, 35);
      repeatedSint64_.SetContext(Context, 36);
      repeatedFixed32_.SetContext(Context, 37);
      repeatedFixed64_.SetContext(Context, 38);
      repeatedSfixed32_.SetContext(Context, 39);
      repeatedSfixed64_.SetContext(Context, 40);
      repeatedFloat_.SetContext(Context, 41);
      repeatedDouble_.SetContext(Context, 42);
      repeatedBool_.SetContext(Context, 43);
      repeatedString_.SetContext(Context, 44);
      repeatedBytes_.SetContext(Context, 45);
      repeatedNestedMessage_.SetContext(Context, 48);
      repeatedForeignMessage_.SetContext(Context, 49);
      repeatedImportMessage_.SetContext(Context, 50);
      repeatedImportNoEvents_.SetContext(Context, 55);
      repeatedTestAllTypesMessage_.SetContext(Context, 56);
      repeatedTestAllTypesNoEventsMessage_.SetContext(Context, 57);
      repeatedNestedEnum_.SetContext(Context, 51);
      repeatedForeignEnum_.SetContext(Context, 52);
      repeatedImportEnum_.SetContext(Context, 53);
      mapInt32Int32_.SetContext(Context, 115);
      mapInt64Int64_.SetContext(Context, 116);
      mapUint32Uint32_.SetContext(Context, 117);
      mapUint64Uint64_.SetContext(Context, 118);
      mapSint32Sint32_.SetContext(Context, 119);
      mapSint64Sint64_.SetContext(Context, 120);
      mapFixed32Fixed32_.SetContext(Context, 121);
      mapFixed64Fixed64_.SetContext(Context, 122);
      mapSfixed32Sfixed32_.SetContext(Context, 123);
      mapSfixed64Sfixed64_.SetContext(Context, 124);
      mapInt32Float_.SetContext(Context, 125);
      mapInt32Double_.SetContext(Context, 126);
      mapBoolBool_.SetContext(Context, 127);
      mapStringString_.SetContext(Context, 128);
      mapInt32Bytes_.SetContext(Context, 129);
      mapInt32Enum_.SetContext(Context, 130);
      mapInt32ForeignMessage_.SetContext(Context, 131);
      mapInt32ForeignNoEventsMessage_.SetContext(Context, 132);
      mapInt32TestAllTypesMessage_.SetContext(Context, 133);
      mapInt32TestAllTypesNoEventsMessage_.SetContext(Context, 134);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes(TestAllTypes other) : this() {
      singleInt32_ = other.singleInt32_;
      singleInt64_ = other.singleInt64_;
      singleUint32_ = other.singleUint32_;
      singleUint64_ = other.singleUint64_;
      singleSint32_ = other.singleSint32_;
      singleSint64_ = other.singleSint64_;
      singleFixed32_ = other.singleFixed32_;
      singleFixed64_ = other.singleFixed64_;
      singleSfixed32_ = other.singleSfixed32_;
      singleSfixed64_ = other.singleSfixed64_;
      singleFloat_ = other.singleFloat_;
      singleDouble_ = other.singleDouble_;
      singleBool_ = other.singleBool_;
      singleString_ = other.singleString_;
      singleBytes_ = other.singleBytes_;
      singleNestedMessage_ = other.singleNestedMessage_ != null ? other.SingleNestedMessage.Clone() : null;
      singleForeignMessage_ = other.singleForeignMessage_ != null ? other.SingleForeignMessage.Clone() : null;
      singleImportMessage_ = other.singleImportMessage_ != null ? other.SingleImportMessage.Clone() : null;
      singleNestedEnum_ = other.singleNestedEnum_;
      singleForeignEnum_ = other.singleForeignEnum_;
      singleImportEnum_ = other.singleImportEnum_;
      singlePublicImportMessage_ = other.singlePublicImportMessage_ != null ? other.SinglePublicImportMessage.Clone() : null;
      repeatedInt32_ = new EventRepeatedField<int>(repeatedInt32DataConverter, other.RepeatedInt32.Clone());
      repeatedInt32_.SetContext(Context, 31);
      repeatedInt64_ = new EventRepeatedField<long>(repeatedInt64DataConverter, other.RepeatedInt64.Clone());
      repeatedInt64_.SetContext(Context, 32);
      repeatedUint32_ = new EventRepeatedField<uint>(repeatedUint32DataConverter, other.RepeatedUint32.Clone());
      repeatedUint32_.SetContext(Context, 33);
      repeatedUint64_ = new EventRepeatedField<ulong>(repeatedUint64DataConverter, other.RepeatedUint64.Clone());
      repeatedUint64_.SetContext(Context, 34);
      repeatedSint32_ = new EventRepeatedField<int>(repeatedSint32DataConverter, other.RepeatedSint32.Clone());
      repeatedSint32_.SetContext(Context, 35);
      repeatedSint64_ = new EventRepeatedField<long>(repeatedSint64DataConverter, other.RepeatedSint64.Clone());
      repeatedSint64_.SetContext(Context, 36);
      repeatedFixed32_ = new EventRepeatedField<uint>(repeatedFixed32DataConverter, other.RepeatedFixed32.Clone());
      repeatedFixed32_.SetContext(Context, 37);
      repeatedFixed64_ = new EventRepeatedField<ulong>(repeatedFixed64DataConverter, other.RepeatedFixed64.Clone());
      repeatedFixed64_.SetContext(Context, 38);
      repeatedSfixed32_ = new EventRepeatedField<int>(repeatedSfixed32DataConverter, other.RepeatedSfixed32.Clone());
      repeatedSfixed32_.SetContext(Context, 39);
      repeatedSfixed64_ = new EventRepeatedField<long>(repeatedSfixed64DataConverter, other.RepeatedSfixed64.Clone());
      repeatedSfixed64_.SetContext(Context, 40);
      repeatedFloat_ = new EventRepeatedField<float>(repeatedFloatDataConverter, other.RepeatedFloat.Clone());
      repeatedFloat_.SetContext(Context, 41);
      repeatedDouble_ = new EventRepeatedField<double>(repeatedDoubleDataConverter, other.RepeatedDouble.Clone());
      repeatedDouble_.SetContext(Context, 42);
      repeatedBool_ = new EventRepeatedField<bool>(repeatedBoolDataConverter, other.RepeatedBool.Clone());
      repeatedBool_.SetContext(Context, 43);
      repeatedString_ = new EventRepeatedField<string>(repeatedStringDataConverter, other.RepeatedString.Clone());
      repeatedString_.SetContext(Context, 44);
      repeatedBytes_ = new EventRepeatedField<pb::ByteString>(repeatedBytesDataConverter, other.RepeatedBytes.Clone());
      repeatedBytes_.SetContext(Context, 45);
      repeatedNestedMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage>(repeatedNestedMessageDataConverter, other.RepeatedNestedMessage.Clone(), true);
      repeatedNestedMessage_.SetContext(Context, 48);
      repeatedForeignMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage>(repeatedForeignMessageDataConverter, other.RepeatedForeignMessage.Clone(), true);
      repeatedForeignMessage_.SetContext(Context, 49);
      repeatedImportMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessage>(repeatedImportMessageDataConverter, other.RepeatedImportMessage.Clone(), true);
      repeatedImportMessage_.SetContext(Context, 50);
      repeatedImportNoEvents_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents>(repeatedImportNoEventsDataConverter, other.RepeatedImportNoEvents.Clone(), true);
      repeatedImportNoEvents_.SetContext(Context, 55);
      repeatedTestAllTypesMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes>(repeatedTestAllTypesMessageDataConverter, other.RepeatedTestAllTypesMessage.Clone(), true);
      repeatedTestAllTypesMessage_.SetContext(Context, 56);
      repeatedTestAllTypesNoEventsMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(repeatedTestAllTypesNoEventsMessageDataConverter, other.RepeatedTestAllTypesNoEventsMessage.Clone(), true);
      repeatedTestAllTypesNoEventsMessage_.SetContext(Context, 57);
      repeatedNestedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum>(repeatedNestedEnumDataConverter, other.RepeatedNestedEnum.Clone());
      repeatedNestedEnum_.SetContext(Context, 51);
      repeatedForeignEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(repeatedForeignEnumDataConverter, other.RepeatedForeignEnum.Clone());
      repeatedForeignEnum_.SetContext(Context, 52);
      repeatedImportEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportEnum>(repeatedImportEnumDataConverter, other.RepeatedImportEnum.Clone());
      repeatedImportEnum_.SetContext(Context, 53);
      mapInt32Int32_ = new EventMapField<int, int>(mapInt32Int32MapConverter, other.mapInt32Int32_.Clone());
      mapInt32Int32_.SetContext(Context, 115);
      mapInt64Int64_ = new EventMapField<long, long>(mapInt64Int64MapConverter, other.mapInt64Int64_.Clone());
      mapInt64Int64_.SetContext(Context, 116);
      mapUint32Uint32_ = new EventMapField<uint, uint>(mapUint32Uint32MapConverter, other.mapUint32Uint32_.Clone());
      mapUint32Uint32_.SetContext(Context, 117);
      mapUint64Uint64_ = new EventMapField<ulong, ulong>(mapUint64Uint64MapConverter, other.mapUint64Uint64_.Clone());
      mapUint64Uint64_.SetContext(Context, 118);
      mapSint32Sint32_ = new EventMapField<int, int>(mapSint32Sint32MapConverter, other.mapSint32Sint32_.Clone());
      mapSint32Sint32_.SetContext(Context, 119);
      mapSint64Sint64_ = new EventMapField<long, long>(mapSint64Sint64MapConverter, other.mapSint64Sint64_.Clone());
      mapSint64Sint64_.SetContext(Context, 120);
      mapFixed32Fixed32_ = new EventMapField<uint, uint>(mapFixed32Fixed32MapConverter, other.mapFixed32Fixed32_.Clone());
      mapFixed32Fixed32_.SetContext(Context, 121);
      mapFixed64Fixed64_ = new EventMapField<ulong, ulong>(mapFixed64Fixed64MapConverter, other.mapFixed64Fixed64_.Clone());
      mapFixed64Fixed64_.SetContext(Context, 122);
      mapSfixed32Sfixed32_ = new EventMapField<int, int>(mapSfixed32Sfixed32MapConverter, other.mapSfixed32Sfixed32_.Clone());
      mapSfixed32Sfixed32_.SetContext(Context, 123);
      mapSfixed64Sfixed64_ = new EventMapField<long, long>(mapSfixed64Sfixed64MapConverter, other.mapSfixed64Sfixed64_.Clone());
      mapSfixed64Sfixed64_.SetContext(Context, 124);
      mapInt32Float_ = new EventMapField<int, float>(mapInt32FloatMapConverter, other.mapInt32Float_.Clone());
      mapInt32Float_.SetContext(Context, 125);
      mapInt32Double_ = new EventMapField<int, double>(mapInt32DoubleMapConverter, other.mapInt32Double_.Clone());
      mapInt32Double_.SetContext(Context, 126);
      mapBoolBool_ = new EventMapField<bool, bool>(mapBoolBoolMapConverter, other.mapBoolBool_.Clone());
      mapBoolBool_.SetContext(Context, 127);
      mapStringString_ = new EventMapField<string, string>(mapStringStringMapConverter, other.mapStringString_.Clone());
      mapStringString_.SetContext(Context, 128);
      mapInt32Bytes_ = new EventMapField<int, pb::ByteString>(mapInt32BytesMapConverter, other.mapInt32Bytes_.Clone());
      mapInt32Bytes_.SetContext(Context, 129);
      mapInt32Enum_ = new EventMapField<int, global::Google.Protobuf.TestProtos.MapEnum>(mapInt32EnumMapConverter, other.mapInt32Enum_.Clone());
      mapInt32Enum_.SetContext(Context, 130);
      mapInt32ForeignMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>(mapInt32ForeignMessageMapConverter, other.mapInt32ForeignMessage_.Clone(), true);
      mapInt32ForeignMessage_.SetContext(Context, 131);
      mapInt32ForeignNoEventsMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>(mapInt32ForeignNoEventsMessageMapConverter, other.mapInt32ForeignNoEventsMessage_.Clone(), true);
      mapInt32ForeignNoEventsMessage_.SetContext(Context, 132);
      mapInt32TestAllTypesMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>(mapInt32TestAllTypesMessageMapConverter, other.mapInt32TestAllTypesMessage_.Clone(), true);
      mapInt32TestAllTypesMessage_.SetContext(Context, 133);
      mapInt32TestAllTypesNoEventsMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(mapInt32TestAllTypesNoEventsMessageMapConverter, other.mapInt32TestAllTypesNoEventsMessage_.Clone(), true);
      mapInt32TestAllTypesNoEventsMessage_.SetContext(Context, 134);
      allTypes_ = other.allTypes_ != null ? other.AllTypes.Clone() : null;
      allTypesNoEvents_ = other.allTypesNoEvents_ != null ? other.AllTypesNoEvents.Clone() : null;
      switch (other.OneofFieldCase) {
        case OneofFieldOneofCase.OneofUint32:
          OneofUint32 = other.OneofUint32;
          break;
        case OneofFieldOneofCase.OneofNestedMessage:
          OneofNestedMessage = other.OneofNestedMessage.Clone();
          break;
        case OneofFieldOneofCase.OneofString:
          OneofString = other.OneofString;
          break;
        case OneofFieldOneofCase.OneofBytes:
          OneofBytes = other.OneofBytes;
          break;
        case OneofFieldOneofCase.OneofForeignMessage:
          OneofForeignMessage = other.OneofForeignMessage.Clone();
          break;
        case OneofFieldOneofCase.OneofForeignMessageNoEvents:
          OneofForeignMessageNoEvents = other.OneofForeignMessageNoEvents.Clone();
          break;
        case OneofFieldOneofCase.OneofAllTypes:
          OneofAllTypes = other.OneofAllTypes.Clone();
          break;
        case OneofFieldOneofCase.OneofAllTypesNoEvents:
          OneofAllTypesNoEvents = other.OneofAllTypesNoEvents.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes Clone() {
      return new TestAllTypes(this);
    }

    public static bool IsEventSourced = true;

    protected override TestAllTypes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      repeatedInt32_.SetContext(Context, 31);
      repeatedInt64_.SetContext(Context, 32);
      repeatedUint32_.SetContext(Context, 33);
      repeatedUint64_.SetContext(Context, 34);
      repeatedSint32_.SetContext(Context, 35);
      repeatedSint64_.SetContext(Context, 36);
      repeatedFixed32_.SetContext(Context, 37);
      repeatedFixed64_.SetContext(Context, 38);
      repeatedSfixed32_.SetContext(Context, 39);
      repeatedSfixed64_.SetContext(Context, 40);
      repeatedFloat_.SetContext(Context, 41);
      repeatedDouble_.SetContext(Context, 42);
      repeatedBool_.SetContext(Context, 43);
      repeatedString_.SetContext(Context, 44);
      repeatedBytes_.SetContext(Context, 45);
      repeatedNestedMessage_.SetContext(Context, 48);
      repeatedForeignMessage_.SetContext(Context, 49);
      repeatedImportMessage_.SetContext(Context, 50);
      repeatedImportNoEvents_.SetContext(Context, 55);
      repeatedTestAllTypesMessage_.SetContext(Context, 56);
      repeatedTestAllTypesNoEventsMessage_.SetContext(Context, 57);
      repeatedNestedEnum_.SetContext(Context, 51);
      repeatedForeignEnum_.SetContext(Context, 52);
      repeatedImportEnum_.SetContext(Context, 53);
      mapInt32Int32_.SetContext(Context, 115);
      mapInt64Int64_.SetContext(Context, 116);
      mapUint32Uint32_.SetContext(Context, 117);
      mapUint64Uint64_.SetContext(Context, 118);
      mapSint32Sint32_.SetContext(Context, 119);
      mapSint64Sint64_.SetContext(Context, 120);
      mapFixed32Fixed32_.SetContext(Context, 121);
      mapFixed64Fixed64_.SetContext(Context, 122);
      mapSfixed32Sfixed32_.SetContext(Context, 123);
      mapSfixed64Sfixed64_.SetContext(Context, 124);
      mapInt32Float_.SetContext(Context, 125);
      mapInt32Double_.SetContext(Context, 126);
      mapBoolBool_.SetContext(Context, 127);
      mapStringString_.SetContext(Context, 128);
      mapInt32Bytes_.SetContext(Context, 129);
      mapInt32Enum_.SetContext(Context, 130);
      mapInt32ForeignMessage_.SetContext(Context, 131);
      mapInt32ForeignNoEventsMessage_.SetContext(Context, 132);
      mapInt32TestAllTypesMessage_.SetContext(Context, 133);
      mapInt32TestAllTypesNoEventsMessage_.SetContext(Context, 134);
    }
    /// <summary>Field number for the "single_int32" field.</summary>
    public const int SingleInt32FieldNumber = 1;
    private int singleInt32_;
    /// <summary>
    /// Singular
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleInt32 {
      get { return singleInt32_; }
      set {
        #if !DISABLE_EVENTS
        if(singleInt32_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        singleInt32_ = value;
      }
    }

    /// <summary>Field number for the "single_int64" field.</summary>
    public const int SingleInt64FieldNumber = 2;
    private long singleInt64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleInt64 {
      get { return singleInt64_; }
      set {
        #if !DISABLE_EVENTS
        if(singleInt64_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        singleInt64_ = value;
      }
    }

    /// <summary>Field number for the "single_uint32" field.</summary>
    public const int SingleUint32FieldNumber = 3;
    private uint singleUint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleUint32 {
      get { return singleUint32_; }
      set {
        #if !DISABLE_EVENTS
        if(singleUint32_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = value });
        }
        #endif
        singleUint32_ = value;
      }
    }

    /// <summary>Field number for the "single_uint64" field.</summary>
    public const int SingleUint64FieldNumber = 4;
    private ulong singleUint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleUint64 {
      get { return singleUint64_; }
      set {
        #if !DISABLE_EVENTS
        if(singleUint64_ != value) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { U64 = value });
        }
        #endif
        singleUint64_ = value;
      }
    }

    /// <summary>Field number for the "single_sint32" field.</summary>
    public const int SingleSint32FieldNumber = 5;
    private int singleSint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSint32 {
      get { return singleSint32_; }
      set {
        #if !DISABLE_EVENTS
        if(singleSint32_ != value) {
          Context.AddSetEvent(5, new zpr.EventSource.EventContent { SI32 = value });
        }
        #endif
        singleSint32_ = value;
      }
    }

    /// <summary>Field number for the "single_sint64" field.</summary>
    public const int SingleSint64FieldNumber = 6;
    private long singleSint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSint64 {
      get { return singleSint64_; }
      set {
        #if !DISABLE_EVENTS
        if(singleSint64_ != value) {
          Context.AddSetEvent(6, new zpr.EventSource.EventContent { SI64 = value });
        }
        #endif
        singleSint64_ = value;
      }
    }

    /// <summary>Field number for the "single_fixed32" field.</summary>
    public const int SingleFixed32FieldNumber = 7;
    private uint singleFixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleFixed32 {
      get { return singleFixed32_; }
      set {
        #if !DISABLE_EVENTS
        if(singleFixed32_ != value) {
          Context.AddSetEvent(7, new zpr.EventSource.EventContent { F32 = value });
        }
        #endif
        singleFixed32_ = value;
      }
    }

    /// <summary>Field number for the "single_fixed64" field.</summary>
    public const int SingleFixed64FieldNumber = 8;
    private ulong singleFixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleFixed64 {
      get { return singleFixed64_; }
      set {
        #if !DISABLE_EVENTS
        if(singleFixed64_ != value) {
          Context.AddSetEvent(8, new zpr.EventSource.EventContent { F64 = value });
        }
        #endif
        singleFixed64_ = value;
      }
    }

    /// <summary>Field number for the "single_sfixed32" field.</summary>
    public const int SingleSfixed32FieldNumber = 9;
    private int singleSfixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSfixed32 {
      get { return singleSfixed32_; }
      set {
        #if !DISABLE_EVENTS
        if(singleSfixed32_ != value) {
          Context.AddSetEvent(9, new zpr.EventSource.EventContent { SF32 = value });
        }
        #endif
        singleSfixed32_ = value;
      }
    }

    /// <summary>Field number for the "single_sfixed64" field.</summary>
    public const int SingleSfixed64FieldNumber = 10;
    private long singleSfixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSfixed64 {
      get { return singleSfixed64_; }
      set {
        #if !DISABLE_EVENTS
        if(singleSfixed64_ != value) {
          Context.AddSetEvent(10, new zpr.EventSource.EventContent { SF64 = value });
        }
        #endif
        singleSfixed64_ = value;
      }
    }

    /// <summary>Field number for the "single_float" field.</summary>
    public const int SingleFloatFieldNumber = 11;
    private float singleFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SingleFloat {
      get { return singleFloat_; }
      set {
        #if !DISABLE_EVENTS
        if(singleFloat_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        singleFloat_ = value;
      }
    }

    /// <summary>Field number for the "single_double" field.</summary>
    public const int SingleDoubleFieldNumber = 12;
    private double singleDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SingleDouble {
      get { return singleDouble_; }
      set {
        #if !DISABLE_EVENTS
        if(singleDouble_ != value) {
          Context.AddSetEvent(12, new zpr.EventSource.EventContent { R64 = value });
        }
        #endif
        singleDouble_ = value;
      }
    }

    /// <summary>Field number for the "single_bool" field.</summary>
    public const int SingleBoolFieldNumber = 13;
    private bool singleBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SingleBool {
      get { return singleBool_; }
      set {
        #if !DISABLE_EVENTS
        if(singleBool_ != value) {
          Context.AddSetEvent(13, new zpr.EventSource.EventContent { BoolData = value });
        }
        #endif
        singleBool_ = value;
      }
    }

    /// <summary>Field number for the "single_string" field.</summary>
    public const int SingleStringFieldNumber = 14;
    private string singleString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingleString {
      get { return singleString_; }
      set {
        #if !DISABLE_EVENTS
        if(singleString_ != value) {
          Context.AddSetEvent(14, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        singleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_bytes" field.</summary>
    public const int SingleBytesFieldNumber = 15;
    private pb::ByteString singleBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SingleBytes {
      get { return singleBytes_; }
      set {
        #if !DISABLE_EVENTS
        if(singleBytes_ != value) {
          Context.AddSetEvent(15, new zpr.EventSource.EventContent { ByteData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        singleBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_nested_message" field.</summary>
    public const int SingleNestedMessageFieldNumber = 18;
    private global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage singleNestedMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage SingleNestedMessage {
      get { return singleNestedMessage_; }
      set {
        if(singleNestedMessage_ != null) singleNestedMessage_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 18));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(singleNestedMessage_)) {
          Context.AddSetEvent(18, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        singleNestedMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_foreign_message" field.</summary>
    public const int SingleForeignMessageFieldNumber = 19;
    private global::Google.Protobuf.TestProtos.ForeignMessage singleForeignMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessage SingleForeignMessage {
      get { return singleForeignMessage_; }
      set {
        if(singleForeignMessage_ != null) singleForeignMessage_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 19));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(singleForeignMessage_)) {
          Context.AddSetEvent(19, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        singleForeignMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_import_message" field.</summary>
    public const int SingleImportMessageFieldNumber = 20;
    private global::Google.Protobuf.TestProtos.ImportMessage singleImportMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ImportMessage SingleImportMessage {
      get { return singleImportMessage_; }
      set {
        if(singleImportMessage_ != null) singleImportMessage_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 20));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(singleImportMessage_)) {
          Context.AddSetEvent(20, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        singleImportMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_nested_enum" field.</summary>
    public const int SingleNestedEnumFieldNumber = 21;
    private global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum singleNestedEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum SingleNestedEnum {
      get { return singleNestedEnum_; }
      set {
        #if !DISABLE_EVENTS
        if(singleNestedEnum_ != value) {
          Context.AddSetEvent(21, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        singleNestedEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_foreign_enum" field.</summary>
    public const int SingleForeignEnumFieldNumber = 22;
    private global::Google.Protobuf.TestProtos.ForeignEnum singleForeignEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignEnum SingleForeignEnum {
      get { return singleForeignEnum_; }
      set {
        #if !DISABLE_EVENTS
        if(singleForeignEnum_ != value) {
          Context.AddSetEvent(22, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        singleForeignEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_import_enum" field.</summary>
    public const int SingleImportEnumFieldNumber = 23;
    private global::Google.Protobuf.TestProtos.ImportEnum singleImportEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ImportEnum SingleImportEnum {
      get { return singleImportEnum_; }
      set {
        #if !DISABLE_EVENTS
        if(singleImportEnum_ != value) {
          Context.AddSetEvent(23, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        singleImportEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_public_import_message" field.</summary>
    public const int SinglePublicImportMessageFieldNumber = 26;
    private global::Google.Protobuf.TestProtos.PublicImportMessage singlePublicImportMessage_;
    /// <summary>
    /// Defined in unittest_import_public.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.PublicImportMessage SinglePublicImportMessage {
      get { return singlePublicImportMessage_; }
      set {
        if(singlePublicImportMessage_ != null) singlePublicImportMessage_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 26));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(singlePublicImportMessage_)) {
          Context.AddSetEvent(26, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        singlePublicImportMessage_ = value;
      }
    }

    /// <summary>Field number for the "repeated_int32" field.</summary>
    public const int RepeatedInt32FieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_repeatedInt32_codec
        = pb::FieldCodec.ForInt32(250);
    public class RepeatedInt32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static RepeatedInt32DataConverter repeatedInt32DataConverter = new RepeatedInt32DataConverter();
    private readonly EventRepeatedField<int> repeatedInt32_ = new EventRepeatedField<int>(repeatedInt32DataConverter);
    /// <summary>
    /// Repeated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> RepeatedInt32 {
      get { return repeatedInt32_; }
    }

    /// <summary>Field number for the "repeated_int64" field.</summary>
    public const int RepeatedInt64FieldNumber = 32;
    private static readonly pb::FieldCodec<long> _repeated_repeatedInt64_codec
        = pb::FieldCodec.ForInt64(258);
    public class RepeatedInt64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { I64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.I64;
      }
    }
    private static RepeatedInt64DataConverter repeatedInt64DataConverter = new RepeatedInt64DataConverter();
    private readonly EventRepeatedField<long> repeatedInt64_ = new EventRepeatedField<long>(repeatedInt64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> RepeatedInt64 {
      get { return repeatedInt64_; }
    }

    /// <summary>Field number for the "repeated_uint32" field.</summary>
    public const int RepeatedUint32FieldNumber = 33;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedUint32_codec
        = pb::FieldCodec.ForUInt32(266);
    public class RepeatedUint32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { U32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.U32;
      }
    }
    private static RepeatedUint32DataConverter repeatedUint32DataConverter = new RepeatedUint32DataConverter();
    private readonly EventRepeatedField<uint> repeatedUint32_ = new EventRepeatedField<uint>(repeatedUint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> RepeatedUint32 {
      get { return repeatedUint32_; }
    }

    /// <summary>Field number for the "repeated_uint64" field.</summary>
    public const int RepeatedUint64FieldNumber = 34;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedUint64_codec
        = pb::FieldCodec.ForUInt64(274);
    public class RepeatedUint64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { U64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.U64;
      }
    }
    private static RepeatedUint64DataConverter repeatedUint64DataConverter = new RepeatedUint64DataConverter();
    private readonly EventRepeatedField<ulong> repeatedUint64_ = new EventRepeatedField<ulong>(repeatedUint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> RepeatedUint64 {
      get { return repeatedUint64_; }
    }

    /// <summary>Field number for the "repeated_sint32" field.</summary>
    public const int RepeatedSint32FieldNumber = 35;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSint32_codec
        = pb::FieldCodec.ForSInt32(282);
    public class RepeatedSint32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SI32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SI32;
      }
    }
    private static RepeatedSint32DataConverter repeatedSint32DataConverter = new RepeatedSint32DataConverter();
    private readonly EventRepeatedField<int> repeatedSint32_ = new EventRepeatedField<int>(repeatedSint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> RepeatedSint32 {
      get { return repeatedSint32_; }
    }

    /// <summary>Field number for the "repeated_sint64" field.</summary>
    public const int RepeatedSint64FieldNumber = 36;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSint64_codec
        = pb::FieldCodec.ForSInt64(290);
    public class RepeatedSint64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SI64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SI64;
      }
    }
    private static RepeatedSint64DataConverter repeatedSint64DataConverter = new RepeatedSint64DataConverter();
    private readonly EventRepeatedField<long> repeatedSint64_ = new EventRepeatedField<long>(repeatedSint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> RepeatedSint64 {
      get { return repeatedSint64_; }
    }

    /// <summary>Field number for the "repeated_fixed32" field.</summary>
    public const int RepeatedFixed32FieldNumber = 37;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedFixed32_codec
        = pb::FieldCodec.ForFixed32(298);
    public class RepeatedFixed32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { F32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.F32;
      }
    }
    private static RepeatedFixed32DataConverter repeatedFixed32DataConverter = new RepeatedFixed32DataConverter();
    private readonly EventRepeatedField<uint> repeatedFixed32_ = new EventRepeatedField<uint>(repeatedFixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> RepeatedFixed32 {
      get { return repeatedFixed32_; }
    }

    /// <summary>Field number for the "repeated_fixed64" field.</summary>
    public const int RepeatedFixed64FieldNumber = 38;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedFixed64_codec
        = pb::FieldCodec.ForFixed64(306);
    public class RepeatedFixed64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { F64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.F64;
      }
    }
    private static RepeatedFixed64DataConverter repeatedFixed64DataConverter = new RepeatedFixed64DataConverter();
    private readonly EventRepeatedField<ulong> repeatedFixed64_ = new EventRepeatedField<ulong>(repeatedFixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> RepeatedFixed64 {
      get { return repeatedFixed64_; }
    }

    /// <summary>Field number for the "repeated_sfixed32" field.</summary>
    public const int RepeatedSfixed32FieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(314);
    public class RepeatedSfixed32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SF32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SF32;
      }
    }
    private static RepeatedSfixed32DataConverter repeatedSfixed32DataConverter = new RepeatedSfixed32DataConverter();
    private readonly EventRepeatedField<int> repeatedSfixed32_ = new EventRepeatedField<int>(repeatedSfixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> RepeatedSfixed32 {
      get { return repeatedSfixed32_; }
    }

    /// <summary>Field number for the "repeated_sfixed64" field.</summary>
    public const int RepeatedSfixed64FieldNumber = 40;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(322);
    public class RepeatedSfixed64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SF64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SF64;
      }
    }
    private static RepeatedSfixed64DataConverter repeatedSfixed64DataConverter = new RepeatedSfixed64DataConverter();
    private readonly EventRepeatedField<long> repeatedSfixed64_ = new EventRepeatedField<long>(repeatedSfixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> RepeatedSfixed64 {
      get { return repeatedSfixed64_; }
    }

    /// <summary>Field number for the "repeated_float" field.</summary>
    public const int RepeatedFloatFieldNumber = 41;
    private static readonly pb::FieldCodec<float> _repeated_repeatedFloat_codec
        = pb::FieldCodec.ForFloat(330);
    public class RepeatedFloatDataConverter: EventDataConverter<float> {
      public override zpr.EventSource.EventContent GetEventData(float data) {
        return new zpr.EventSource.EventContent() { R32 = data };
      }
      public override float GetItem(zpr.EventSource.EventContent data) {
        return data.R32;
      }
    }
    private static RepeatedFloatDataConverter repeatedFloatDataConverter = new RepeatedFloatDataConverter();
    private readonly EventRepeatedField<float> repeatedFloat_ = new EventRepeatedField<float>(repeatedFloatDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<float> RepeatedFloat {
      get { return repeatedFloat_; }
    }

    /// <summary>Field number for the "repeated_double" field.</summary>
    public const int RepeatedDoubleFieldNumber = 42;
    private static readonly pb::FieldCodec<double> _repeated_repeatedDouble_codec
        = pb::FieldCodec.ForDouble(338);
    public class RepeatedDoubleDataConverter: EventDataConverter<double> {
      public override zpr.EventSource.EventContent GetEventData(double data) {
        return new zpr.EventSource.EventContent() { R64 = data };
      }
      public override double GetItem(zpr.EventSource.EventContent data) {
        return data.R64;
      }
    }
    private static RepeatedDoubleDataConverter repeatedDoubleDataConverter = new RepeatedDoubleDataConverter();
    private readonly EventRepeatedField<double> repeatedDouble_ = new EventRepeatedField<double>(repeatedDoubleDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<double> RepeatedDouble {
      get { return repeatedDouble_; }
    }

    /// <summary>Field number for the "repeated_bool" field.</summary>
    public const int RepeatedBoolFieldNumber = 43;
    private static readonly pb::FieldCodec<bool> _repeated_repeatedBool_codec
        = pb::FieldCodec.ForBool(346);
    public class RepeatedBoolDataConverter: EventDataConverter<bool> {
      public override zpr.EventSource.EventContent GetEventData(bool data) {
        return new zpr.EventSource.EventContent() { BoolData = data };
      }
      public override bool GetItem(zpr.EventSource.EventContent data) {
        return data.BoolData;
      }
    }
    private static RepeatedBoolDataConverter repeatedBoolDataConverter = new RepeatedBoolDataConverter();
    private readonly EventRepeatedField<bool> repeatedBool_ = new EventRepeatedField<bool>(repeatedBoolDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<bool> RepeatedBool {
      get { return repeatedBool_; }
    }

    /// <summary>Field number for the "repeated_string" field.</summary>
    public const int RepeatedStringFieldNumber = 44;
    private static readonly pb::FieldCodec<string> _repeated_repeatedString_codec
        = pb::FieldCodec.ForString(354);
    public class RepeatedStringDataConverter: EventDataConverter<string> {
      public override zpr.EventSource.EventContent GetEventData(string data) {
        return new zpr.EventSource.EventContent() { StringData = data };
      }
      public override string GetItem(zpr.EventSource.EventContent data) {
        return data.StringData;
      }
    }
    private static RepeatedStringDataConverter repeatedStringDataConverter = new RepeatedStringDataConverter();
    private readonly EventRepeatedField<string> repeatedString_ = new EventRepeatedField<string>(repeatedStringDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<string> RepeatedString {
      get { return repeatedString_; }
    }

    /// <summary>Field number for the "repeated_bytes" field.</summary>
    public const int RepeatedBytesFieldNumber = 45;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_repeatedBytes_codec
        = pb::FieldCodec.ForBytes(362);
    public class RepeatedBytesDataConverter: EventDataConverter<pb::ByteString> {
      public override zpr.EventSource.EventContent GetEventData(pb::ByteString data) {
        return new zpr.EventSource.EventContent() { ByteData = data };
      }
      public override pb::ByteString GetItem(zpr.EventSource.EventContent data) {
        return data.ByteData;
      }
    }
    private static RepeatedBytesDataConverter repeatedBytesDataConverter = new RepeatedBytesDataConverter();
    private readonly EventRepeatedField<pb::ByteString> repeatedBytes_ = new EventRepeatedField<pb::ByteString>(repeatedBytesDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<pb::ByteString> RepeatedBytes {
      get { return repeatedBytes_; }
    }

    /// <summary>Field number for the "repeated_nested_message" field.</summary>
    public const int RepeatedNestedMessageFieldNumber = 48;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage> _repeated_repeatedNestedMessage_codec
        = pb::FieldCodec.ForMessage(386, global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser);
    public class RepeatedNestedMessageDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedNestedMessageDataConverter repeatedNestedMessageDataConverter = new RepeatedNestedMessageDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage> repeatedNestedMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage>(repeatedNestedMessageDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage> RepeatedNestedMessage {
      get { return repeatedNestedMessage_; }
    }

    /// <summary>Field number for the "repeated_foreign_message" field.</summary>
    public const int RepeatedForeignMessageFieldNumber = 49;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignMessage> _repeated_repeatedForeignMessage_codec
        = pb::FieldCodec.ForMessage(394, global::Google.Protobuf.TestProtos.ForeignMessage.Parser);
    public class RepeatedForeignMessageDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignMessage> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignMessage data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.ForeignMessage GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.ForeignMessage.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedForeignMessageDataConverter repeatedForeignMessageDataConverter = new RepeatedForeignMessageDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage> repeatedForeignMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage>(repeatedForeignMessageDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage> RepeatedForeignMessage {
      get { return repeatedForeignMessage_; }
    }

    /// <summary>Field number for the "repeated_import_message" field.</summary>
    public const int RepeatedImportMessageFieldNumber = 50;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportMessage> _repeated_repeatedImportMessage_codec
        = pb::FieldCodec.ForMessage(402, global::Google.Protobuf.TestProtos.ImportMessage.Parser);
    public class RepeatedImportMessageDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ImportMessage> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ImportMessage data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.ImportMessage GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.ImportMessage.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedImportMessageDataConverter repeatedImportMessageDataConverter = new RepeatedImportMessageDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessage> repeatedImportMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessage>(repeatedImportMessageDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessage> RepeatedImportMessage {
      get { return repeatedImportMessage_; }
    }

    /// <summary>Field number for the "repeated_import_no_events" field.</summary>
    public const int RepeatedImportNoEventsFieldNumber = 55;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> _repeated_repeatedImportNoEvents_codec
        = pb::FieldCodec.ForMessage(442, global::Google.Protobuf.TestProtos.ImportMessageNoEvents.Parser);
    public class RepeatedImportNoEventsDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ImportMessageNoEvents data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.ImportMessageNoEvents GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.ImportMessageNoEvents.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedImportNoEventsDataConverter repeatedImportNoEventsDataConverter = new RepeatedImportNoEventsDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> repeatedImportNoEvents_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents>(repeatedImportNoEventsDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> RepeatedImportNoEvents {
      get { return repeatedImportNoEvents_; }
    }

    /// <summary>Field number for the "repeated_test_all_types_message" field.</summary>
    public const int RepeatedTestAllTypesMessageFieldNumber = 56;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypes> _repeated_repeatedTestAllTypesMessage_codec
        = pb::FieldCodec.ForMessage(450, global::Google.Protobuf.TestProtos.TestAllTypes.Parser);
    public class RepeatedTestAllTypesMessageDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.TestAllTypes> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.TestAllTypes data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.TestAllTypes GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.TestAllTypes.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedTestAllTypesMessageDataConverter repeatedTestAllTypesMessageDataConverter = new RepeatedTestAllTypesMessageDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes> repeatedTestAllTypesMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes>(repeatedTestAllTypesMessageDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes> RepeatedTestAllTypesMessage {
      get { return repeatedTestAllTypesMessage_; }
    }

    /// <summary>Field number for the "repeated_test_all_types_no_events_message" field.</summary>
    public const int RepeatedTestAllTypesNoEventsMessageFieldNumber = 57;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> _repeated_repeatedTestAllTypesNoEventsMessage_codec
        = pb::FieldCodec.ForMessage(458, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser);
    public class RepeatedTestAllTypesNoEventsMessageDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.TestAllTypesNoEvents data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.TestAllTypesNoEvents GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedTestAllTypesNoEventsMessageDataConverter repeatedTestAllTypesNoEventsMessageDataConverter = new RepeatedTestAllTypesNoEventsMessageDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> repeatedTestAllTypesNoEventsMessage_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(repeatedTestAllTypesNoEventsMessageDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> RepeatedTestAllTypesNoEventsMessage {
      get { return repeatedTestAllTypesNoEventsMessage_; }
    }

    /// <summary>Field number for the "repeated_nested_enum" field.</summary>
    public const int RepeatedNestedEnumFieldNumber = 51;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum> _repeated_repeatedNestedEnum_codec
        = pb::FieldCodec.ForEnum(410, x => (int) x, x => (global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum) x);
    public class RepeatedNestedEnumDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum) data.U32;
      }
    }
    private static RepeatedNestedEnumDataConverter repeatedNestedEnumDataConverter = new RepeatedNestedEnumDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum> repeatedNestedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum>(repeatedNestedEnumDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum> RepeatedNestedEnum {
      get { return repeatedNestedEnum_; }
    }

    /// <summary>Field number for the "repeated_foreign_enum" field.</summary>
    public const int RepeatedForeignEnumFieldNumber = 52;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_repeatedForeignEnum_codec
        = pb::FieldCodec.ForEnum(418, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    public class RepeatedForeignEnumDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.ForeignEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.ForeignEnum) data.U32;
      }
    }
    private static RepeatedForeignEnumDataConverter repeatedForeignEnumDataConverter = new RepeatedForeignEnumDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> repeatedForeignEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(repeatedForeignEnumDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> RepeatedForeignEnum {
      get { return repeatedForeignEnum_; }
    }

    /// <summary>Field number for the "repeated_import_enum" field.</summary>
    public const int RepeatedImportEnumFieldNumber = 53;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportEnum> _repeated_repeatedImportEnum_codec
        = pb::FieldCodec.ForEnum(426, x => (int) x, x => (global::Google.Protobuf.TestProtos.ImportEnum) x);
    public class RepeatedImportEnumDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ImportEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ImportEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.ImportEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.ImportEnum) data.U32;
      }
    }
    private static RepeatedImportEnumDataConverter repeatedImportEnumDataConverter = new RepeatedImportEnumDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ImportEnum> repeatedImportEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ImportEnum>(repeatedImportEnumDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ImportEnum> RepeatedImportEnum {
      get { return repeatedImportEnum_; }
    }

    /// <summary>Field number for the "oneof_uint32" field.</summary>
    public const int OneofUint32FieldNumber = 111;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OneofUint32 {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofUint32 ? (uint) oneofField_ : 0; }
      set {
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofUint32 || value != (uint) oneofField_) {
          Context.AddSetEvent(111, new zpr.EventSource.EventContent { U32 = value });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = OneofFieldOneofCase.OneofUint32;
      }
    }

    /// <summary>Field number for the "oneof_nested_message" field.</summary>
    public const int OneofNestedMessageFieldNumber = 112;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage OneofNestedMessage {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage ? (global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage) oneofField_ : null; }
      set {
        if(oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage && oneofField_ != null) ((global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage) oneofField_).ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 112));
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofNestedMessage || !value.Equals(oneofField_)) {
          Context.AddSetEvent(112, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofNestedMessage;
      }
    }

    /// <summary>Field number for the "oneof_string" field.</summary>
    public const int OneofStringFieldNumber = 113;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OneofString {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofString ? (string) oneofField_ : ""; }
      set {
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofString || value != (string) oneofField_) {
          Context.AddSetEvent(113, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        oneofField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        oneofFieldCase_ = OneofFieldOneofCase.OneofString;
      }
    }

    /// <summary>Field number for the "oneof_bytes" field.</summary>
    public const int OneofBytesFieldNumber = 114;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OneofBytes {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofBytes ? (pb::ByteString) oneofField_ : pb::ByteString.Empty; }
      set {
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofBytes || value != (pb::ByteString) oneofField_) {
          Context.AddSetEvent(114, new zpr.EventSource.EventContent { ByteData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        oneofField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        oneofFieldCase_ = OneofFieldOneofCase.OneofBytes;
      }
    }

    /// <summary>Field number for the "oneof_foreign_message" field.</summary>
    public const int OneofForeignMessageFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessage OneofForeignMessage {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage ? (global::Google.Protobuf.TestProtos.ForeignMessage) oneofField_ : null; }
      set {
        if(oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage && oneofField_ != null) ((global::Google.Protobuf.TestProtos.ForeignMessage) oneofField_).ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 137));
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofForeignMessage || !value.Equals(oneofField_)) {
          Context.AddSetEvent(137, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessage;
      }
    }

    /// <summary>Field number for the "oneof_foreign_message_no_events" field.</summary>
    public const int OneofForeignMessageNoEventsFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessageNoEvents OneofForeignMessageNoEvents {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents ? (global::Google.Protobuf.TestProtos.ForeignMessageNoEvents) oneofField_ : null; }
      set {
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofForeignMessageNoEvents || !value.Equals(oneofField_)) {
          Context.AddSetEvent(138, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessageNoEvents;
      }
    }

    /// <summary>Field number for the "oneof_all_types" field.</summary>
    public const int OneofAllTypesFieldNumber = 139;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes OneofAllTypes {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes ? (global::Google.Protobuf.TestProtos.TestAllTypes) oneofField_ : null; }
      set {
        if(oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes && oneofField_ != null) ((global::Google.Protobuf.TestProtos.TestAllTypes) oneofField_).ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 139));
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofAllTypes || !value.Equals(oneofField_)) {
          Context.AddSetEvent(139, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypes;
      }
    }

    /// <summary>Field number for the "oneof_all_types_no_events" field.</summary>
    public const int OneofAllTypesNoEventsFieldNumber = 140;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents OneofAllTypesNoEvents {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents ? (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents) oneofField_ : null; }
      set {
        #if !DISABLE_EVENTS
        if(oneofFieldCase_ != OneofFieldOneofCase.OneofAllTypesNoEvents || !value.Equals(oneofField_)) {
          Context.AddSetEvent(140, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypesNoEvents;
      }
    }

    /// <summary>Field number for the "map_int32_int32" field.</summary>
    public const int MapInt32Int32FieldNumber = 115;
    private static readonly pbc::MapField<int, int>.Codec _map_mapInt32Int32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 922);
    internal class MapInt32Int32MapConverter : EventMapConverter<int, int> {
      public override ByteString GetKeyValue(int key, int value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteInt32(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, int> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32Int32 = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, int>(realKeymapInt32Int32, default(int));
        }
        else {
          var realValuemapInt32Int32 = dataStream.ReadInt32();
          return new KeyValuePair<int, int>(realKeymapInt32Int32, realValuemapInt32Int32);
        }
      }
    }
    private static readonly EventMapConverter<int, int> mapInt32Int32MapConverter = new MapInt32Int32MapConverter();
    private readonly EventMapField<int, int> mapInt32Int32_ = new EventMapField<int, int>(mapInt32Int32MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, int> MapInt32Int32 {
      get { return mapInt32Int32_; }
    }

    /// <summary>Field number for the "map_int64_int64" field.</summary>
    public const int MapInt64Int64FieldNumber = 116;
    private static readonly pbc::MapField<long, long>.Codec _map_mapInt64Int64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForInt64(16), 930);
    internal class MapInt64Int64MapConverter : EventMapConverter<long, long> {
      public override ByteString GetKeyValue(long key, long value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt64(key);
          if(!skipValue) dataStream.WriteInt64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<long, long> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt64Int64 = dataStream.ReadInt64();
        if (skipValue) {
          return new KeyValuePair<long, long>(realKeymapInt64Int64, default(long));
        }
        else {
          var realValuemapInt64Int64 = dataStream.ReadInt64();
          return new KeyValuePair<long, long>(realKeymapInt64Int64, realValuemapInt64Int64);
        }
      }
    }
    private static readonly EventMapConverter<long, long> mapInt64Int64MapConverter = new MapInt64Int64MapConverter();
    private readonly EventMapField<long, long> mapInt64Int64_ = new EventMapField<long, long>(mapInt64Int64MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<long, long> MapInt64Int64 {
      get { return mapInt64Int64_; }
    }

    /// <summary>Field number for the "map_uint32_uint32" field.</summary>
    public const int MapUint32Uint32FieldNumber = 117;
    private static readonly pbc::MapField<uint, uint>.Codec _map_mapUint32Uint32_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 938);
    internal class MapUint32Uint32MapConverter : EventMapConverter<uint, uint> {
      public override ByteString GetKeyValue(uint key, uint value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteUInt32(key);
          if(!skipValue) dataStream.WriteUInt32(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<uint, uint> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapUint32Uint32 = dataStream.ReadUInt32();
        if (skipValue) {
          return new KeyValuePair<uint, uint>(realKeymapUint32Uint32, default(uint));
        }
        else {
          var realValuemapUint32Uint32 = dataStream.ReadUInt32();
          return new KeyValuePair<uint, uint>(realKeymapUint32Uint32, realValuemapUint32Uint32);
        }
      }
    }
    private static readonly EventMapConverter<uint, uint> mapUint32Uint32MapConverter = new MapUint32Uint32MapConverter();
    private readonly EventMapField<uint, uint> mapUint32Uint32_ = new EventMapField<uint, uint>(mapUint32Uint32MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<uint, uint> MapUint32Uint32 {
      get { return mapUint32Uint32_; }
    }

    /// <summary>Field number for the "map_uint64_uint64" field.</summary>
    public const int MapUint64Uint64FieldNumber = 118;
    private static readonly pbc::MapField<ulong, ulong>.Codec _map_mapUint64Uint64_codec
        = new pbc::MapField<ulong, ulong>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForUInt64(16), 946);
    internal class MapUint64Uint64MapConverter : EventMapConverter<ulong, ulong> {
      public override ByteString GetKeyValue(ulong key, ulong value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteUInt64(key);
          if(!skipValue) dataStream.WriteUInt64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<ulong, ulong> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapUint64Uint64 = dataStream.ReadUInt64();
        if (skipValue) {
          return new KeyValuePair<ulong, ulong>(realKeymapUint64Uint64, default(ulong));
        }
        else {
          var realValuemapUint64Uint64 = dataStream.ReadUInt64();
          return new KeyValuePair<ulong, ulong>(realKeymapUint64Uint64, realValuemapUint64Uint64);
        }
      }
    }
    private static readonly EventMapConverter<ulong, ulong> mapUint64Uint64MapConverter = new MapUint64Uint64MapConverter();
    private readonly EventMapField<ulong, ulong> mapUint64Uint64_ = new EventMapField<ulong, ulong>(mapUint64Uint64MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<ulong, ulong> MapUint64Uint64 {
      get { return mapUint64Uint64_; }
    }

    /// <summary>Field number for the "map_sint32_sint32" field.</summary>
    public const int MapSint32Sint32FieldNumber = 119;
    private static readonly pbc::MapField<int, int>.Codec _map_mapSint32Sint32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 954);
    internal class MapSint32Sint32MapConverter : EventMapConverter<int, int> {
      public override ByteString GetKeyValue(int key, int value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteSInt32(key);
          if(!skipValue) dataStream.WriteSInt32(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, int> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapSint32Sint32 = dataStream.ReadSInt32();
        if (skipValue) {
          return new KeyValuePair<int, int>(realKeymapSint32Sint32, default(int));
        }
        else {
          var realValuemapSint32Sint32 = dataStream.ReadSInt32();
          return new KeyValuePair<int, int>(realKeymapSint32Sint32, realValuemapSint32Sint32);
        }
      }
    }
    private static readonly EventMapConverter<int, int> mapSint32Sint32MapConverter = new MapSint32Sint32MapConverter();
    private readonly EventMapField<int, int> mapSint32Sint32_ = new EventMapField<int, int>(mapSint32Sint32MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, int> MapSint32Sint32 {
      get { return mapSint32Sint32_; }
    }

    /// <summary>Field number for the "map_sint64_sint64" field.</summary>
    public const int MapSint64Sint64FieldNumber = 120;
    private static readonly pbc::MapField<long, long>.Codec _map_mapSint64Sint64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSInt64(8), pb::FieldCodec.ForSInt64(16), 962);
    internal class MapSint64Sint64MapConverter : EventMapConverter<long, long> {
      public override ByteString GetKeyValue(long key, long value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteSInt64(key);
          if(!skipValue) dataStream.WriteSInt64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<long, long> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapSint64Sint64 = dataStream.ReadSInt64();
        if (skipValue) {
          return new KeyValuePair<long, long>(realKeymapSint64Sint64, default(long));
        }
        else {
          var realValuemapSint64Sint64 = dataStream.ReadSInt64();
          return new KeyValuePair<long, long>(realKeymapSint64Sint64, realValuemapSint64Sint64);
        }
      }
    }
    private static readonly EventMapConverter<long, long> mapSint64Sint64MapConverter = new MapSint64Sint64MapConverter();
    private readonly EventMapField<long, long> mapSint64Sint64_ = new EventMapField<long, long>(mapSint64Sint64MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<long, long> MapSint64Sint64 {
      get { return mapSint64Sint64_; }
    }

    /// <summary>Field number for the "map_fixed32_fixed32" field.</summary>
    public const int MapFixed32Fixed32FieldNumber = 121;
    private static readonly pbc::MapField<uint, uint>.Codec _map_mapFixed32Fixed32_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForFixed32(13), pb::FieldCodec.ForFixed32(21), 970);
    internal class MapFixed32Fixed32MapConverter : EventMapConverter<uint, uint> {
      public override ByteString GetKeyValue(uint key, uint value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteFixed32(key);
          if(!skipValue) dataStream.WriteFixed32(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<uint, uint> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapFixed32Fixed32 = dataStream.ReadFixed32();
        if (skipValue) {
          return new KeyValuePair<uint, uint>(realKeymapFixed32Fixed32, default(uint));
        }
        else {
          var realValuemapFixed32Fixed32 = dataStream.ReadFixed32();
          return new KeyValuePair<uint, uint>(realKeymapFixed32Fixed32, realValuemapFixed32Fixed32);
        }
      }
    }
    private static readonly EventMapConverter<uint, uint> mapFixed32Fixed32MapConverter = new MapFixed32Fixed32MapConverter();
    private readonly EventMapField<uint, uint> mapFixed32Fixed32_ = new EventMapField<uint, uint>(mapFixed32Fixed32MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<uint, uint> MapFixed32Fixed32 {
      get { return mapFixed32Fixed32_; }
    }

    /// <summary>Field number for the "map_fixed64_fixed64" field.</summary>
    public const int MapFixed64Fixed64FieldNumber = 122;
    private static readonly pbc::MapField<ulong, ulong>.Codec _map_mapFixed64Fixed64_codec
        = new pbc::MapField<ulong, ulong>.Codec(pb::FieldCodec.ForFixed64(9), pb::FieldCodec.ForFixed64(17), 978);
    internal class MapFixed64Fixed64MapConverter : EventMapConverter<ulong, ulong> {
      public override ByteString GetKeyValue(ulong key, ulong value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteFixed64(key);
          if(!skipValue) dataStream.WriteFixed64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<ulong, ulong> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapFixed64Fixed64 = dataStream.ReadFixed64();
        if (skipValue) {
          return new KeyValuePair<ulong, ulong>(realKeymapFixed64Fixed64, default(ulong));
        }
        else {
          var realValuemapFixed64Fixed64 = dataStream.ReadFixed64();
          return new KeyValuePair<ulong, ulong>(realKeymapFixed64Fixed64, realValuemapFixed64Fixed64);
        }
      }
    }
    private static readonly EventMapConverter<ulong, ulong> mapFixed64Fixed64MapConverter = new MapFixed64Fixed64MapConverter();
    private readonly EventMapField<ulong, ulong> mapFixed64Fixed64_ = new EventMapField<ulong, ulong>(mapFixed64Fixed64MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<ulong, ulong> MapFixed64Fixed64 {
      get { return mapFixed64Fixed64_; }
    }

    /// <summary>Field number for the "map_sfixed32_sfixed32" field.</summary>
    public const int MapSfixed32Sfixed32FieldNumber = 123;
    private static readonly pbc::MapField<int, int>.Codec _map_mapSfixed32Sfixed32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSFixed32(13), pb::FieldCodec.ForSFixed32(21), 986);
    internal class MapSfixed32Sfixed32MapConverter : EventMapConverter<int, int> {
      public override ByteString GetKeyValue(int key, int value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteSFixed32(key);
          if(!skipValue) dataStream.WriteSFixed32(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, int> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapSfixed32Sfixed32 = dataStream.ReadSFixed32();
        if (skipValue) {
          return new KeyValuePair<int, int>(realKeymapSfixed32Sfixed32, default(int));
        }
        else {
          var realValuemapSfixed32Sfixed32 = dataStream.ReadSFixed32();
          return new KeyValuePair<int, int>(realKeymapSfixed32Sfixed32, realValuemapSfixed32Sfixed32);
        }
      }
    }
    private static readonly EventMapConverter<int, int> mapSfixed32Sfixed32MapConverter = new MapSfixed32Sfixed32MapConverter();
    private readonly EventMapField<int, int> mapSfixed32Sfixed32_ = new EventMapField<int, int>(mapSfixed32Sfixed32MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, int> MapSfixed32Sfixed32 {
      get { return mapSfixed32Sfixed32_; }
    }

    /// <summary>Field number for the "map_sfixed64_sfixed64" field.</summary>
    public const int MapSfixed64Sfixed64FieldNumber = 124;
    private static readonly pbc::MapField<long, long>.Codec _map_mapSfixed64Sfixed64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSFixed64(9), pb::FieldCodec.ForSFixed64(17), 994);
    internal class MapSfixed64Sfixed64MapConverter : EventMapConverter<long, long> {
      public override ByteString GetKeyValue(long key, long value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteSFixed64(key);
          if(!skipValue) dataStream.WriteSFixed64(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<long, long> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapSfixed64Sfixed64 = dataStream.ReadSFixed64();
        if (skipValue) {
          return new KeyValuePair<long, long>(realKeymapSfixed64Sfixed64, default(long));
        }
        else {
          var realValuemapSfixed64Sfixed64 = dataStream.ReadSFixed64();
          return new KeyValuePair<long, long>(realKeymapSfixed64Sfixed64, realValuemapSfixed64Sfixed64);
        }
      }
    }
    private static readonly EventMapConverter<long, long> mapSfixed64Sfixed64MapConverter = new MapSfixed64Sfixed64MapConverter();
    private readonly EventMapField<long, long> mapSfixed64Sfixed64_ = new EventMapField<long, long>(mapSfixed64Sfixed64MapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<long, long> MapSfixed64Sfixed64 {
      get { return mapSfixed64Sfixed64_; }
    }

    /// <summary>Field number for the "map_int32_float" field.</summary>
    public const int MapInt32FloatFieldNumber = 125;
    private static readonly pbc::MapField<int, float>.Codec _map_mapInt32Float_codec
        = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForFloat(21), 1002);
    internal class MapInt32FloatMapConverter : EventMapConverter<int, float> {
      public override ByteString GetKeyValue(int key, float value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteFloat(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, float> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32Float = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, float>(realKeymapInt32Float, default(float));
        }
        else {
          var realValuemapInt32Float = dataStream.ReadFloat();
          return new KeyValuePair<int, float>(realKeymapInt32Float, realValuemapInt32Float);
        }
      }
    }
    private static readonly EventMapConverter<int, float> mapInt32FloatMapConverter = new MapInt32FloatMapConverter();
    private readonly EventMapField<int, float> mapInt32Float_ = new EventMapField<int, float>(mapInt32FloatMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, float> MapInt32Float {
      get { return mapInt32Float_; }
    }

    /// <summary>Field number for the "map_int32_double" field.</summary>
    public const int MapInt32DoubleFieldNumber = 126;
    private static readonly pbc::MapField<int, double>.Codec _map_mapInt32Double_codec
        = new pbc::MapField<int, double>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForDouble(17), 1010);
    internal class MapInt32DoubleMapConverter : EventMapConverter<int, double> {
      public override ByteString GetKeyValue(int key, double value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteDouble(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, double> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32Double = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, double>(realKeymapInt32Double, default(double));
        }
        else {
          var realValuemapInt32Double = dataStream.ReadDouble();
          return new KeyValuePair<int, double>(realKeymapInt32Double, realValuemapInt32Double);
        }
      }
    }
    private static readonly EventMapConverter<int, double> mapInt32DoubleMapConverter = new MapInt32DoubleMapConverter();
    private readonly EventMapField<int, double> mapInt32Double_ = new EventMapField<int, double>(mapInt32DoubleMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, double> MapInt32Double {
      get { return mapInt32Double_; }
    }

    /// <summary>Field number for the "map_bool_bool" field.</summary>
    public const int MapBoolBoolFieldNumber = 127;
    private static readonly pbc::MapField<bool, bool>.Codec _map_mapBoolBool_codec
        = new pbc::MapField<bool, bool>.Codec(pb::FieldCodec.ForBool(8), pb::FieldCodec.ForBool(16), 1018);
    internal class MapBoolBoolMapConverter : EventMapConverter<bool, bool> {
      public override ByteString GetKeyValue(bool key, bool value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteBool(key);
          if(!skipValue) dataStream.WriteBool(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<bool, bool> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapBoolBool = dataStream.ReadBool();
        if (skipValue) {
          return new KeyValuePair<bool, bool>(realKeymapBoolBool, default(bool));
        }
        else {
          var realValuemapBoolBool = dataStream.ReadBool();
          return new KeyValuePair<bool, bool>(realKeymapBoolBool, realValuemapBoolBool);
        }
      }
    }
    private static readonly EventMapConverter<bool, bool> mapBoolBoolMapConverter = new MapBoolBoolMapConverter();
    private readonly EventMapField<bool, bool> mapBoolBool_ = new EventMapField<bool, bool>(mapBoolBoolMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<bool, bool> MapBoolBool {
      get { return mapBoolBool_; }
    }

    /// <summary>Field number for the "map_string_string" field.</summary>
    public const int MapStringStringFieldNumber = 128;
    private static readonly pbc::MapField<string, string>.Codec _map_mapStringString_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 1026);
    internal class MapStringStringMapConverter : EventMapConverter<string, string> {
      public override ByteString GetKeyValue(string key, string value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteString(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<string, string> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapStringString = dataStream.ReadString();
        if (skipValue) {
          return new KeyValuePair<string, string>(realKeymapStringString, default(string));
        }
        else {
          var realValuemapStringString = dataStream.ReadString();
          return new KeyValuePair<string, string>(realKeymapStringString, realValuemapStringString);
        }
      }
    }
    private static readonly EventMapConverter<string, string> mapStringStringMapConverter = new MapStringStringMapConverter();
    private readonly EventMapField<string, string> mapStringString_ = new EventMapField<string, string>(mapStringStringMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<string, string> MapStringString {
      get { return mapStringString_; }
    }

    /// <summary>Field number for the "map_int32_bytes" field.</summary>
    public const int MapInt32BytesFieldNumber = 129;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_mapInt32Bytes_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 1034);
    internal class MapInt32BytesMapConverter : EventMapConverter<int, pb::ByteString> {
      public override ByteString GetKeyValue(int key, pb::ByteString value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteBytes(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, pb::ByteString> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32Bytes = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, pb::ByteString>(realKeymapInt32Bytes, default(pb::ByteString));
        }
        else {
          var realValuemapInt32Bytes = dataStream.ReadBytes();
          return new KeyValuePair<int, pb::ByteString>(realKeymapInt32Bytes, realValuemapInt32Bytes);
        }
      }
    }
    private static readonly EventMapConverter<int, pb::ByteString> mapInt32BytesMapConverter = new MapInt32BytesMapConverter();
    private readonly EventMapField<int, pb::ByteString> mapInt32Bytes_ = new EventMapField<int, pb::ByteString>(mapInt32BytesMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, pb::ByteString> MapInt32Bytes {
      get { return mapInt32Bytes_; }
    }

    /// <summary>Field number for the "map_int32_enum" field.</summary>
    public const int MapInt32EnumFieldNumber = 130;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum>.Codec _map_mapInt32Enum_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Google.Protobuf.TestProtos.MapEnum) x), 1042);
    internal class MapInt32EnumMapConverter : EventMapConverter<int, global::Google.Protobuf.TestProtos.MapEnum> {
      public override ByteString GetKeyValue(int key, global::Google.Protobuf.TestProtos.MapEnum value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteEnum((int) value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Google.Protobuf.TestProtos.MapEnum> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32Enum = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.MapEnum>(realKeymapInt32Enum, default(global::Google.Protobuf.TestProtos.MapEnum));
        }
        else {
          var realValuemapInt32Enum = (global::Google.Protobuf.TestProtos.MapEnum) dataStream.ReadEnum();
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.MapEnum>(realKeymapInt32Enum, realValuemapInt32Enum);
        }
      }
    }
    private static readonly EventMapConverter<int, global::Google.Protobuf.TestProtos.MapEnum> mapInt32EnumMapConverter = new MapInt32EnumMapConverter();
    private readonly EventMapField<int, global::Google.Protobuf.TestProtos.MapEnum> mapInt32Enum_ = new EventMapField<int, global::Google.Protobuf.TestProtos.MapEnum>(mapInt32EnumMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Google.Protobuf.TestProtos.MapEnum> MapInt32Enum {
      get { return mapInt32Enum_; }
    }

    /// <summary>Field number for the "map_int32_foreign_message" field.</summary>
    public const int MapInt32ForeignMessageFieldNumber = 131;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>.Codec _map_mapInt32ForeignMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.ForeignMessage.Parser), 1050);
    internal class MapInt32ForeignMessageMapConverter : EventMapConverter<int, global::Google.Protobuf.TestProtos.ForeignMessage> {
      public override ByteString GetKeyValue(int key, global::Google.Protobuf.TestProtos.ForeignMessage value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessage> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32ForeignMessage = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessage>(realKeymapInt32ForeignMessage, default(global::Google.Protobuf.TestProtos.ForeignMessage));
        }
        else {
          var realValuemapInt32ForeignMessage = new global::Google.Protobuf.TestProtos.ForeignMessage();
          dataStream.ReadMessage(realValuemapInt32ForeignMessage);;
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessage>(realKeymapInt32ForeignMessage, realValuemapInt32ForeignMessage);
        }
      }
    }
    private static readonly EventMapConverter<int, global::Google.Protobuf.TestProtos.ForeignMessage> mapInt32ForeignMessageMapConverter = new MapInt32ForeignMessageMapConverter();
    private readonly EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessage> mapInt32ForeignMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>(mapInt32ForeignMessageMapConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessage> MapInt32ForeignMessage {
      get { return mapInt32ForeignMessage_; }
    }

    /// <summary>Field number for the "map_int32_foreign_no_events_message" field.</summary>
    public const int MapInt32ForeignNoEventsMessageFieldNumber = 132;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>.Codec _map_mapInt32ForeignNoEventsMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser), 1058);
    internal class MapInt32ForeignNoEventsMessageMapConverter : EventMapConverter<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> {
      public override ByteString GetKeyValue(int key, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32ForeignNoEventsMessage = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>(realKeymapInt32ForeignNoEventsMessage, default(global::Google.Protobuf.TestProtos.ForeignMessageNoEvents));
        }
        else {
          var realValuemapInt32ForeignNoEventsMessage = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
          dataStream.ReadMessage(realValuemapInt32ForeignNoEventsMessage);;
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>(realKeymapInt32ForeignNoEventsMessage, realValuemapInt32ForeignNoEventsMessage);
        }
      }
    }
    private static readonly EventMapConverter<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> mapInt32ForeignNoEventsMessageMapConverter = new MapInt32ForeignNoEventsMessageMapConverter();
    private readonly EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> mapInt32ForeignNoEventsMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>(mapInt32ForeignNoEventsMessageMapConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> MapInt32ForeignNoEventsMessage {
      get { return mapInt32ForeignNoEventsMessage_; }
    }

    /// <summary>Field number for the "map_int32_test_all_types_message" field.</summary>
    public const int MapInt32TestAllTypesMessageFieldNumber = 133;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>.Codec _map_mapInt32TestAllTypesMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.TestAllTypes.Parser), 1066);
    internal class MapInt32TestAllTypesMessageMapConverter : EventMapConverter<int, global::Google.Protobuf.TestProtos.TestAllTypes> {
      public override ByteString GetKeyValue(int key, global::Google.Protobuf.TestProtos.TestAllTypes value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypes> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32TestAllTypesMessage = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypes>(realKeymapInt32TestAllTypesMessage, default(global::Google.Protobuf.TestProtos.TestAllTypes));
        }
        else {
          var realValuemapInt32TestAllTypesMessage = new global::Google.Protobuf.TestProtos.TestAllTypes();
          dataStream.ReadMessage(realValuemapInt32TestAllTypesMessage);;
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypes>(realKeymapInt32TestAllTypesMessage, realValuemapInt32TestAllTypesMessage);
        }
      }
    }
    private static readonly EventMapConverter<int, global::Google.Protobuf.TestProtos.TestAllTypes> mapInt32TestAllTypesMessageMapConverter = new MapInt32TestAllTypesMessageMapConverter();
    private readonly EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypes> mapInt32TestAllTypesMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>(mapInt32TestAllTypesMessageMapConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypes> MapInt32TestAllTypesMessage {
      get { return mapInt32TestAllTypesMessage_; }
    }

    /// <summary>Field number for the "map_int32_test_all_types_no_events_message" field.</summary>
    public const int MapInt32TestAllTypesNoEventsMessageFieldNumber = 134;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>.Codec _map_mapInt32TestAllTypesNoEventsMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser), 1074);
    internal class MapInt32TestAllTypesNoEventsMessageMapConverter : EventMapConverter<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> {
      public override ByteString GetKeyValue(int key, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents value, bool skipValue = false) {
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteMessage(value);
          dataStream.Flush();
          return ByteString.CopyFrom(memStream.ToArray());
        }
      }
      public override KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> GetItem(ByteString data, bool skipValue = false) {
        var dataStream = data.CreateCodedInput();
        var realKeymapInt32TestAllTypesNoEventsMessage = dataStream.ReadInt32();
        if (skipValue) {
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(realKeymapInt32TestAllTypesNoEventsMessage, default(global::Google.Protobuf.TestProtos.TestAllTypesNoEvents));
        }
        else {
          var realValuemapInt32TestAllTypesNoEventsMessage = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
          dataStream.ReadMessage(realValuemapInt32TestAllTypesNoEventsMessage);;
          return new KeyValuePair<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(realKeymapInt32TestAllTypesNoEventsMessage, realValuemapInt32TestAllTypesNoEventsMessage);
        }
      }
    }
    private static readonly EventMapConverter<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> mapInt32TestAllTypesNoEventsMessageMapConverter = new MapInt32TestAllTypesNoEventsMessageMapConverter();
    private readonly EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> mapInt32TestAllTypesNoEventsMessage_ = new EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>(mapInt32TestAllTypesNoEventsMessageMapConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> MapInt32TestAllTypesNoEventsMessage {
      get { return mapInt32TestAllTypesNoEventsMessage_; }
    }

    /// <summary>Field number for the "all_types" field.</summary>
    public const int AllTypesFieldNumber = 135;
    private global::Google.Protobuf.TestProtos.TestAllTypes allTypes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes AllTypes {
      get { return allTypes_; }
      set {
        if(allTypes_ != null) allTypes_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 135));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(allTypes_)) {
          Context.AddSetEvent(135, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        allTypes_ = value;
      }
    }

    /// <summary>Field number for the "all_types_no_events" field.</summary>
    public const int AllTypesNoEventsFieldNumber = 136;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents allTypesNoEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents AllTypesNoEvents {
      get { return allTypesNoEvents_; }
      set {
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(allTypesNoEvents_)) {
          Context.AddSetEvent(136, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        allTypesNoEvents_ = value;
      }
    }

    private object oneofField_;
    /// <summary>Enum of possible cases for the "oneof_field" oneof.</summary>
    public enum OneofFieldOneofCase {
      None = 0,
      OneofUint32 = 111,
      OneofNestedMessage = 112,
      OneofString = 113,
      OneofBytes = 114,
      OneofForeignMessage = 137,
      OneofForeignMessageNoEvents = 138,
      OneofAllTypes = 139,
      OneofAllTypesNoEvents = 140,
    }
    private OneofFieldOneofCase oneofFieldCase_ = OneofFieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofFieldOneofCase OneofFieldCase {
      get { return oneofFieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofField() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestAllTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestAllTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SingleInt32 != other.SingleInt32) return false;
      if (SingleInt64 != other.SingleInt64) return false;
      if (SingleUint32 != other.SingleUint32) return false;
      if (SingleUint64 != other.SingleUint64) return false;
      if (SingleSint32 != other.SingleSint32) return false;
      if (SingleSint64 != other.SingleSint64) return false;
      if (SingleFixed32 != other.SingleFixed32) return false;
      if (SingleFixed64 != other.SingleFixed64) return false;
      if (SingleSfixed32 != other.SingleSfixed32) return false;
      if (SingleSfixed64 != other.SingleSfixed64) return false;
      if (SingleFloat != other.SingleFloat) return false;
      if (SingleDouble != other.SingleDouble) return false;
      if (SingleBool != other.SingleBool) return false;
      if (SingleString != other.SingleString) return false;
      if (SingleBytes != other.SingleBytes) return false;
      if (!object.Equals(SingleNestedMessage, other.SingleNestedMessage)) return false;
      if (!object.Equals(SingleForeignMessage, other.SingleForeignMessage)) return false;
      if (!object.Equals(SingleImportMessage, other.SingleImportMessage)) return false;
      if (SingleNestedEnum != other.SingleNestedEnum) return false;
      if (SingleForeignEnum != other.SingleForeignEnum) return false;
      if (SingleImportEnum != other.SingleImportEnum) return false;
      if (!object.Equals(SinglePublicImportMessage, other.SinglePublicImportMessage)) return false;
      if(!repeatedInt32_.Equals(other.repeatedInt32_)) return false;
      if(!repeatedInt64_.Equals(other.repeatedInt64_)) return false;
      if(!repeatedUint32_.Equals(other.repeatedUint32_)) return false;
      if(!repeatedUint64_.Equals(other.repeatedUint64_)) return false;
      if(!repeatedSint32_.Equals(other.repeatedSint32_)) return false;
      if(!repeatedSint64_.Equals(other.repeatedSint64_)) return false;
      if(!repeatedFixed32_.Equals(other.repeatedFixed32_)) return false;
      if(!repeatedFixed64_.Equals(other.repeatedFixed64_)) return false;
      if(!repeatedSfixed32_.Equals(other.repeatedSfixed32_)) return false;
      if(!repeatedSfixed64_.Equals(other.repeatedSfixed64_)) return false;
      if(!repeatedFloat_.Equals(other.repeatedFloat_)) return false;
      if(!repeatedDouble_.Equals(other.repeatedDouble_)) return false;
      if(!repeatedBool_.Equals(other.repeatedBool_)) return false;
      if(!repeatedString_.Equals(other.repeatedString_)) return false;
      if(!repeatedBytes_.Equals(other.repeatedBytes_)) return false;
      if(!repeatedNestedMessage_.Equals(other.repeatedNestedMessage_)) return false;
      if(!repeatedForeignMessage_.Equals(other.repeatedForeignMessage_)) return false;
      if(!repeatedImportMessage_.Equals(other.repeatedImportMessage_)) return false;
      if(!repeatedImportNoEvents_.Equals(other.repeatedImportNoEvents_)) return false;
      if(!repeatedTestAllTypesMessage_.Equals(other.repeatedTestAllTypesMessage_)) return false;
      if(!repeatedTestAllTypesNoEventsMessage_.Equals(other.repeatedTestAllTypesNoEventsMessage_)) return false;
      if(!repeatedNestedEnum_.Equals(other.repeatedNestedEnum_)) return false;
      if(!repeatedForeignEnum_.Equals(other.repeatedForeignEnum_)) return false;
      if(!repeatedImportEnum_.Equals(other.repeatedImportEnum_)) return false;
      if (OneofUint32 != other.OneofUint32) return false;
      if (!object.Equals(OneofNestedMessage, other.OneofNestedMessage)) return false;
      if (OneofString != other.OneofString) return false;
      if (OneofBytes != other.OneofBytes) return false;
      if (!object.Equals(OneofForeignMessage, other.OneofForeignMessage)) return false;
      if (!object.Equals(OneofForeignMessageNoEvents, other.OneofForeignMessageNoEvents)) return false;
      if (!object.Equals(OneofAllTypes, other.OneofAllTypes)) return false;
      if (!object.Equals(OneofAllTypesNoEvents, other.OneofAllTypesNoEvents)) return false;
      if (!mapInt32Int32_.Equals(other.mapInt32Int32_)) return false;
      if (!mapInt64Int64_.Equals(other.mapInt64Int64_)) return false;
      if (!mapUint32Uint32_.Equals(other.mapUint32Uint32_)) return false;
      if (!mapUint64Uint64_.Equals(other.mapUint64Uint64_)) return false;
      if (!mapSint32Sint32_.Equals(other.mapSint32Sint32_)) return false;
      if (!mapSint64Sint64_.Equals(other.mapSint64Sint64_)) return false;
      if (!mapFixed32Fixed32_.Equals(other.mapFixed32Fixed32_)) return false;
      if (!mapFixed64Fixed64_.Equals(other.mapFixed64Fixed64_)) return false;
      if (!mapSfixed32Sfixed32_.Equals(other.mapSfixed32Sfixed32_)) return false;
      if (!mapSfixed64Sfixed64_.Equals(other.mapSfixed64Sfixed64_)) return false;
      if (!mapInt32Float_.Equals(other.mapInt32Float_)) return false;
      if (!mapInt32Double_.Equals(other.mapInt32Double_)) return false;
      if (!mapBoolBool_.Equals(other.mapBoolBool_)) return false;
      if (!mapStringString_.Equals(other.mapStringString_)) return false;
      if (!mapInt32Bytes_.Equals(other.mapInt32Bytes_)) return false;
      if (!mapInt32Enum_.Equals(other.mapInt32Enum_)) return false;
      if (!mapInt32ForeignMessage_.Equals(other.mapInt32ForeignMessage_)) return false;
      if (!mapInt32ForeignNoEventsMessage_.Equals(other.mapInt32ForeignNoEventsMessage_)) return false;
      if (!mapInt32TestAllTypesMessage_.Equals(other.mapInt32TestAllTypesMessage_)) return false;
      if (!mapInt32TestAllTypesNoEventsMessage_.Equals(other.mapInt32TestAllTypesNoEventsMessage_)) return false;
      if (!object.Equals(AllTypes, other.AllTypes)) return false;
      if (!object.Equals(AllTypesNoEvents, other.AllTypesNoEvents)) return false;
      if (OneofFieldCase != other.OneofFieldCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SingleInt32 != 0) hash ^= SingleInt32.GetHashCode();
      if (SingleInt64 != 0L) hash ^= SingleInt64.GetHashCode();
      if (SingleUint32 != 0) hash ^= SingleUint32.GetHashCode();
      if (SingleUint64 != 0UL) hash ^= SingleUint64.GetHashCode();
      if (SingleSint32 != 0) hash ^= SingleSint32.GetHashCode();
      if (SingleSint64 != 0L) hash ^= SingleSint64.GetHashCode();
      if (SingleFixed32 != 0) hash ^= SingleFixed32.GetHashCode();
      if (SingleFixed64 != 0UL) hash ^= SingleFixed64.GetHashCode();
      if (SingleSfixed32 != 0) hash ^= SingleSfixed32.GetHashCode();
      if (SingleSfixed64 != 0L) hash ^= SingleSfixed64.GetHashCode();
      if (SingleFloat != 0F) hash ^= SingleFloat.GetHashCode();
      if (SingleDouble != 0D) hash ^= SingleDouble.GetHashCode();
      if (SingleBool != false) hash ^= SingleBool.GetHashCode();
      if (SingleString.Length != 0) hash ^= SingleString.GetHashCode();
      if (SingleBytes.Length != 0) hash ^= SingleBytes.GetHashCode();
      if (singleNestedMessage_ != null) hash ^= SingleNestedMessage.GetHashCode();
      if (singleForeignMessage_ != null) hash ^= SingleForeignMessage.GetHashCode();
      if (singleImportMessage_ != null) hash ^= SingleImportMessage.GetHashCode();
      if (SingleNestedEnum != 0) hash ^= SingleNestedEnum.GetHashCode();
      if (SingleForeignEnum != 0) hash ^= SingleForeignEnum.GetHashCode();
      if (SingleImportEnum != 0) hash ^= SingleImportEnum.GetHashCode();
      if (singlePublicImportMessage_ != null) hash ^= SinglePublicImportMessage.GetHashCode();
      hash ^= repeatedInt32_.GetHashCode();
      hash ^= repeatedInt64_.GetHashCode();
      hash ^= repeatedUint32_.GetHashCode();
      hash ^= repeatedUint64_.GetHashCode();
      hash ^= repeatedSint32_.GetHashCode();
      hash ^= repeatedSint64_.GetHashCode();
      hash ^= repeatedFixed32_.GetHashCode();
      hash ^= repeatedFixed64_.GetHashCode();
      hash ^= repeatedSfixed32_.GetHashCode();
      hash ^= repeatedSfixed64_.GetHashCode();
      hash ^= repeatedFloat_.GetHashCode();
      hash ^= repeatedDouble_.GetHashCode();
      hash ^= repeatedBool_.GetHashCode();
      hash ^= repeatedString_.GetHashCode();
      hash ^= repeatedBytes_.GetHashCode();
      hash ^= repeatedNestedMessage_.GetHashCode();
      hash ^= repeatedForeignMessage_.GetHashCode();
      hash ^= repeatedImportMessage_.GetHashCode();
      hash ^= repeatedImportNoEvents_.GetHashCode();
      hash ^= repeatedTestAllTypesMessage_.GetHashCode();
      hash ^= repeatedTestAllTypesNoEventsMessage_.GetHashCode();
      hash ^= repeatedNestedEnum_.GetHashCode();
      hash ^= repeatedForeignEnum_.GetHashCode();
      hash ^= repeatedImportEnum_.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) hash ^= OneofUint32.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) hash ^= OneofNestedMessage.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) hash ^= OneofString.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) hash ^= OneofBytes.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) hash ^= OneofForeignMessage.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) hash ^= OneofForeignMessageNoEvents.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) hash ^= OneofAllTypes.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) hash ^= OneofAllTypesNoEvents.GetHashCode();
      hash ^= mapInt32Int32_.GetHashCode();
      hash ^= mapInt64Int64_.GetHashCode();
      hash ^= mapUint32Uint32_.GetHashCode();
      hash ^= mapUint64Uint64_.GetHashCode();
      hash ^= mapSint32Sint32_.GetHashCode();
      hash ^= mapSint64Sint64_.GetHashCode();
      hash ^= mapFixed32Fixed32_.GetHashCode();
      hash ^= mapFixed64Fixed64_.GetHashCode();
      hash ^= mapSfixed32Sfixed32_.GetHashCode();
      hash ^= mapSfixed64Sfixed64_.GetHashCode();
      hash ^= mapInt32Float_.GetHashCode();
      hash ^= mapInt32Double_.GetHashCode();
      hash ^= mapBoolBool_.GetHashCode();
      hash ^= mapStringString_.GetHashCode();
      hash ^= mapInt32Bytes_.GetHashCode();
      hash ^= mapInt32Enum_.GetHashCode();
      hash ^= mapInt32ForeignMessage_.GetHashCode();
      hash ^= mapInt32ForeignNoEventsMessage_.GetHashCode();
      hash ^= mapInt32TestAllTypesMessage_.GetHashCode();
      hash ^= mapInt32TestAllTypesNoEventsMessage_.GetHashCode();
      if (allTypes_ != null) hash ^= AllTypes.GetHashCode();
      if (allTypesNoEvents_ != null) hash ^= AllTypesNoEvents.GetHashCode();
      hash ^= (int) oneofFieldCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SingleInt32 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SingleInt32);
      }
      if (SingleInt64 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SingleInt64);
      }
      if (SingleUint32 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SingleUint32);
      }
      if (SingleUint64 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SingleUint64);
      }
      if (SingleSint32 != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(SingleSint32);
      }
      if (SingleSint64 != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(SingleSint64);
      }
      if (SingleFixed32 != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(SingleFixed32);
      }
      if (SingleFixed64 != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(SingleFixed64);
      }
      if (SingleSfixed32 != 0) {
        output.WriteRawTag(77);
        output.WriteSFixed32(SingleSfixed32);
      }
      if (SingleSfixed64 != 0L) {
        output.WriteRawTag(81);
        output.WriteSFixed64(SingleSfixed64);
      }
      if (SingleFloat != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SingleFloat);
      }
      if (SingleDouble != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SingleDouble);
      }
      if (SingleBool != false) {
        output.WriteRawTag(104);
        output.WriteBool(SingleBool);
      }
      if (SingleString.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SingleString);
      }
      if (SingleBytes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(SingleBytes);
      }
      if (singleNestedMessage_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SingleNestedMessage);
      }
      if (singleForeignMessage_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SingleForeignMessage);
      }
      if (singleImportMessage_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SingleImportMessage);
      }
      if (SingleNestedEnum != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SingleNestedEnum);
      }
      if (SingleForeignEnum != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SingleForeignEnum);
      }
      if (SingleImportEnum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) SingleImportEnum);
      }
      if (singlePublicImportMessage_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(SinglePublicImportMessage);
      }
      repeatedInt32_.WriteTo(output, _repeated_repeatedInt32_codec);
      repeatedInt64_.WriteTo(output, _repeated_repeatedInt64_codec);
      repeatedUint32_.WriteTo(output, _repeated_repeatedUint32_codec);
      repeatedUint64_.WriteTo(output, _repeated_repeatedUint64_codec);
      repeatedSint32_.WriteTo(output, _repeated_repeatedSint32_codec);
      repeatedSint64_.WriteTo(output, _repeated_repeatedSint64_codec);
      repeatedFixed32_.WriteTo(output, _repeated_repeatedFixed32_codec);
      repeatedFixed64_.WriteTo(output, _repeated_repeatedFixed64_codec);
      repeatedSfixed32_.WriteTo(output, _repeated_repeatedSfixed32_codec);
      repeatedSfixed64_.WriteTo(output, _repeated_repeatedSfixed64_codec);
      repeatedFloat_.WriteTo(output, _repeated_repeatedFloat_codec);
      repeatedDouble_.WriteTo(output, _repeated_repeatedDouble_codec);
      repeatedBool_.WriteTo(output, _repeated_repeatedBool_codec);
      repeatedString_.WriteTo(output, _repeated_repeatedString_codec);
      repeatedBytes_.WriteTo(output, _repeated_repeatedBytes_codec);
      repeatedNestedMessage_.WriteTo(output, _repeated_repeatedNestedMessage_codec);
      repeatedForeignMessage_.WriteTo(output, _repeated_repeatedForeignMessage_codec);
      repeatedImportMessage_.WriteTo(output, _repeated_repeatedImportMessage_codec);
      repeatedNestedEnum_.WriteTo(output, _repeated_repeatedNestedEnum_codec);
      repeatedForeignEnum_.WriteTo(output, _repeated_repeatedForeignEnum_codec);
      repeatedImportEnum_.WriteTo(output, _repeated_repeatedImportEnum_codec);
      repeatedImportNoEvents_.WriteTo(output, _repeated_repeatedImportNoEvents_codec);
      repeatedTestAllTypesMessage_.WriteTo(output, _repeated_repeatedTestAllTypesMessage_codec);
      repeatedTestAllTypesNoEventsMessage_.WriteTo(output, _repeated_repeatedTestAllTypesNoEventsMessage_codec);
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(OneofUint32);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(OneofNestedMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) {
        output.WriteRawTag(138, 7);
        output.WriteString(OneofString);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) {
        output.WriteRawTag(146, 7);
        output.WriteBytes(OneofBytes);
      }
      mapInt32Int32_.WriteTo(output, _map_mapInt32Int32_codec);
      mapInt64Int64_.WriteTo(output, _map_mapInt64Int64_codec);
      mapUint32Uint32_.WriteTo(output, _map_mapUint32Uint32_codec);
      mapUint64Uint64_.WriteTo(output, _map_mapUint64Uint64_codec);
      mapSint32Sint32_.WriteTo(output, _map_mapSint32Sint32_codec);
      mapSint64Sint64_.WriteTo(output, _map_mapSint64Sint64_codec);
      mapFixed32Fixed32_.WriteTo(output, _map_mapFixed32Fixed32_codec);
      mapFixed64Fixed64_.WriteTo(output, _map_mapFixed64Fixed64_codec);
      mapSfixed32Sfixed32_.WriteTo(output, _map_mapSfixed32Sfixed32_codec);
      mapSfixed64Sfixed64_.WriteTo(output, _map_mapSfixed64Sfixed64_codec);
      mapInt32Float_.WriteTo(output, _map_mapInt32Float_codec);
      mapInt32Double_.WriteTo(output, _map_mapInt32Double_codec);
      mapBoolBool_.WriteTo(output, _map_mapBoolBool_codec);
      mapStringString_.WriteTo(output, _map_mapStringString_codec);
      mapInt32Bytes_.WriteTo(output, _map_mapInt32Bytes_codec);
      mapInt32Enum_.WriteTo(output, _map_mapInt32Enum_codec);
      mapInt32ForeignMessage_.WriteTo(output, _map_mapInt32ForeignMessage_codec);
      mapInt32ForeignNoEventsMessage_.WriteTo(output, _map_mapInt32ForeignNoEventsMessage_codec);
      mapInt32TestAllTypesMessage_.WriteTo(output, _map_mapInt32TestAllTypesMessage_codec);
      mapInt32TestAllTypesNoEventsMessage_.WriteTo(output, _map_mapInt32TestAllTypesNoEventsMessage_codec);
      if (allTypes_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(AllTypes);
      }
      if (allTypesNoEvents_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(AllTypesNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(OneofForeignMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(OneofForeignMessageNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(OneofAllTypes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(OneofAllTypesNoEvents);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SingleInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SingleInt32);
      }
      if (SingleInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SingleInt64);
      }
      if (SingleUint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SingleUint32);
      }
      if (SingleUint64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SingleUint64);
      }
      if (SingleSint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SingleSint32);
      }
      if (SingleSint64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SingleSint64);
      }
      if (SingleFixed32 != 0) {
        size += 1 + 4;
      }
      if (SingleFixed64 != 0UL) {
        size += 1 + 8;
      }
      if (SingleSfixed32 != 0) {
        size += 1 + 4;
      }
      if (SingleSfixed64 != 0L) {
        size += 1 + 8;
      }
      if (SingleFloat != 0F) {
        size += 1 + 4;
      }
      if (SingleDouble != 0D) {
        size += 1 + 8;
      }
      if (SingleBool != false) {
        size += 1 + 1;
      }
      if (SingleString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingleString);
      }
      if (SingleBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SingleBytes);
      }
      if (singleNestedMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleNestedMessage);
      }
      if (singleForeignMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleForeignMessage);
      }
      if (singleImportMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleImportMessage);
      }
      if (SingleNestedEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleNestedEnum);
      }
      if (SingleForeignEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleForeignEnum);
      }
      if (SingleImportEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleImportEnum);
      }
      if (singlePublicImportMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SinglePublicImportMessage);
      }
      size += repeatedInt32_.CalculateSize(_repeated_repeatedInt32_codec);
      size += repeatedInt64_.CalculateSize(_repeated_repeatedInt64_codec);
      size += repeatedUint32_.CalculateSize(_repeated_repeatedUint32_codec);
      size += repeatedUint64_.CalculateSize(_repeated_repeatedUint64_codec);
      size += repeatedSint32_.CalculateSize(_repeated_repeatedSint32_codec);
      size += repeatedSint64_.CalculateSize(_repeated_repeatedSint64_codec);
      size += repeatedFixed32_.CalculateSize(_repeated_repeatedFixed32_codec);
      size += repeatedFixed64_.CalculateSize(_repeated_repeatedFixed64_codec);
      size += repeatedSfixed32_.CalculateSize(_repeated_repeatedSfixed32_codec);
      size += repeatedSfixed64_.CalculateSize(_repeated_repeatedSfixed64_codec);
      size += repeatedFloat_.CalculateSize(_repeated_repeatedFloat_codec);
      size += repeatedDouble_.CalculateSize(_repeated_repeatedDouble_codec);
      size += repeatedBool_.CalculateSize(_repeated_repeatedBool_codec);
      size += repeatedString_.CalculateSize(_repeated_repeatedString_codec);
      size += repeatedBytes_.CalculateSize(_repeated_repeatedBytes_codec);
      size += repeatedNestedMessage_.CalculateSize(_repeated_repeatedNestedMessage_codec);
      size += repeatedForeignMessage_.CalculateSize(_repeated_repeatedForeignMessage_codec);
      size += repeatedImportMessage_.CalculateSize(_repeated_repeatedImportMessage_codec);
      size += repeatedImportNoEvents_.CalculateSize(_repeated_repeatedImportNoEvents_codec);
      size += repeatedTestAllTypesMessage_.CalculateSize(_repeated_repeatedTestAllTypesMessage_codec);
      size += repeatedTestAllTypesNoEventsMessage_.CalculateSize(_repeated_repeatedTestAllTypesNoEventsMessage_codec);
      size += repeatedNestedEnum_.CalculateSize(_repeated_repeatedNestedEnum_codec);
      size += repeatedForeignEnum_.CalculateSize(_repeated_repeatedForeignEnum_codec);
      size += repeatedImportEnum_.CalculateSize(_repeated_repeatedImportEnum_codec);
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OneofUint32);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofNestedMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OneofString);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OneofBytes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofForeignMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofForeignMessageNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofAllTypes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofAllTypesNoEvents);
      }
      size += mapInt32Int32_.CalculateSize(_map_mapInt32Int32_codec);
      size += mapInt64Int64_.CalculateSize(_map_mapInt64Int64_codec);
      size += mapUint32Uint32_.CalculateSize(_map_mapUint32Uint32_codec);
      size += mapUint64Uint64_.CalculateSize(_map_mapUint64Uint64_codec);
      size += mapSint32Sint32_.CalculateSize(_map_mapSint32Sint32_codec);
      size += mapSint64Sint64_.CalculateSize(_map_mapSint64Sint64_codec);
      size += mapFixed32Fixed32_.CalculateSize(_map_mapFixed32Fixed32_codec);
      size += mapFixed64Fixed64_.CalculateSize(_map_mapFixed64Fixed64_codec);
      size += mapSfixed32Sfixed32_.CalculateSize(_map_mapSfixed32Sfixed32_codec);
      size += mapSfixed64Sfixed64_.CalculateSize(_map_mapSfixed64Sfixed64_codec);
      size += mapInt32Float_.CalculateSize(_map_mapInt32Float_codec);
      size += mapInt32Double_.CalculateSize(_map_mapInt32Double_codec);
      size += mapBoolBool_.CalculateSize(_map_mapBoolBool_codec);
      size += mapStringString_.CalculateSize(_map_mapStringString_codec);
      size += mapInt32Bytes_.CalculateSize(_map_mapInt32Bytes_codec);
      size += mapInt32Enum_.CalculateSize(_map_mapInt32Enum_codec);
      size += mapInt32ForeignMessage_.CalculateSize(_map_mapInt32ForeignMessage_codec);
      size += mapInt32ForeignNoEventsMessage_.CalculateSize(_map_mapInt32ForeignNoEventsMessage_codec);
      size += mapInt32TestAllTypesMessage_.CalculateSize(_map_mapInt32TestAllTypesMessage_codec);
      size += mapInt32TestAllTypesNoEventsMessage_.CalculateSize(_map_mapInt32TestAllTypesNoEventsMessage_codec);
      if (allTypes_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AllTypes);
      }
      if (allTypesNoEvents_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AllTypesNoEvents);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestAllTypes other) {
      if (other == null) {
        return;
      }
      if (other.SingleInt32 != 0) {
        SingleInt32 = other.SingleInt32;
      }
      if (other.SingleInt64 != 0L) {
        SingleInt64 = other.SingleInt64;
      }
      if (other.SingleUint32 != 0) {
        SingleUint32 = other.SingleUint32;
      }
      if (other.SingleUint64 != 0UL) {
        SingleUint64 = other.SingleUint64;
      }
      if (other.SingleSint32 != 0) {
        SingleSint32 = other.SingleSint32;
      }
      if (other.SingleSint64 != 0L) {
        SingleSint64 = other.SingleSint64;
      }
      if (other.SingleFixed32 != 0) {
        SingleFixed32 = other.SingleFixed32;
      }
      if (other.SingleFixed64 != 0UL) {
        SingleFixed64 = other.SingleFixed64;
      }
      if (other.SingleSfixed32 != 0) {
        SingleSfixed32 = other.SingleSfixed32;
      }
      if (other.SingleSfixed64 != 0L) {
        SingleSfixed64 = other.SingleSfixed64;
      }
      if (other.SingleFloat != 0F) {
        SingleFloat = other.SingleFloat;
      }
      if (other.SingleDouble != 0D) {
        SingleDouble = other.SingleDouble;
      }
      if (other.SingleBool != false) {
        SingleBool = other.SingleBool;
      }
      if (other.SingleString.Length != 0) {
        SingleString = other.SingleString;
      }
      if (other.SingleBytes.Length != 0) {
        SingleBytes = other.SingleBytes;
      }
      if (other.singleNestedMessage_ != null) {
        if (singleNestedMessage_ == null) {
          singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
          singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 18));
        }
        SingleNestedMessage.MergeFrom(other.SingleNestedMessage);
      }
      if (other.singleForeignMessage_ != null) {
        if (singleForeignMessage_ == null) {
          singleForeignMessage_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
          singleForeignMessage_.SetParent(Context, new EventPath(Context.Path, 19));
        }
        SingleForeignMessage.MergeFrom(other.SingleForeignMessage);
      }
      if (other.singleImportMessage_ != null) {
        if (singleImportMessage_ == null) {
          singleImportMessage_ = new global::Google.Protobuf.TestProtos.ImportMessage();
          singleImportMessage_.SetParent(Context, new EventPath(Context.Path, 20));
        }
        SingleImportMessage.MergeFrom(other.SingleImportMessage);
      }
      if (other.SingleNestedEnum != 0) {
        SingleNestedEnum = other.SingleNestedEnum;
      }
      if (other.SingleForeignEnum != 0) {
        SingleForeignEnum = other.SingleForeignEnum;
      }
      if (other.SingleImportEnum != 0) {
        SingleImportEnum = other.SingleImportEnum;
      }
      if (other.singlePublicImportMessage_ != null) {
        if (singlePublicImportMessage_ == null) {
          singlePublicImportMessage_ = new global::Google.Protobuf.TestProtos.PublicImportMessage();
          singlePublicImportMessage_.SetParent(Context, new EventPath(Context.Path, 26));
        }
        SinglePublicImportMessage.MergeFrom(other.SinglePublicImportMessage);
      }
      repeatedInt32_.Add(other.repeatedInt32_);
      repeatedInt64_.Add(other.repeatedInt64_);
      repeatedUint32_.Add(other.repeatedUint32_);
      repeatedUint64_.Add(other.repeatedUint64_);
      repeatedSint32_.Add(other.repeatedSint32_);
      repeatedSint64_.Add(other.repeatedSint64_);
      repeatedFixed32_.Add(other.repeatedFixed32_);
      repeatedFixed64_.Add(other.repeatedFixed64_);
      repeatedSfixed32_.Add(other.repeatedSfixed32_);
      repeatedSfixed64_.Add(other.repeatedSfixed64_);
      repeatedFloat_.Add(other.repeatedFloat_);
      repeatedDouble_.Add(other.repeatedDouble_);
      repeatedBool_.Add(other.repeatedBool_);
      repeatedString_.Add(other.repeatedString_);
      repeatedBytes_.Add(other.repeatedBytes_);
      repeatedNestedMessage_.Add(other.repeatedNestedMessage_);
      repeatedForeignMessage_.Add(other.repeatedForeignMessage_);
      repeatedImportMessage_.Add(other.repeatedImportMessage_);
      repeatedImportNoEvents_.Add(other.repeatedImportNoEvents_);
      repeatedTestAllTypesMessage_.Add(other.repeatedTestAllTypesMessage_);
      repeatedTestAllTypesNoEventsMessage_.Add(other.repeatedTestAllTypesNoEventsMessage_);
      repeatedNestedEnum_.Add(other.repeatedNestedEnum_);
      repeatedForeignEnum_.Add(other.repeatedForeignEnum_);
      repeatedImportEnum_.Add(other.repeatedImportEnum_);
      mapInt32Int32_.Add(other.mapInt32Int32_);
      mapInt64Int64_.Add(other.mapInt64Int64_);
      mapUint32Uint32_.Add(other.mapUint32Uint32_);
      mapUint64Uint64_.Add(other.mapUint64Uint64_);
      mapSint32Sint32_.Add(other.mapSint32Sint32_);
      mapSint64Sint64_.Add(other.mapSint64Sint64_);
      mapFixed32Fixed32_.Add(other.mapFixed32Fixed32_);
      mapFixed64Fixed64_.Add(other.mapFixed64Fixed64_);
      mapSfixed32Sfixed32_.Add(other.mapSfixed32Sfixed32_);
      mapSfixed64Sfixed64_.Add(other.mapSfixed64Sfixed64_);
      mapInt32Float_.Add(other.mapInt32Float_);
      mapInt32Double_.Add(other.mapInt32Double_);
      mapBoolBool_.Add(other.mapBoolBool_);
      mapStringString_.Add(other.mapStringString_);
      mapInt32Bytes_.Add(other.mapInt32Bytes_);
      mapInt32Enum_.Add(other.mapInt32Enum_);
      mapInt32ForeignMessage_.Add(other.mapInt32ForeignMessage_);
      mapInt32ForeignNoEventsMessage_.Add(other.mapInt32ForeignNoEventsMessage_);
      mapInt32TestAllTypesMessage_.Add(other.mapInt32TestAllTypesMessage_);
      mapInt32TestAllTypesNoEventsMessage_.Add(other.mapInt32TestAllTypesNoEventsMessage_);
      if (other.allTypes_ != null) {
        if (allTypes_ == null) {
          allTypes_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
          allTypes_.SetParent(Context, new EventPath(Context.Path, 135));
        }
        AllTypes.MergeFrom(other.AllTypes);
      }
      if (other.allTypesNoEvents_ != null) {
        if (allTypesNoEvents_ == null) {
          allTypesNoEvents_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
        }
        AllTypesNoEvents.MergeFrom(other.AllTypesNoEvents);
      }
      switch (other.OneofFieldCase) {
        case OneofFieldOneofCase.OneofUint32:
          OneofUint32 = other.OneofUint32;
          break;
        case OneofFieldOneofCase.OneofNestedMessage:
          if (OneofNestedMessage == null) {
            OneofNestedMessage = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
            OneofNestedMessage.SetParent(Context, new EventPath(Context.Path, 112));
          }
          OneofNestedMessage.MergeFrom(other.OneofNestedMessage);
          break;
        case OneofFieldOneofCase.OneofString:
          OneofString = other.OneofString;
          break;
        case OneofFieldOneofCase.OneofBytes:
          OneofBytes = other.OneofBytes;
          break;
        case OneofFieldOneofCase.OneofForeignMessage:
          if (OneofForeignMessage == null) {
            OneofForeignMessage = new global::Google.Protobuf.TestProtos.ForeignMessage();
            OneofForeignMessage.SetParent(Context, new EventPath(Context.Path, 137));
          }
          OneofForeignMessage.MergeFrom(other.OneofForeignMessage);
          break;
        case OneofFieldOneofCase.OneofForeignMessageNoEvents:
          if (OneofForeignMessageNoEvents == null) {
            OneofForeignMessageNoEvents = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
          }
          OneofForeignMessageNoEvents.MergeFrom(other.OneofForeignMessageNoEvents);
          break;
        case OneofFieldOneofCase.OneofAllTypes:
          if (OneofAllTypes == null) {
            OneofAllTypes = new global::Google.Protobuf.TestProtos.TestAllTypes();
            OneofAllTypes.SetParent(Context, new EventPath(Context.Path, 139));
          }
          OneofAllTypes.MergeFrom(other.OneofAllTypes);
          break;
        case OneofFieldOneofCase.OneofAllTypesNoEvents:
          if (OneofAllTypesNoEvents == null) {
            OneofAllTypesNoEvents = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
          }
          OneofAllTypesNoEvents.MergeFrom(other.OneofAllTypesNoEvents);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SingleInt32 = input.ReadInt32();
            break;
          }
          case 16: {
            SingleInt64 = input.ReadInt64();
            break;
          }
          case 24: {
            SingleUint32 = input.ReadUInt32();
            break;
          }
          case 32: {
            SingleUint64 = input.ReadUInt64();
            break;
          }
          case 40: {
            SingleSint32 = input.ReadSInt32();
            break;
          }
          case 48: {
            SingleSint64 = input.ReadSInt64();
            break;
          }
          case 61: {
            SingleFixed32 = input.ReadFixed32();
            break;
          }
          case 65: {
            SingleFixed64 = input.ReadFixed64();
            break;
          }
          case 77: {
            SingleSfixed32 = input.ReadSFixed32();
            break;
          }
          case 81: {
            SingleSfixed64 = input.ReadSFixed64();
            break;
          }
          case 93: {
            SingleFloat = input.ReadFloat();
            break;
          }
          case 97: {
            SingleDouble = input.ReadDouble();
            break;
          }
          case 104: {
            SingleBool = input.ReadBool();
            break;
          }
          case 114: {
            SingleString = input.ReadString();
            break;
          }
          case 122: {
            SingleBytes = input.ReadBytes();
            break;
          }
          case 146: {
            if (singleNestedMessage_ == null) {
              singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
              singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 18));
            }
            input.ReadMessage(singleNestedMessage_);
            break;
          }
          case 154: {
            if (singleForeignMessage_ == null) {
              singleForeignMessage_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
              singleForeignMessage_.SetParent(Context, new EventPath(Context.Path, 19));
            }
            input.ReadMessage(singleForeignMessage_);
            break;
          }
          case 162: {
            if (singleImportMessage_ == null) {
              singleImportMessage_ = new global::Google.Protobuf.TestProtos.ImportMessage();
              singleImportMessage_.SetParent(Context, new EventPath(Context.Path, 20));
            }
            input.ReadMessage(singleImportMessage_);
            break;
          }
          case 168: {
            singleNestedEnum_ = (global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum) input.ReadEnum();
            break;
          }
          case 176: {
            singleForeignEnum_ = (global::Google.Protobuf.TestProtos.ForeignEnum) input.ReadEnum();
            break;
          }
          case 184: {
            singleImportEnum_ = (global::Google.Protobuf.TestProtos.ImportEnum) input.ReadEnum();
            break;
          }
          case 210: {
            if (singlePublicImportMessage_ == null) {
              singlePublicImportMessage_ = new global::Google.Protobuf.TestProtos.PublicImportMessage();
              singlePublicImportMessage_.SetParent(Context, new EventPath(Context.Path, 26));
            }
            input.ReadMessage(singlePublicImportMessage_);
            break;
          }
          case 250:
          case 248: {
            repeatedInt32_.AddEntriesFrom(input, _repeated_repeatedInt32_codec);
            break;
          }
          case 258:
          case 256: {
            repeatedInt64_.AddEntriesFrom(input, _repeated_repeatedInt64_codec);
            break;
          }
          case 266:
          case 264: {
            repeatedUint32_.AddEntriesFrom(input, _repeated_repeatedUint32_codec);
            break;
          }
          case 274:
          case 272: {
            repeatedUint64_.AddEntriesFrom(input, _repeated_repeatedUint64_codec);
            break;
          }
          case 282:
          case 280: {
            repeatedSint32_.AddEntriesFrom(input, _repeated_repeatedSint32_codec);
            break;
          }
          case 290:
          case 288: {
            repeatedSint64_.AddEntriesFrom(input, _repeated_repeatedSint64_codec);
            break;
          }
          case 298:
          case 301: {
            repeatedFixed32_.AddEntriesFrom(input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 306:
          case 305: {
            repeatedFixed64_.AddEntriesFrom(input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 314:
          case 317: {
            repeatedSfixed32_.AddEntriesFrom(input, _repeated_repeatedSfixed32_codec);
            break;
          }
          case 322:
          case 321: {
            repeatedSfixed64_.AddEntriesFrom(input, _repeated_repeatedSfixed64_codec);
            break;
          }
          case 330:
          case 333: {
            repeatedFloat_.AddEntriesFrom(input, _repeated_repeatedFloat_codec);
            break;
          }
          case 338:
          case 337: {
            repeatedDouble_.AddEntriesFrom(input, _repeated_repeatedDouble_codec);
            break;
          }
          case 346:
          case 344: {
            repeatedBool_.AddEntriesFrom(input, _repeated_repeatedBool_codec);
            break;
          }
          case 354: {
            repeatedString_.AddEntriesFrom(input, _repeated_repeatedString_codec);
            break;
          }
          case 362: {
            repeatedBytes_.AddEntriesFrom(input, _repeated_repeatedBytes_codec);
            break;
          }
          case 386: {
            repeatedNestedMessage_.AddEntriesFrom(input, _repeated_repeatedNestedMessage_codec);
            break;
          }
          case 394: {
            repeatedForeignMessage_.AddEntriesFrom(input, _repeated_repeatedForeignMessage_codec);
            break;
          }
          case 402: {
            repeatedImportMessage_.AddEntriesFrom(input, _repeated_repeatedImportMessage_codec);
            break;
          }
          case 410:
          case 408: {
            repeatedNestedEnum_.AddEntriesFrom(input, _repeated_repeatedNestedEnum_codec);
            break;
          }
          case 418:
          case 416: {
            repeatedForeignEnum_.AddEntriesFrom(input, _repeated_repeatedForeignEnum_codec);
            break;
          }
          case 426:
          case 424: {
            repeatedImportEnum_.AddEntriesFrom(input, _repeated_repeatedImportEnum_codec);
            break;
          }
          case 442: {
            repeatedImportNoEvents_.AddEntriesFrom(input, _repeated_repeatedImportNoEvents_codec);
            break;
          }
          case 450: {
            repeatedTestAllTypesMessage_.AddEntriesFrom(input, _repeated_repeatedTestAllTypesMessage_codec);
            break;
          }
          case 458: {
            repeatedTestAllTypesNoEventsMessage_.AddEntriesFrom(input, _repeated_repeatedTestAllTypesNoEventsMessage_codec);
            break;
          }
          case 888: {
            OneofUint32 = input.ReadUInt32();
            break;
          }
          case 898: {
            global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
              subBuilder.MergeFrom(OneofNestedMessage);
            }
            input.ReadMessage(subBuilder);
            OneofNestedMessage = subBuilder;
            break;
          }
          case 906: {
            OneofString = input.ReadString();
            break;
          }
          case 914: {
            OneofBytes = input.ReadBytes();
            break;
          }
          case 922: {
            mapInt32Int32_.AddEntriesFrom(input, _map_mapInt32Int32_codec);
            break;
          }
          case 930: {
            mapInt64Int64_.AddEntriesFrom(input, _map_mapInt64Int64_codec);
            break;
          }
          case 938: {
            mapUint32Uint32_.AddEntriesFrom(input, _map_mapUint32Uint32_codec);
            break;
          }
          case 946: {
            mapUint64Uint64_.AddEntriesFrom(input, _map_mapUint64Uint64_codec);
            break;
          }
          case 954: {
            mapSint32Sint32_.AddEntriesFrom(input, _map_mapSint32Sint32_codec);
            break;
          }
          case 962: {
            mapSint64Sint64_.AddEntriesFrom(input, _map_mapSint64Sint64_codec);
            break;
          }
          case 970: {
            mapFixed32Fixed32_.AddEntriesFrom(input, _map_mapFixed32Fixed32_codec);
            break;
          }
          case 978: {
            mapFixed64Fixed64_.AddEntriesFrom(input, _map_mapFixed64Fixed64_codec);
            break;
          }
          case 986: {
            mapSfixed32Sfixed32_.AddEntriesFrom(input, _map_mapSfixed32Sfixed32_codec);
            break;
          }
          case 994: {
            mapSfixed64Sfixed64_.AddEntriesFrom(input, _map_mapSfixed64Sfixed64_codec);
            break;
          }
          case 1002: {
            mapInt32Float_.AddEntriesFrom(input, _map_mapInt32Float_codec);
            break;
          }
          case 1010: {
            mapInt32Double_.AddEntriesFrom(input, _map_mapInt32Double_codec);
            break;
          }
          case 1018: {
            mapBoolBool_.AddEntriesFrom(input, _map_mapBoolBool_codec);
            break;
          }
          case 1026: {
            mapStringString_.AddEntriesFrom(input, _map_mapStringString_codec);
            break;
          }
          case 1034: {
            mapInt32Bytes_.AddEntriesFrom(input, _map_mapInt32Bytes_codec);
            break;
          }
          case 1042: {
            mapInt32Enum_.AddEntriesFrom(input, _map_mapInt32Enum_codec);
            break;
          }
          case 1050: {
            mapInt32ForeignMessage_.AddEntriesFrom(input, _map_mapInt32ForeignMessage_codec);
            break;
          }
          case 1058: {
            mapInt32ForeignNoEventsMessage_.AddEntriesFrom(input, _map_mapInt32ForeignNoEventsMessage_codec);
            break;
          }
          case 1066: {
            mapInt32TestAllTypesMessage_.AddEntriesFrom(input, _map_mapInt32TestAllTypesMessage_codec);
            break;
          }
          case 1074: {
            mapInt32TestAllTypesNoEventsMessage_.AddEntriesFrom(input, _map_mapInt32TestAllTypesNoEventsMessage_codec);
            break;
          }
          case 1082: {
            if (allTypes_ == null) {
              allTypes_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
              allTypes_.SetParent(Context, new EventPath(Context.Path, 135));
            }
            input.ReadMessage(allTypes_);
            break;
          }
          case 1090: {
            if (allTypesNoEvents_ == null) {
              allTypesNoEvents_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            }
            input.ReadMessage(allTypesNoEvents_);
            break;
          }
          case 1098: {
            global::Google.Protobuf.TestProtos.ForeignMessage subBuilder = new global::Google.Protobuf.TestProtos.ForeignMessage();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
              subBuilder.MergeFrom(OneofForeignMessage);
            }
            input.ReadMessage(subBuilder);
            OneofForeignMessage = subBuilder;
            break;
          }
          case 1106: {
            global::Google.Protobuf.TestProtos.ForeignMessageNoEvents subBuilder = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
              subBuilder.MergeFrom(OneofForeignMessageNoEvents);
            }
            input.ReadMessage(subBuilder);
            OneofForeignMessageNoEvents = subBuilder;
            break;
          }
          case 1114: {
            global::Google.Protobuf.TestProtos.TestAllTypes subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypes();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
              subBuilder.MergeFrom(OneofAllTypes);
            }
            input.ReadMessage(subBuilder);
            OneofAllTypes = subBuilder;
            break;
          }
          case 1122: {
            global::Google.Protobuf.TestProtos.TestAllTypesNoEvents subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
              subBuilder.MergeFrom(OneofAllTypesNoEvents);
            }
            input.ReadMessage(subBuilder);
            OneofAllTypesNoEvents = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestAllTypes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NestedEnum {
        [pbr::OriginalName("NESTED_ENUM_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("FOO")] Foo = 1,
        [pbr::OriginalName("BAR")] Bar = 2,
        [pbr::OriginalName("BAZ")] Baz = 3,
        /// <summary>
        /// Intentionally negative.
        /// </summary>
        [pbr::OriginalName("NEG")] Neg = -1,
      }

      public sealed partial class NestedMessage : zpr::EventRegistry<NestedMessage>, pb::IMessage<NestedMessage> {
        private static readonly pb::MessageParser<NestedMessage> _parser = new pb::MessageParser<NestedMessage>(() => new NestedMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.TestProtos.TestAllTypes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage(NestedMessage other) : this() {
          bb_ = other.bb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage Clone() {
          return new NestedMessage(this);
        }

        public static bool IsEventSourced = true;

        protected override NestedMessage Message { get{ return this; } }

        public override void SetParent(EventContext parent, EventPath path) {
          base.SetParent(parent, path);
        }
        /// <summary>Field number for the "bb" field.</summary>
        public const int BbFieldNumber = 1;
        private int bb_;
        /// <summary>
        /// The field name "b" fails to compile in proto1 because it conflicts with
        /// a local variable named "b" in one of the generated methods.  Doh.
        /// This file needs to compile in proto1 to test backwards-compatibility.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Bb {
          get { return bb_; }
          set {
            #if !DISABLE_EVENTS
            if(bb_ != value) {
              Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
            }
            #endif
            bb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bb != other.Bb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bb != 0) hash ^= Bb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bb != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bb != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bb);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessage other) {
          if (other == null) {
            return;
          }
          if (other.Bb != 0) {
            Bb = other.Bb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
            }
          }
        }

        public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
            MarkDirty();
            if (e.Path.Count == 0) {
              this.MergeFrom(e.Set.ByteData);
              return true;
            }
            switch (e.Path[pathIndex]) {
              case 1: {
                bb_ = e.Set.I32;
              }
              break;
              default:
                return false;
              break;
            }
          return true;
        }

        public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
          ClearEvents();
          var er = new zpr.EventSource.EventSourceRoot();
          var setEvent = new zpr.EventSource.EventData {
            Set = new zpr.EventSource.EventContent {
              ByteData = this.ToByteString()
            }
          };
          er.Events.Add(setEvent);
          return er;
        }

      }

    }
    #endregion

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            singleInt32_ = e.Set.I32;
          }
          break;
          case 2: {
            singleInt64_ = e.Set.I64;
          }
          break;
          case 3: {
            singleUint32_ = e.Set.U32;
          }
          break;
          case 4: {
            singleUint64_ = e.Set.U64;
          }
          break;
          case 5: {
            singleSint32_ = e.Set.SI32;
          }
          break;
          case 6: {
            singleSint64_ = e.Set.SI64;
          }
          break;
          case 7: {
            singleFixed32_ = e.Set.F32;
          }
          break;
          case 8: {
            singleFixed64_ = e.Set.F64;
          }
          break;
          case 9: {
            singleSfixed32_ = e.Set.SF32;
          }
          break;
          case 10: {
            singleSfixed64_ = e.Set.SF64;
          }
          break;
          case 11: {
            singleFloat_ = e.Set.R32;
          }
          break;
          case 12: {
            singleDouble_ = e.Set.R64;
          }
          break;
          case 13: {
            singleBool_ = e.Set.BoolData;
          }
          break;
          case 14: {
            singleString_ = e.Set.StringData;
          }
          break;
          case 15: {
            singleBytes_ = e.Set.ByteData;
          }
          break;
          case 18: {
            if (e.Path.Count - 1 != pathIndex) {
              if (singleNestedMessage_ == null) {
                singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
                singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 18));
              }
              (singleNestedMessage_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              singleNestedMessage_  = global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser.ParseFrom(e.Set.ByteData);
              singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 18));
            }
          }
          break;
          case 19: {
            if (e.Path.Count - 1 != pathIndex) {
              if (singleForeignMessage_ == null) {
                singleForeignMessage_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
                singleForeignMessage_.SetParent(Context, new EventPath(Context.Path, 19));
              }
              (singleForeignMessage_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              singleForeignMessage_  = global::Google.Protobuf.TestProtos.ForeignMessage.Parser.ParseFrom(e.Set.ByteData);
              singleForeignMessage_.SetParent(Context, new EventPath(Context.Path, 19));
            }
          }
          break;
          case 20: {
            if (e.Path.Count - 1 != pathIndex) {
              if (singleImportMessage_ == null) {
                singleImportMessage_ = new global::Google.Protobuf.TestProtos.ImportMessage();
                singleImportMessage_.SetParent(Context, new EventPath(Context.Path, 20));
              }
              (singleImportMessage_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              singleImportMessage_  = global::Google.Protobuf.TestProtos.ImportMessage.Parser.ParseFrom(e.Set.ByteData);
              singleImportMessage_.SetParent(Context, new EventPath(Context.Path, 20));
            }
          }
          break;
          case 21: {
            singleNestedEnum_ = (global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedEnum)e.Set.U32;
          }
          break;
          case 22: {
            singleForeignEnum_ = (global::Google.Protobuf.TestProtos.ForeignEnum)e.Set.U32;
          }
          break;
          case 23: {
            singleImportEnum_ = (global::Google.Protobuf.TestProtos.ImportEnum)e.Set.U32;
          }
          break;
          case 26: {
            if (e.Path.Count - 1 != pathIndex) {
              if (singlePublicImportMessage_ == null) {
                singlePublicImportMessage_ = new global::Google.Protobuf.TestProtos.PublicImportMessage();
                singlePublicImportMessage_.SetParent(Context, new EventPath(Context.Path, 26));
              }
              (singlePublicImportMessage_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              singlePublicImportMessage_  = global::Google.Protobuf.TestProtos.PublicImportMessage.Parser.ParseFrom(e.Set.ByteData);
              singlePublicImportMessage_.SetParent(Context, new EventPath(Context.Path, 26));
            }
          }
          break;
          case 31: {
            repeatedInt32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 32: {
            repeatedInt64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 33: {
            repeatedUint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 34: {
            repeatedUint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 35: {
            repeatedSint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 36: {
            repeatedSint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 37: {
            repeatedFixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 38: {
            repeatedFixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 39: {
            repeatedSfixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 40: {
            repeatedSfixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 41: {
            repeatedFloat_.ApplyEvent(e.ListEvent);
          }
          break;
          case 42: {
            repeatedDouble_.ApplyEvent(e.ListEvent);
          }
          break;
          case 43: {
            repeatedBool_.ApplyEvent(e.ListEvent);
          }
          break;
          case 44: {
            repeatedString_.ApplyEvent(e.ListEvent);
          }
          break;
          case 45: {
            repeatedBytes_.ApplyEvent(e.ListEvent);
          }
          break;
          case 48: {
            repeatedNestedMessage_.ApplyEvent(e.ListEvent);
          }
          break;
          case 49: {
            repeatedForeignMessage_.ApplyEvent(e.ListEvent);
          }
          break;
          case 50: {
            repeatedImportMessage_.ApplyEvent(e.ListEvent);
          }
          break;
          case 55: {
            repeatedImportNoEvents_.ApplyEvent(e.ListEvent);
          }
          break;
          case 56: {
            repeatedTestAllTypesMessage_.ApplyEvent(e.ListEvent);
          }
          break;
          case 57: {
            repeatedTestAllTypesNoEventsMessage_.ApplyEvent(e.ListEvent);
          }
          break;
          case 51: {
            repeatedNestedEnum_.ApplyEvent(e.ListEvent);
          }
          break;
          case 52: {
            repeatedForeignEnum_.ApplyEvent(e.ListEvent);
          }
          break;
          case 53: {
            repeatedImportEnum_.ApplyEvent(e.ListEvent);
          }
          break;
          case 111: {
            oneofField_ = e.Set.U32;
            oneofFieldCase_ = OneofFieldOneofCase.OneofUint32;
          }
          break;
          case 112: {
            if (e.Path.Count - 1 != pathIndex) {
              if (oneofField_ == null) {
                oneofField_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
                (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 112));
              }
              (oneofField_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              oneofField_   = global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser.ParseFrom(e.Set.ByteData);
              (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 112));
            }
            oneofFieldCase_ = oneofField_ == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofNestedMessage;
          }
          break;
          case 113: {
            oneofField_ = pb::ProtoPreconditions.CheckNotNull(e.Set.StringData, "value");
            oneofFieldCase_ = OneofFieldOneofCase.OneofString;
          }
          break;
          case 114: {
            oneofField_ = pb::ProtoPreconditions.CheckNotNull(e.Set.ByteData, "value");
            oneofFieldCase_ = OneofFieldOneofCase.OneofBytes;
          }
          break;
          case 137: {
            if (e.Path.Count - 1 != pathIndex) {
              if (oneofField_ == null) {
                oneofField_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
                (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 137));
              }
              (oneofField_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              oneofField_   = global::Google.Protobuf.TestProtos.ForeignMessage.Parser.ParseFrom(e.Set.ByteData);
              (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 137));
            }
            oneofFieldCase_ = oneofField_ == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessage;
          }
          break;
          case 138: {
            oneofField_  = global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser.ParseFrom(e.Set.ByteData);
            oneofFieldCase_ = oneofField_ == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessageNoEvents;
          }
          break;
          case 139: {
            if (e.Path.Count - 1 != pathIndex) {
              if (oneofField_ == null) {
                oneofField_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
                (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 139));
              }
              (oneofField_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              oneofField_   = global::Google.Protobuf.TestProtos.TestAllTypes.Parser.ParseFrom(e.Set.ByteData);
              (oneofField_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 139));
            }
            oneofFieldCase_ = oneofField_ == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypes;
          }
          break;
          case 140: {
            oneofField_  = global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser.ParseFrom(e.Set.ByteData);
            oneofFieldCase_ = oneofField_ == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypesNoEvents;
          }
          break;
          case 115: {
            mapInt32Int32_.ApplyEvent(e.MapEvent);
          }
          break;
          case 116: {
            mapInt64Int64_.ApplyEvent(e.MapEvent);
          }
          break;
          case 117: {
            mapUint32Uint32_.ApplyEvent(e.MapEvent);
          }
          break;
          case 118: {
            mapUint64Uint64_.ApplyEvent(e.MapEvent);
          }
          break;
          case 119: {
            mapSint32Sint32_.ApplyEvent(e.MapEvent);
          }
          break;
          case 120: {
            mapSint64Sint64_.ApplyEvent(e.MapEvent);
          }
          break;
          case 121: {
            mapFixed32Fixed32_.ApplyEvent(e.MapEvent);
          }
          break;
          case 122: {
            mapFixed64Fixed64_.ApplyEvent(e.MapEvent);
          }
          break;
          case 123: {
            mapSfixed32Sfixed32_.ApplyEvent(e.MapEvent);
          }
          break;
          case 124: {
            mapSfixed64Sfixed64_.ApplyEvent(e.MapEvent);
          }
          break;
          case 125: {
            mapInt32Float_.ApplyEvent(e.MapEvent);
          }
          break;
          case 126: {
            mapInt32Double_.ApplyEvent(e.MapEvent);
          }
          break;
          case 127: {
            mapBoolBool_.ApplyEvent(e.MapEvent);
          }
          break;
          case 128: {
            mapStringString_.ApplyEvent(e.MapEvent);
          }
          break;
          case 129: {
            mapInt32Bytes_.ApplyEvent(e.MapEvent);
          }
          break;
          case 130: {
            mapInt32Enum_.ApplyEvent(e.MapEvent);
          }
          break;
          case 131: {
            mapInt32ForeignMessage_.ApplyEvent(e.MapEvent);
          }
          break;
          case 132: {
            mapInt32ForeignNoEventsMessage_.ApplyEvent(e.MapEvent);
          }
          break;
          case 133: {
            mapInt32TestAllTypesMessage_.ApplyEvent(e.MapEvent);
          }
          break;
          case 134: {
            mapInt32TestAllTypesNoEventsMessage_.ApplyEvent(e.MapEvent);
          }
          break;
          case 135: {
            if (e.Path.Count - 1 != pathIndex) {
              if (allTypes_ == null) {
                allTypes_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
                allTypes_.SetParent(Context, new EventPath(Context.Path, 135));
              }
              (allTypes_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              allTypes_  = global::Google.Protobuf.TestProtos.TestAllTypes.Parser.ParseFrom(e.Set.ByteData);
              allTypes_.SetParent(Context, new EventPath(Context.Path, 135));
            }
          }
          break;
          case 136: {
            allTypesNoEvents_  = global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser.ParseFrom(e.Set.ByteData);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// This proto includes a recusively nested message.
  /// </summary>
  public sealed partial class NestedTestAllTypes : zpr::EventRegistry<NestedTestAllTypes>, pb::IMessage<NestedTestAllTypes> {
    private static readonly pb::MessageParser<NestedTestAllTypes> _parser = new pb::MessageParser<NestedTestAllTypes>(() => new NestedTestAllTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedTestAllTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes() {
      OnConstruction();
      repeatedChild_.SetContext(Context, 3);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes(NestedTestAllTypes other) : this() {
      child_ = other.child_ != null ? other.Child.Clone() : null;
      payload_ = other.payload_ != null ? other.Payload.Clone() : null;
      repeatedChild_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypes>(repeatedChildDataConverter, other.RepeatedChild.Clone(), true);
      repeatedChild_.SetContext(Context, 3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes Clone() {
      return new NestedTestAllTypes(this);
    }

    public static bool IsEventSourced = true;

    protected override NestedTestAllTypes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      repeatedChild_.SetContext(Context, 3);
    }
    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.NestedTestAllTypes child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.NestedTestAllTypes Child {
      get { return child_; }
      set {
        if(child_ != null) child_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 1));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(child_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        child_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private global::Google.Protobuf.TestProtos.TestAllTypes payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes Payload {
      get { return payload_; }
      set {
        if(payload_ != null) payload_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 2));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(payload_)) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        payload_ = value;
      }
    }

    /// <summary>Field number for the "repeated_child" field.</summary>
    public const int RepeatedChildFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.NestedTestAllTypes> _repeated_repeatedChild_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.TestProtos.NestedTestAllTypes.Parser);
    public class RepeatedChildDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.NestedTestAllTypes> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.NestedTestAllTypes data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.NestedTestAllTypes GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.NestedTestAllTypes.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedChildDataConverter repeatedChildDataConverter = new RepeatedChildDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypes> repeatedChild_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypes>(repeatedChildDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypes> RepeatedChild {
      get { return repeatedChild_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedTestAllTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedTestAllTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Child, other.Child)) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      if(!repeatedChild_.Equals(other.repeatedChild_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (child_ != null) hash ^= Child.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      hash ^= repeatedChild_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (child_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Child);
      }
      if (payload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payload);
      }
      repeatedChild_.WriteTo(output, _repeated_repeatedChild_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (child_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      size += repeatedChild_.CalculateSize(_repeated_repeatedChild_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedTestAllTypes other) {
      if (other == null) {
        return;
      }
      if (other.child_ != null) {
        if (child_ == null) {
          child_ = new global::Google.Protobuf.TestProtos.NestedTestAllTypes();
          child_.SetParent(Context, new EventPath(Context.Path, 1));
        }
        Child.MergeFrom(other.Child);
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
          payload_.SetParent(Context, new EventPath(Context.Path, 2));
        }
        Payload.MergeFrom(other.Payload);
      }
      repeatedChild_.Add(other.repeatedChild_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (child_ == null) {
              child_ = new global::Google.Protobuf.TestProtos.NestedTestAllTypes();
              child_.SetParent(Context, new EventPath(Context.Path, 1));
            }
            input.ReadMessage(child_);
            break;
          }
          case 18: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
              payload_.SetParent(Context, new EventPath(Context.Path, 2));
            }
            input.ReadMessage(payload_);
            break;
          }
          case 26: {
            repeatedChild_.AddEntriesFrom(input, _repeated_repeatedChild_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (child_ == null) {
                child_ = new global::Google.Protobuf.TestProtos.NestedTestAllTypes();
                child_.SetParent(Context, new EventPath(Context.Path, 1));
              }
              (child_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              child_  = global::Google.Protobuf.TestProtos.NestedTestAllTypes.Parser.ParseFrom(e.Set.ByteData);
              child_.SetParent(Context, new EventPath(Context.Path, 1));
            }
          }
          break;
          case 2: {
            if (e.Path.Count - 1 != pathIndex) {
              if (payload_ == null) {
                payload_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
                payload_.SetParent(Context, new EventPath(Context.Path, 2));
              }
              (payload_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              payload_  = global::Google.Protobuf.TestProtos.TestAllTypes.Parser.ParseFrom(e.Set.ByteData);
              payload_.SetParent(Context, new EventPath(Context.Path, 2));
            }
          }
          break;
          case 3: {
            repeatedChild_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestDeprecatedFields : zpr::EventRegistry<TestDeprecatedFields>, pb::IMessage<TestDeprecatedFields> {
    private static readonly pb::MessageParser<TestDeprecatedFields> _parser = new pb::MessageParser<TestDeprecatedFields>(() => new TestDeprecatedFields());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestDeprecatedFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFields(TestDeprecatedFields other) : this() {
      deprecatedInt32_ = other.deprecatedInt32_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFields Clone() {
      return new TestDeprecatedFields(this);
    }

    public static bool IsEventSourced = true;

    protected override TestDeprecatedFields Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "deprecated_int32" field.</summary>
    public const int DeprecatedInt32FieldNumber = 1;
    private int deprecatedInt32_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedInt32 {
      get { return deprecatedInt32_; }
      set {
        #if !DISABLE_EVENTS
        if(deprecatedInt32_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        deprecatedInt32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestDeprecatedFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestDeprecatedFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeprecatedInt32 != other.DeprecatedInt32) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeprecatedInt32 != 0) hash ^= DeprecatedInt32.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedInt32 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeprecatedInt32);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeprecatedInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedInt32);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestDeprecatedFields other) {
      if (other == null) {
        return;
      }
      if (other.DeprecatedInt32 != 0) {
        DeprecatedInt32 = other.DeprecatedInt32;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeprecatedInt32 = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            deprecatedInt32_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Define these after TestAllTypes to make sure the compiler can handle
  /// that.
  /// </summary>
  public sealed partial class ForeignMessage : zpr::EventRegistry<ForeignMessage>, pb::IMessage<ForeignMessage> {
    private static readonly pb::MessageParser<ForeignMessage> _parser = new pb::MessageParser<ForeignMessage>(() => new ForeignMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForeignMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessage(ForeignMessage other) : this() {
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessage Clone() {
      return new ForeignMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override ForeignMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 1;
    private int c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int C {
      get { return c_; }
      set {
        #if !DISABLE_EVENTS
        if(c_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        c_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForeignMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForeignMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (C != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (C != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForeignMessage other) {
      if (other == null) {
        return;
      }
      if (other.C != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            C = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            c_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestReservedFields : zpr::EventRegistry<TestReservedFields>, pb::IMessage<TestReservedFields> {
    private static readonly pb::MessageParser<TestReservedFields> _parser = new pb::MessageParser<TestReservedFields>(() => new TestReservedFields());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestReservedFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFields(TestReservedFields other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFields Clone() {
      return new TestReservedFields(this);
    }

    public static bool IsEventSourced = true;

    protected override TestReservedFields Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestReservedFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestReservedFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestReservedFields other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test that we can use NestedMessage from outside TestAllTypes.
  /// </summary>
  public sealed partial class TestForeignNested : zpr::EventRegistry<TestForeignNested>, pb::IMessage<TestForeignNested> {
    private static readonly pb::MessageParser<TestForeignNested> _parser = new pb::MessageParser<TestForeignNested>(() => new TestForeignNested());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestForeignNested> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNested() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNested(TestForeignNested other) : this() {
      foreignNested_ = other.foreignNested_ != null ? other.ForeignNested.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNested Clone() {
      return new TestForeignNested(this);
    }

    public static bool IsEventSourced = true;

    protected override TestForeignNested Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "foreign_nested" field.</summary>
    public const int ForeignNestedFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage foreignNested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage ForeignNested {
      get { return foreignNested_; }
      set {
        if(foreignNested_ != null) foreignNested_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 1));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(foreignNested_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        foreignNested_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestForeignNested);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestForeignNested other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ForeignNested, other.ForeignNested)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (foreignNested_ != null) hash ^= ForeignNested.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (foreignNested_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ForeignNested);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (foreignNested_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForeignNested);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestForeignNested other) {
      if (other == null) {
        return;
      }
      if (other.foreignNested_ != null) {
        if (foreignNested_ == null) {
          foreignNested_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
          foreignNested_.SetParent(Context, new EventPath(Context.Path, 1));
        }
        ForeignNested.MergeFrom(other.ForeignNested);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (foreignNested_ == null) {
              foreignNested_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
              foreignNested_.SetParent(Context, new EventPath(Context.Path, 1));
            }
            input.ReadMessage(foreignNested_);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (foreignNested_ == null) {
                foreignNested_ = new global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage();
                foreignNested_.SetParent(Context, new EventPath(Context.Path, 1));
              }
              (foreignNested_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              foreignNested_  = global::Google.Protobuf.TestProtos.TestAllTypes.Types.NestedMessage.Parser.ParseFrom(e.Set.ByteData);
              foreignNested_.SetParent(Context, new EventPath(Context.Path, 1));
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test that really large tag numbers don't break anything.
  /// </summary>
  public sealed partial class TestReallyLargeTagNumber : zpr::EventRegistry<TestReallyLargeTagNumber>, pb::IMessage<TestReallyLargeTagNumber> {
    private static readonly pb::MessageParser<TestReallyLargeTagNumber> _parser = new pb::MessageParser<TestReallyLargeTagNumber>(() => new TestReallyLargeTagNumber());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestReallyLargeTagNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumber(TestReallyLargeTagNumber other) : this() {
      a_ = other.a_;
      bb_ = other.bb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumber Clone() {
      return new TestReallyLargeTagNumber(this);
    }

    public static bool IsEventSourced = true;

    protected override TestReallyLargeTagNumber Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    /// <summary>
    /// The largest possible tag number is 2^28 - 1, since the wire format uses
    /// three bits to communicate wire type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        #if !DISABLE_EVENTS
        if(a_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        a_ = value;
      }
    }

    /// <summary>Field number for the "bb" field.</summary>
    public const int BbFieldNumber = 268435455;
    private int bb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bb {
      get { return bb_; }
      set {
        #if !DISABLE_EVENTS
        if(bb_ != value) {
          Context.AddSetEvent(268435455, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        bb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestReallyLargeTagNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestReallyLargeTagNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (Bb != other.Bb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (Bb != 0) hash ^= Bb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (Bb != 0) {
        output.WriteRawTag(248, 255, 255, 255, 7);
        output.WriteInt32(Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (Bb != 0) {
        size += 5 + pb::CodedOutputStream.ComputeInt32Size(Bb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestReallyLargeTagNumber other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.Bb != 0) {
        Bb = other.Bb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 2147483640: {
            Bb = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            a_ = e.Set.I32;
          }
          break;
          case 268435455: {
            bb_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestRecursiveMessage : zpr::EventRegistry<TestRecursiveMessage>, pb::IMessage<TestRecursiveMessage> {
    private static readonly pb::MessageParser<TestRecursiveMessage> _parser = new pb::MessageParser<TestRecursiveMessage>(() => new TestRecursiveMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRecursiveMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessage(TestRecursiveMessage other) : this() {
      a_ = other.a_ != null ? other.A.Clone() : null;
      i_ = other.i_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessage Clone() {
      return new TestRecursiveMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override TestRecursiveMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestRecursiveMessage a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestRecursiveMessage A {
      get { return a_; }
      set {
        if(a_ != null) a_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 1));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(a_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        a_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 2;
    private int i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        #if !DISABLE_EVENTS
        if(i_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        i_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRecursiveMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRecursiveMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(A, other.A)) return false;
      if (I != other.I) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (a_ != null) hash ^= A.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (a_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(A);
      }
      if (I != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(I);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRecursiveMessage other) {
      if (other == null) {
        return;
      }
      if (other.a_ != null) {
        if (a_ == null) {
          a_ = new global::Google.Protobuf.TestProtos.TestRecursiveMessage();
          a_.SetParent(Context, new EventPath(Context.Path, 1));
        }
        A.MergeFrom(other.A);
      }
      if (other.I != 0) {
        I = other.I;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (a_ == null) {
              a_ = new global::Google.Protobuf.TestProtos.TestRecursiveMessage();
              a_.SetParent(Context, new EventPath(Context.Path, 1));
            }
            input.ReadMessage(a_);
            break;
          }
          case 16: {
            I = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (a_ == null) {
                a_ = new global::Google.Protobuf.TestProtos.TestRecursiveMessage();
                a_.SetParent(Context, new EventPath(Context.Path, 1));
              }
              (a_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              a_  = global::Google.Protobuf.TestProtos.TestRecursiveMessage.Parser.ParseFrom(e.Set.ByteData);
              a_.SetParent(Context, new EventPath(Context.Path, 1));
            }
          }
          break;
          case 2: {
            i_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test that mutual recursion works.
  /// </summary>
  public sealed partial class TestMutualRecursionA : zpr::EventRegistry<TestMutualRecursionA>, pb::IMessage<TestMutualRecursionA> {
    private static readonly pb::MessageParser<TestMutualRecursionA> _parser = new pb::MessageParser<TestMutualRecursionA>(() => new TestMutualRecursionA());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestMutualRecursionA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionA(TestMutualRecursionA other) : this() {
      bb_ = other.bb_ != null ? other.Bb.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionA Clone() {
      return new TestMutualRecursionA(this);
    }

    public static bool IsEventSourced = true;

    protected override TestMutualRecursionA Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "bb" field.</summary>
    public const int BbFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestMutualRecursionB bb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestMutualRecursionB Bb {
      get { return bb_; }
      set {
        if(bb_ != null) bb_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 1));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(bb_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        bb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestMutualRecursionA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestMutualRecursionA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bb, other.Bb)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bb_ != null) hash ^= Bb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bb_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestMutualRecursionA other) {
      if (other == null) {
        return;
      }
      if (other.bb_ != null) {
        if (bb_ == null) {
          bb_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionB();
          bb_.SetParent(Context, new EventPath(Context.Path, 1));
        }
        Bb.MergeFrom(other.Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bb_ == null) {
              bb_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionB();
              bb_.SetParent(Context, new EventPath(Context.Path, 1));
            }
            input.ReadMessage(bb_);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (bb_ == null) {
                bb_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionB();
                bb_.SetParent(Context, new EventPath(Context.Path, 1));
              }
              (bb_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              bb_  = global::Google.Protobuf.TestProtos.TestMutualRecursionB.Parser.ParseFrom(e.Set.ByteData);
              bb_.SetParent(Context, new EventPath(Context.Path, 1));
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestMutualRecursionB : zpr::EventRegistry<TestMutualRecursionB>, pb::IMessage<TestMutualRecursionB> {
    private static readonly pb::MessageParser<TestMutualRecursionB> _parser = new pb::MessageParser<TestMutualRecursionB>(() => new TestMutualRecursionB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestMutualRecursionB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionB(TestMutualRecursionB other) : this() {
      a_ = other.a_ != null ? other.A.Clone() : null;
      optionalInt32_ = other.optionalInt32_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionB Clone() {
      return new TestMutualRecursionB(this);
    }

    public static bool IsEventSourced = true;

    protected override TestMutualRecursionB Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestMutualRecursionA a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestMutualRecursionA A {
      get { return a_; }
      set {
        if(a_ != null) a_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 1));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(a_)) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        a_ = value;
      }
    }

    /// <summary>Field number for the "optional_int32" field.</summary>
    public const int OptionalInt32FieldNumber = 2;
    private int optionalInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptionalInt32 {
      get { return optionalInt32_; }
      set {
        #if !DISABLE_EVENTS
        if(optionalInt32_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        optionalInt32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestMutualRecursionB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestMutualRecursionB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(A, other.A)) return false;
      if (OptionalInt32 != other.OptionalInt32) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (a_ != null) hash ^= A.GetHashCode();
      if (OptionalInt32 != 0) hash ^= OptionalInt32.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (a_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(A);
      }
      if (OptionalInt32 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OptionalInt32);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (OptionalInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptionalInt32);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestMutualRecursionB other) {
      if (other == null) {
        return;
      }
      if (other.a_ != null) {
        if (a_ == null) {
          a_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionA();
          a_.SetParent(Context, new EventPath(Context.Path, 1));
        }
        A.MergeFrom(other.A);
      }
      if (other.OptionalInt32 != 0) {
        OptionalInt32 = other.OptionalInt32;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (a_ == null) {
              a_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionA();
              a_.SetParent(Context, new EventPath(Context.Path, 1));
            }
            input.ReadMessage(a_);
            break;
          }
          case 16: {
            OptionalInt32 = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            if (e.Path.Count - 1 != pathIndex) {
              if (a_ == null) {
                a_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionA();
                a_.SetParent(Context, new EventPath(Context.Path, 1));
              }
              (a_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              a_  = global::Google.Protobuf.TestProtos.TestMutualRecursionA.Parser.ParseFrom(e.Set.ByteData);
              a_.SetParent(Context, new EventPath(Context.Path, 1));
            }
          }
          break;
          case 2: {
            optionalInt32_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestEnumAllowAlias : zpr::EventRegistry<TestEnumAllowAlias>, pb::IMessage<TestEnumAllowAlias> {
    private static readonly pb::MessageParser<TestEnumAllowAlias> _parser = new pb::MessageParser<TestEnumAllowAlias>(() => new TestEnumAllowAlias());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestEnumAllowAlias> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAlias() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAlias(TestEnumAllowAlias other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAlias Clone() {
      return new TestEnumAllowAlias(this);
    }

    public static bool IsEventSourced = true;

    protected override TestEnumAllowAlias Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestEnumWithDupValue value_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestEnumWithDupValue Value {
      get { return value_; }
      set {
        #if !DISABLE_EVENTS
        if(value_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestEnumAllowAlias);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestEnumAllowAlias other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestEnumAllowAlias other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            value_ = (global::Google.Protobuf.TestProtos.TestEnumWithDupValue) input.ReadEnum();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            value_ = (global::Google.Protobuf.TestProtos.TestEnumWithDupValue)e.Set.U32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test message with CamelCase field names.  This violates Protocol Buffer
  /// standard style.
  /// </summary>
  public sealed partial class TestCamelCaseFieldNames : zpr::EventRegistry<TestCamelCaseFieldNames>, pb::IMessage<TestCamelCaseFieldNames> {
    private static readonly pb::MessageParser<TestCamelCaseFieldNames> _parser = new pb::MessageParser<TestCamelCaseFieldNames>(() => new TestCamelCaseFieldNames());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCamelCaseFieldNames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNames() {
      OnConstruction();
      repeatedPrimitiveField_.SetContext(Context, 7);
      repeatedStringField_.SetContext(Context, 8);
      repeatedEnumField_.SetContext(Context, 9);
      repeatedMessageField_.SetContext(Context, 10);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNames(TestCamelCaseFieldNames other) : this() {
      primitiveField_ = other.primitiveField_;
      stringField_ = other.stringField_;
      enumField_ = other.enumField_;
      messageField_ = other.messageField_ != null ? other.MessageField.Clone() : null;
      repeatedPrimitiveField_ = new EventRepeatedField<int>(repeatedPrimitiveFieldDataConverter, other.RepeatedPrimitiveField.Clone());
      repeatedPrimitiveField_.SetContext(Context, 7);
      repeatedStringField_ = new EventRepeatedField<string>(repeatedStringFieldDataConverter, other.RepeatedStringField.Clone());
      repeatedStringField_.SetContext(Context, 8);
      repeatedEnumField_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(repeatedEnumFieldDataConverter, other.RepeatedEnumField.Clone());
      repeatedEnumField_.SetContext(Context, 9);
      repeatedMessageField_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage>(repeatedMessageFieldDataConverter, other.RepeatedMessageField.Clone(), true);
      repeatedMessageField_.SetContext(Context, 10);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNames Clone() {
      return new TestCamelCaseFieldNames(this);
    }

    public static bool IsEventSourced = true;

    protected override TestCamelCaseFieldNames Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      repeatedPrimitiveField_.SetContext(Context, 7);
      repeatedStringField_.SetContext(Context, 8);
      repeatedEnumField_.SetContext(Context, 9);
      repeatedMessageField_.SetContext(Context, 10);
    }
    /// <summary>Field number for the "PrimitiveField" field.</summary>
    public const int PrimitiveFieldFieldNumber = 1;
    private int primitiveField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrimitiveField {
      get { return primitiveField_; }
      set {
        #if !DISABLE_EVENTS
        if(primitiveField_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        primitiveField_ = value;
      }
    }

    /// <summary>Field number for the "StringField" field.</summary>
    public const int StringFieldFieldNumber = 2;
    private string stringField_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringField {
      get { return stringField_; }
      set {
        #if !DISABLE_EVENTS
        if(stringField_ != value) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        stringField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EnumField" field.</summary>
    public const int EnumFieldFieldNumber = 3;
    private global::Google.Protobuf.TestProtos.ForeignEnum enumField_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignEnum EnumField {
      get { return enumField_; }
      set {
        #if !DISABLE_EVENTS
        if(enumField_ != value) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        enumField_ = value;
      }
    }

    /// <summary>Field number for the "MessageField" field.</summary>
    public const int MessageFieldFieldNumber = 4;
    private global::Google.Protobuf.TestProtos.ForeignMessage messageField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessage MessageField {
      get { return messageField_; }
      set {
        if(messageField_ != null) messageField_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 4));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(messageField_)) {
          Context.AddSetEvent(4, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        messageField_ = value;
      }
    }

    /// <summary>Field number for the "RepeatedPrimitiveField" field.</summary>
    public const int RepeatedPrimitiveFieldFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_repeatedPrimitiveField_codec
        = pb::FieldCodec.ForInt32(58);
    public class RepeatedPrimitiveFieldDataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static RepeatedPrimitiveFieldDataConverter repeatedPrimitiveFieldDataConverter = new RepeatedPrimitiveFieldDataConverter();
    private readonly EventRepeatedField<int> repeatedPrimitiveField_ = new EventRepeatedField<int>(repeatedPrimitiveFieldDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> RepeatedPrimitiveField {
      get { return repeatedPrimitiveField_; }
    }

    /// <summary>Field number for the "RepeatedStringField" field.</summary>
    public const int RepeatedStringFieldFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_repeatedStringField_codec
        = pb::FieldCodec.ForString(66);
    public class RepeatedStringFieldDataConverter: EventDataConverter<string> {
      public override zpr.EventSource.EventContent GetEventData(string data) {
        return new zpr.EventSource.EventContent() { StringData = data };
      }
      public override string GetItem(zpr.EventSource.EventContent data) {
        return data.StringData;
      }
    }
    private static RepeatedStringFieldDataConverter repeatedStringFieldDataConverter = new RepeatedStringFieldDataConverter();
    private readonly EventRepeatedField<string> repeatedStringField_ = new EventRepeatedField<string>(repeatedStringFieldDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<string> RepeatedStringField {
      get { return repeatedStringField_; }
    }

    /// <summary>Field number for the "RepeatedEnumField" field.</summary>
    public const int RepeatedEnumFieldFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_repeatedEnumField_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    public class RepeatedEnumFieldDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.ForeignEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.ForeignEnum) data.U32;
      }
    }
    private static RepeatedEnumFieldDataConverter repeatedEnumFieldDataConverter = new RepeatedEnumFieldDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> repeatedEnumField_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(repeatedEnumFieldDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> RepeatedEnumField {
      get { return repeatedEnumField_; }
    }

    /// <summary>Field number for the "RepeatedMessageField" field.</summary>
    public const int RepeatedMessageFieldFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignMessage> _repeated_repeatedMessageField_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Protobuf.TestProtos.ForeignMessage.Parser);
    public class RepeatedMessageFieldDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignMessage> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignMessage data) {
        var byteData = (data as pb::IMessage)?.ToByteString();
        return new zpr.EventSource.EventContent() { ByteData = byteData };
      }
      public override global::Google.Protobuf.TestProtos.ForeignMessage GetItem(zpr.EventSource.EventContent data) {
        return global::Google.Protobuf.TestProtos.ForeignMessage.Parser.ParseFrom(data.ByteData);
      }
    }
    private static RepeatedMessageFieldDataConverter repeatedMessageFieldDataConverter = new RepeatedMessageFieldDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage> repeatedMessageField_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage>(repeatedMessageFieldDataConverter, true);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignMessage> RepeatedMessageField {
      get { return repeatedMessageField_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCamelCaseFieldNames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCamelCaseFieldNames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrimitiveField != other.PrimitiveField) return false;
      if (StringField != other.StringField) return false;
      if (EnumField != other.EnumField) return false;
      if (!object.Equals(MessageField, other.MessageField)) return false;
      if(!repeatedPrimitiveField_.Equals(other.repeatedPrimitiveField_)) return false;
      if(!repeatedStringField_.Equals(other.repeatedStringField_)) return false;
      if(!repeatedEnumField_.Equals(other.repeatedEnumField_)) return false;
      if(!repeatedMessageField_.Equals(other.repeatedMessageField_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrimitiveField != 0) hash ^= PrimitiveField.GetHashCode();
      if (StringField.Length != 0) hash ^= StringField.GetHashCode();
      if (EnumField != 0) hash ^= EnumField.GetHashCode();
      if (messageField_ != null) hash ^= MessageField.GetHashCode();
      hash ^= repeatedPrimitiveField_.GetHashCode();
      hash ^= repeatedStringField_.GetHashCode();
      hash ^= repeatedEnumField_.GetHashCode();
      hash ^= repeatedMessageField_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrimitiveField != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PrimitiveField);
      }
      if (StringField.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringField);
      }
      if (EnumField != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumField);
      }
      if (messageField_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MessageField);
      }
      repeatedPrimitiveField_.WriteTo(output, _repeated_repeatedPrimitiveField_codec);
      repeatedStringField_.WriteTo(output, _repeated_repeatedStringField_codec);
      repeatedEnumField_.WriteTo(output, _repeated_repeatedEnumField_codec);
      repeatedMessageField_.WriteTo(output, _repeated_repeatedMessageField_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrimitiveField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimitiveField);
      }
      if (StringField.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringField);
      }
      if (EnumField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumField);
      }
      if (messageField_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageField);
      }
      size += repeatedPrimitiveField_.CalculateSize(_repeated_repeatedPrimitiveField_codec);
      size += repeatedStringField_.CalculateSize(_repeated_repeatedStringField_codec);
      size += repeatedEnumField_.CalculateSize(_repeated_repeatedEnumField_codec);
      size += repeatedMessageField_.CalculateSize(_repeated_repeatedMessageField_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCamelCaseFieldNames other) {
      if (other == null) {
        return;
      }
      if (other.PrimitiveField != 0) {
        PrimitiveField = other.PrimitiveField;
      }
      if (other.StringField.Length != 0) {
        StringField = other.StringField;
      }
      if (other.EnumField != 0) {
        EnumField = other.EnumField;
      }
      if (other.messageField_ != null) {
        if (messageField_ == null) {
          messageField_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
          messageField_.SetParent(Context, new EventPath(Context.Path, 4));
        }
        MessageField.MergeFrom(other.MessageField);
      }
      repeatedPrimitiveField_.Add(other.repeatedPrimitiveField_);
      repeatedStringField_.Add(other.repeatedStringField_);
      repeatedEnumField_.Add(other.repeatedEnumField_);
      repeatedMessageField_.Add(other.repeatedMessageField_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PrimitiveField = input.ReadInt32();
            break;
          }
          case 18: {
            StringField = input.ReadString();
            break;
          }
          case 24: {
            enumField_ = (global::Google.Protobuf.TestProtos.ForeignEnum) input.ReadEnum();
            break;
          }
          case 34: {
            if (messageField_ == null) {
              messageField_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
              messageField_.SetParent(Context, new EventPath(Context.Path, 4));
            }
            input.ReadMessage(messageField_);
            break;
          }
          case 58:
          case 56: {
            repeatedPrimitiveField_.AddEntriesFrom(input, _repeated_repeatedPrimitiveField_codec);
            break;
          }
          case 66: {
            repeatedStringField_.AddEntriesFrom(input, _repeated_repeatedStringField_codec);
            break;
          }
          case 74:
          case 72: {
            repeatedEnumField_.AddEntriesFrom(input, _repeated_repeatedEnumField_codec);
            break;
          }
          case 82: {
            repeatedMessageField_.AddEntriesFrom(input, _repeated_repeatedMessageField_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            primitiveField_ = e.Set.I32;
          }
          break;
          case 2: {
            stringField_ = e.Set.StringData;
          }
          break;
          case 3: {
            enumField_ = (global::Google.Protobuf.TestProtos.ForeignEnum)e.Set.U32;
          }
          break;
          case 4: {
            if (e.Path.Count - 1 != pathIndex) {
              if (messageField_ == null) {
                messageField_ = new global::Google.Protobuf.TestProtos.ForeignMessage();
                messageField_.SetParent(Context, new EventPath(Context.Path, 4));
              }
              (messageField_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              messageField_  = global::Google.Protobuf.TestProtos.ForeignMessage.Parser.ParseFrom(e.Set.ByteData);
              messageField_.SetParent(Context, new EventPath(Context.Path, 4));
            }
          }
          break;
          case 7: {
            repeatedPrimitiveField_.ApplyEvent(e.ListEvent);
          }
          break;
          case 8: {
            repeatedStringField_.ApplyEvent(e.ListEvent);
          }
          break;
          case 9: {
            repeatedEnumField_.ApplyEvent(e.ListEvent);
          }
          break;
          case 10: {
            repeatedMessageField_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// We list fields out of order, to ensure that we're using field number and not
  /// field index to determine serialization order.
  /// </summary>
  public sealed partial class TestFieldOrderings : zpr::EventRegistry<TestFieldOrderings>, pb::IMessage<TestFieldOrderings> {
    private static readonly pb::MessageParser<TestFieldOrderings> _parser = new pb::MessageParser<TestFieldOrderings>(() => new TestFieldOrderings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestFieldOrderings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderings(TestFieldOrderings other) : this() {
      myString_ = other.myString_;
      myInt_ = other.myInt_;
      myFloat_ = other.myFloat_;
      singleNestedMessage_ = other.singleNestedMessage_ != null ? other.SingleNestedMessage.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderings Clone() {
      return new TestFieldOrderings(this);
    }

    public static bool IsEventSourced = true;

    protected override TestFieldOrderings Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "my_string" field.</summary>
    public const int MyStringFieldNumber = 11;
    private string myString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyString {
      get { return myString_; }
      set {
        #if !DISABLE_EVENTS
        if(myString_ != value) {
          Context.AddSetEvent(11, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        myString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "my_int" field.</summary>
    public const int MyIntFieldNumber = 1;
    private long myInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MyInt {
      get { return myInt_; }
      set {
        #if !DISABLE_EVENTS
        if(myInt_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        myInt_ = value;
      }
    }

    /// <summary>Field number for the "my_float" field.</summary>
    public const int MyFloatFieldNumber = 101;
    private float myFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MyFloat {
      get { return myFloat_; }
      set {
        #if !DISABLE_EVENTS
        if(myFloat_ != value) {
          Context.AddSetEvent(101, new zpr.EventSource.EventContent { R32 = value });
        }
        #endif
        myFloat_ = value;
      }
    }

    /// <summary>Field number for the "single_nested_message" field.</summary>
    public const int SingleNestedMessageFieldNumber = 200;
    private global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage singleNestedMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage SingleNestedMessage {
      get { return singleNestedMessage_; }
      set {
        if(singleNestedMessage_ != null) singleNestedMessage_.ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 200));
        #if !DISABLE_EVENTS
        if(value == null || !value.Equals(singleNestedMessage_)) {
          Context.AddSetEvent(200, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        singleNestedMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestFieldOrderings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestFieldOrderings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyString != other.MyString) return false;
      if (MyInt != other.MyInt) return false;
      if (MyFloat != other.MyFloat) return false;
      if (!object.Equals(SingleNestedMessage, other.SingleNestedMessage)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MyString.Length != 0) hash ^= MyString.GetHashCode();
      if (MyInt != 0L) hash ^= MyInt.GetHashCode();
      if (MyFloat != 0F) hash ^= MyFloat.GetHashCode();
      if (singleNestedMessage_ != null) hash ^= SingleNestedMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MyInt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MyInt);
      }
      if (MyString.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MyString);
      }
      if (MyFloat != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(MyFloat);
      }
      if (singleNestedMessage_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(SingleNestedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MyString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyString);
      }
      if (MyInt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MyInt);
      }
      if (MyFloat != 0F) {
        size += 2 + 4;
      }
      if (singleNestedMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleNestedMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestFieldOrderings other) {
      if (other == null) {
        return;
      }
      if (other.MyString.Length != 0) {
        MyString = other.MyString;
      }
      if (other.MyInt != 0L) {
        MyInt = other.MyInt;
      }
      if (other.MyFloat != 0F) {
        MyFloat = other.MyFloat;
      }
      if (other.singleNestedMessage_ != null) {
        if (singleNestedMessage_ == null) {
          singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage();
          singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 200));
        }
        SingleNestedMessage.MergeFrom(other.SingleNestedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MyInt = input.ReadInt64();
            break;
          }
          case 90: {
            MyString = input.ReadString();
            break;
          }
          case 813: {
            MyFloat = input.ReadFloat();
            break;
          }
          case 1602: {
            if (singleNestedMessage_ == null) {
              singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage();
              singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 200));
            }
            input.ReadMessage(singleNestedMessage_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestFieldOrderings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NestedMessage : zpr::EventRegistry<NestedMessage>, pb::IMessage<NestedMessage> {
        private static readonly pb::MessageParser<NestedMessage> _parser = new pb::MessageParser<NestedMessage>(() => new NestedMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.TestProtos.TestFieldOrderings.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage(NestedMessage other) : this() {
          oo_ = other.oo_;
          bb_ = other.bb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage Clone() {
          return new NestedMessage(this);
        }

        public static bool IsEventSourced = true;

        protected override NestedMessage Message { get{ return this; } }

        public override void SetParent(EventContext parent, EventPath path) {
          base.SetParent(parent, path);
        }
        /// <summary>Field number for the "oo" field.</summary>
        public const int OoFieldNumber = 2;
        private long oo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Oo {
          get { return oo_; }
          set {
            #if !DISABLE_EVENTS
            if(oo_ != value) {
              Context.AddSetEvent(2, new zpr.EventSource.EventContent { I64 = value });
            }
            #endif
            oo_ = value;
          }
        }

        /// <summary>Field number for the "bb" field.</summary>
        public const int BbFieldNumber = 1;
        private int bb_;
        /// <summary>
        /// The field name "b" fails to compile in proto1 because it conflicts with
        /// a local variable named "b" in one of the generated methods.  Doh.
        /// This file needs to compile in proto1 to test backwards-compatibility.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Bb {
          get { return bb_; }
          set {
            #if !DISABLE_EVENTS
            if(bb_ != value) {
              Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
            }
            #endif
            bb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Oo != other.Oo) return false;
          if (Bb != other.Bb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Oo != 0L) hash ^= Oo.GetHashCode();
          if (Bb != 0) hash ^= Bb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bb != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
          if (Oo != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Oo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Oo != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Oo);
          }
          if (Bb != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bb);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessage other) {
          if (other == null) {
            return;
          }
          if (other.Oo != 0L) {
            Oo = other.Oo;
          }
          if (other.Bb != 0) {
            Bb = other.Bb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
              case 16: {
                Oo = input.ReadInt64();
                break;
              }
            }
          }
        }

        public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
            MarkDirty();
            if (e.Path.Count == 0) {
              this.MergeFrom(e.Set.ByteData);
              return true;
            }
            switch (e.Path[pathIndex]) {
              case 2: {
                oo_ = e.Set.I64;
              }
              break;
              case 1: {
                bb_ = e.Set.I32;
              }
              break;
              default:
                return false;
              break;
            }
          return true;
        }

        public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
          ClearEvents();
          var er = new zpr.EventSource.EventSourceRoot();
          var setEvent = new zpr.EventSource.EventData {
            Set = new zpr.EventSource.EventContent {
              ByteData = this.ToByteString()
            }
          };
          er.Events.Add(setEvent);
          return er;
        }

      }

    }
    #endregion

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 11: {
            myString_ = e.Set.StringData;
          }
          break;
          case 1: {
            myInt_ = e.Set.I64;
          }
          break;
          case 101: {
            myFloat_ = e.Set.R32;
          }
          break;
          case 200: {
            if (e.Path.Count - 1 != pathIndex) {
              if (singleNestedMessage_ == null) {
                singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage();
                singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 200));
              }
              (singleNestedMessage_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              singleNestedMessage_  = global::Google.Protobuf.TestProtos.TestFieldOrderings.Types.NestedMessage.Parser.ParseFrom(e.Set.ByteData);
              singleNestedMessage_.SetParent(Context, new EventPath(Context.Path, 200));
            }
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class SparseEnumMessage : zpr::EventRegistry<SparseEnumMessage>, pb::IMessage<SparseEnumMessage> {
    private static readonly pb::MessageParser<SparseEnumMessage> _parser = new pb::MessageParser<SparseEnumMessage>(() => new SparseEnumMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseEnumMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessage(SparseEnumMessage other) : this() {
      sparseEnum_ = other.sparseEnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessage Clone() {
      return new SparseEnumMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override SparseEnumMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "sparse_enum" field.</summary>
    public const int SparseEnumFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestSparseEnum sparseEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestSparseEnum SparseEnum {
      get { return sparseEnum_; }
      set {
        #if !DISABLE_EVENTS
        if(sparseEnum_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { U32 = (uint) value });
        }
        #endif
        sparseEnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseEnumMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseEnumMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SparseEnum != other.SparseEnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SparseEnum != 0) hash ^= SparseEnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SparseEnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SparseEnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SparseEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SparseEnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseEnumMessage other) {
      if (other == null) {
        return;
      }
      if (other.SparseEnum != 0) {
        SparseEnum = other.SparseEnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sparseEnum_ = (global::Google.Protobuf.TestProtos.TestSparseEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            sparseEnum_ = (global::Google.Protobuf.TestProtos.TestSparseEnum)e.Set.U32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test String and Bytes: string is for valid UTF-8 strings
  /// </summary>
  public sealed partial class OneString : zpr::EventRegistry<OneString>, pb::IMessage<OneString> {
    private static readonly pb::MessageParser<OneString> _parser = new pb::MessageParser<OneString>(() => new OneString());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneString(OneString other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneString Clone() {
      return new OneString(this);
    }

    public static bool IsEventSourced = true;

    protected override OneString Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneString other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.StringData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MoreString : zpr::EventRegistry<MoreString>, pb::IMessage<MoreString> {
    private static readonly pb::MessageParser<MoreString> _parser = new pb::MessageParser<MoreString>(() => new MoreString());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoreString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreString() {
      OnConstruction();
      data_.SetContext(Context, 1);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreString(MoreString other) : this() {
      data_ = new EventRepeatedField<string>(dataDataConverter, other.Data.Clone());
      data_.SetContext(Context, 1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreString Clone() {
      return new MoreString(this);
    }

    public static bool IsEventSourced = true;

    protected override MoreString Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      data_.SetContext(Context, 1);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_data_codec
        = pb::FieldCodec.ForString(10);
    public class DataDataConverter: EventDataConverter<string> {
      public override zpr.EventSource.EventContent GetEventData(string data) {
        return new zpr.EventSource.EventContent() { StringData = data };
      }
      public override string GetItem(zpr.EventSource.EventContent data) {
        return data.StringData;
      }
    }
    private static DataDataConverter dataDataConverter = new DataDataConverter();
    private readonly EventRepeatedField<string> data_ = new EventRepeatedField<string>(dataDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<string> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoreString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoreString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoreString other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class OneBytes : zpr::EventRegistry<OneBytes>, pb::IMessage<OneBytes> {
    private static readonly pb::MessageParser<OneBytes> _parser = new pb::MessageParser<OneBytes>(() => new OneBytes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneBytes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytes(OneBytes other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytes Clone() {
      return new OneBytes(this);
    }

    public static bool IsEventSourced = true;

    protected override OneBytes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneBytes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneBytes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneBytes other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.ByteData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class MoreBytes : zpr::EventRegistry<MoreBytes>, pb::IMessage<MoreBytes> {
    private static readonly pb::MessageParser<MoreBytes> _parser = new pb::MessageParser<MoreBytes>(() => new MoreBytes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoreBytes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytes(MoreBytes other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytes Clone() {
      return new MoreBytes(this);
    }

    public static bool IsEventSourced = true;

    protected override MoreBytes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { ByteData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoreBytes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoreBytes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoreBytes other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.ByteData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test int32, uint32, int64, uint64, and bool are all compatible
  /// </summary>
  public sealed partial class Int32Message : zpr::EventRegistry<Int32Message>, pb::IMessage<Int32Message> {
    private static readonly pb::MessageParser<Int32Message> _parser = new pb::MessageParser<Int32Message>(() => new Int32Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int32Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32Message(Int32Message other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32Message Clone() {
      return new Int32Message(this);
    }

    public static bool IsEventSourced = true;

    protected override Int32Message Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int32Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int32Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int32Message other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.I32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class Uint32Message : zpr::EventRegistry<Uint32Message>, pb::IMessage<Uint32Message> {
    private static readonly pb::MessageParser<Uint32Message> _parser = new pb::MessageParser<Uint32Message>(() => new Uint32Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uint32Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32Message(Uint32Message other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32Message Clone() {
      return new Uint32Message(this);
    }

    public static bool IsEventSourced = true;

    protected override Uint32Message Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private uint data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { U32 = value });
        }
        #endif
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uint32Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uint32Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uint32Message other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadUInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.U32;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class Int64Message : zpr::EventRegistry<Int64Message>, pb::IMessage<Int64Message> {
    private static readonly pb::MessageParser<Int64Message> _parser = new pb::MessageParser<Int64Message>(() => new Int64Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64Message(Int64Message other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64Message Clone() {
      return new Int64Message(this);
    }

    public static bool IsEventSourced = true;

    protected override Int64Message Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private long data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I64 = value });
        }
        #endif
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0L) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64Message other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0L) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt64();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.I64;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class Uint64Message : zpr::EventRegistry<Uint64Message>, pb::IMessage<Uint64Message> {
    private static readonly pb::MessageParser<Uint64Message> _parser = new pb::MessageParser<Uint64Message>(() => new Uint64Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uint64Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64Message(Uint64Message other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64Message Clone() {
      return new Uint64Message(this);
    }

    public static bool IsEventSourced = true;

    protected override Uint64Message Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private ulong data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { U64 = value });
        }
        #endif
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uint64Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uint64Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0UL) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uint64Message other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0UL) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadUInt64();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.U64;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class BoolMessage : zpr::EventRegistry<BoolMessage>, pb::IMessage<BoolMessage> {
    private static readonly pb::MessageParser<BoolMessage> _parser = new pb::MessageParser<BoolMessage>(() => new BoolMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessage(BoolMessage other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessage Clone() {
      return new BoolMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override BoolMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private bool data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Data {
      get { return data_; }
      set {
        #if !DISABLE_EVENTS
        if(data_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { BoolData = value });
        }
        #endif
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != false) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != false) {
        output.WriteRawTag(8);
        output.WriteBool(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolMessage other) {
      if (other == null) {
        return;
      }
      if (other.Data != false) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadBool();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Set.BoolData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test oneofs.
  /// </summary>
  public sealed partial class TestOneof : zpr::EventRegistry<TestOneof>, pb::IMessage<TestOneof> {
    private static readonly pb::MessageParser<TestOneof> _parser = new pb::MessageParser<TestOneof>(() => new TestOneof());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestOneof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneof(TestOneof other) : this() {
      switch (other.FooCase) {
        case FooOneofCase.FooInt:
          FooInt = other.FooInt;
          break;
        case FooOneofCase.FooString:
          FooString = other.FooString;
          break;
        case FooOneofCase.FooMessage:
          FooMessage = other.FooMessage.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneof Clone() {
      return new TestOneof(this);
    }

    public static bool IsEventSourced = true;

    protected override TestOneof Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "foo_int" field.</summary>
    public const int FooIntFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FooInt {
      get { return fooCase_ == FooOneofCase.FooInt ? (int) foo_ : 0; }
      set {
        #if !DISABLE_EVENTS
        if(fooCase_ != FooOneofCase.FooInt || value != (int) foo_) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { I32 = value });
        }
        #endif
        foo_ = value;
        fooCase_ = FooOneofCase.FooInt;
      }
    }

    /// <summary>Field number for the "foo_string" field.</summary>
    public const int FooStringFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FooString {
      get { return fooCase_ == FooOneofCase.FooString ? (string) foo_ : ""; }
      set {
        #if !DISABLE_EVENTS
        if(fooCase_ != FooOneofCase.FooString || value != (string) foo_) {
          Context.AddSetEvent(2, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        foo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fooCase_ = FooOneofCase.FooString;
      }
    }

    /// <summary>Field number for the "foo_message" field.</summary>
    public const int FooMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes FooMessage {
      get { return fooCase_ == FooOneofCase.FooMessage ? (global::Google.Protobuf.TestProtos.TestAllTypes) foo_ : null; }
      set {
        if(fooCase_ == FooOneofCase.FooMessage && foo_ != null) ((global::Google.Protobuf.TestProtos.TestAllTypes) foo_).ClearParent();
        value.SetParent(Context, new EventPath(Context.Path, 3));
        #if !DISABLE_EVENTS
        if(fooCase_ != FooOneofCase.FooMessage || !value.Equals(foo_)) {
          Context.AddSetEvent(3, new zpr.EventSource.EventContent { ByteData = value.ToByteString() });
        }
        #endif
        foo_ = value;
        fooCase_ = value == null ? FooOneofCase.None : FooOneofCase.FooMessage;
      }
    }

    private object foo_;
    /// <summary>Enum of possible cases for the "foo" oneof.</summary>
    public enum FooOneofCase {
      None = 0,
      FooInt = 1,
      FooString = 2,
      FooMessage = 3,
    }
    private FooOneofCase fooCase_ = FooOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooOneofCase FooCase {
      get { return fooCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoo() {
      throw new NotSupportedException("Clearing oneofs is not supported by the event system");
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestOneof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestOneof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FooInt != other.FooInt) return false;
      if (FooString != other.FooString) return false;
      if (!object.Equals(FooMessage, other.FooMessage)) return false;
      if (FooCase != other.FooCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fooCase_ == FooOneofCase.FooInt) hash ^= FooInt.GetHashCode();
      if (fooCase_ == FooOneofCase.FooString) hash ^= FooString.GetHashCode();
      if (fooCase_ == FooOneofCase.FooMessage) hash ^= FooMessage.GetHashCode();
      hash ^= (int) fooCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fooCase_ == FooOneofCase.FooInt) {
        output.WriteRawTag(8);
        output.WriteInt32(FooInt);
      }
      if (fooCase_ == FooOneofCase.FooString) {
        output.WriteRawTag(18);
        output.WriteString(FooString);
      }
      if (fooCase_ == FooOneofCase.FooMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(FooMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fooCase_ == FooOneofCase.FooInt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FooInt);
      }
      if (fooCase_ == FooOneofCase.FooString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FooString);
      }
      if (fooCase_ == FooOneofCase.FooMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FooMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestOneof other) {
      if (other == null) {
        return;
      }
      switch (other.FooCase) {
        case FooOneofCase.FooInt:
          FooInt = other.FooInt;
          break;
        case FooOneofCase.FooString:
          FooString = other.FooString;
          break;
        case FooOneofCase.FooMessage:
          if (FooMessage == null) {
            FooMessage = new global::Google.Protobuf.TestProtos.TestAllTypes();
            FooMessage.SetParent(Context, new EventPath(Context.Path, 3));
          }
          FooMessage.MergeFrom(other.FooMessage);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FooInt = input.ReadInt32();
            break;
          }
          case 18: {
            FooString = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Protobuf.TestProtos.TestAllTypes subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypes();
            if (fooCase_ == FooOneofCase.FooMessage) {
              subBuilder.MergeFrom(FooMessage);
            }
            input.ReadMessage(subBuilder);
            FooMessage = subBuilder;
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            foo_ = e.Set.I32;
            fooCase_ = FooOneofCase.FooInt;
          }
          break;
          case 2: {
            foo_ = pb::ProtoPreconditions.CheckNotNull(e.Set.StringData, "value");
            fooCase_ = FooOneofCase.FooString;
          }
          break;
          case 3: {
            if (e.Path.Count - 1 != pathIndex) {
              if (foo_ == null) {
                foo_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
                (foo_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 3));
              }
              (foo_ as zpr::IEventRegistry)?.ApplyEvent(e, pathIndex + 1);
            } else {
              foo_   = global::Google.Protobuf.TestProtos.TestAllTypes.Parser.ParseFrom(e.Set.ByteData);
              (foo_ as zpr::IEventRegistry)?.SetParent(Context, new EventPath(Context.Path, 3));
            }
            fooCase_ = foo_ == null ? FooOneofCase.None : FooOneofCase.FooMessage;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestPackedTypes : zpr::EventRegistry<TestPackedTypes>, pb::IMessage<TestPackedTypes> {
    private static readonly pb::MessageParser<TestPackedTypes> _parser = new pb::MessageParser<TestPackedTypes>(() => new TestPackedTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestPackedTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypes() {
      OnConstruction();
      packedInt32_.SetContext(Context, 90);
      packedInt64_.SetContext(Context, 91);
      packedUint32_.SetContext(Context, 92);
      packedUint64_.SetContext(Context, 93);
      packedSint32_.SetContext(Context, 94);
      packedSint64_.SetContext(Context, 95);
      packedFixed32_.SetContext(Context, 96);
      packedFixed64_.SetContext(Context, 97);
      packedSfixed32_.SetContext(Context, 98);
      packedSfixed64_.SetContext(Context, 99);
      packedFloat_.SetContext(Context, 100);
      packedDouble_.SetContext(Context, 101);
      packedBool_.SetContext(Context, 102);
      packedEnum_.SetContext(Context, 103);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypes(TestPackedTypes other) : this() {
      packedInt32_ = new EventRepeatedField<int>(packedInt32DataConverter, other.PackedInt32.Clone());
      packedInt32_.SetContext(Context, 90);
      packedInt64_ = new EventRepeatedField<long>(packedInt64DataConverter, other.PackedInt64.Clone());
      packedInt64_.SetContext(Context, 91);
      packedUint32_ = new EventRepeatedField<uint>(packedUint32DataConverter, other.PackedUint32.Clone());
      packedUint32_.SetContext(Context, 92);
      packedUint64_ = new EventRepeatedField<ulong>(packedUint64DataConverter, other.PackedUint64.Clone());
      packedUint64_.SetContext(Context, 93);
      packedSint32_ = new EventRepeatedField<int>(packedSint32DataConverter, other.PackedSint32.Clone());
      packedSint32_.SetContext(Context, 94);
      packedSint64_ = new EventRepeatedField<long>(packedSint64DataConverter, other.PackedSint64.Clone());
      packedSint64_.SetContext(Context, 95);
      packedFixed32_ = new EventRepeatedField<uint>(packedFixed32DataConverter, other.PackedFixed32.Clone());
      packedFixed32_.SetContext(Context, 96);
      packedFixed64_ = new EventRepeatedField<ulong>(packedFixed64DataConverter, other.PackedFixed64.Clone());
      packedFixed64_.SetContext(Context, 97);
      packedSfixed32_ = new EventRepeatedField<int>(packedSfixed32DataConverter, other.PackedSfixed32.Clone());
      packedSfixed32_.SetContext(Context, 98);
      packedSfixed64_ = new EventRepeatedField<long>(packedSfixed64DataConverter, other.PackedSfixed64.Clone());
      packedSfixed64_.SetContext(Context, 99);
      packedFloat_ = new EventRepeatedField<float>(packedFloatDataConverter, other.PackedFloat.Clone());
      packedFloat_.SetContext(Context, 100);
      packedDouble_ = new EventRepeatedField<double>(packedDoubleDataConverter, other.PackedDouble.Clone());
      packedDouble_.SetContext(Context, 101);
      packedBool_ = new EventRepeatedField<bool>(packedBoolDataConverter, other.PackedBool.Clone());
      packedBool_.SetContext(Context, 102);
      packedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(packedEnumDataConverter, other.PackedEnum.Clone());
      packedEnum_.SetContext(Context, 103);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypes Clone() {
      return new TestPackedTypes(this);
    }

    public static bool IsEventSourced = true;

    protected override TestPackedTypes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      packedInt32_.SetContext(Context, 90);
      packedInt64_.SetContext(Context, 91);
      packedUint32_.SetContext(Context, 92);
      packedUint64_.SetContext(Context, 93);
      packedSint32_.SetContext(Context, 94);
      packedSint64_.SetContext(Context, 95);
      packedFixed32_.SetContext(Context, 96);
      packedFixed64_.SetContext(Context, 97);
      packedSfixed32_.SetContext(Context, 98);
      packedSfixed64_.SetContext(Context, 99);
      packedFloat_.SetContext(Context, 100);
      packedDouble_.SetContext(Context, 101);
      packedBool_.SetContext(Context, 102);
      packedEnum_.SetContext(Context, 103);
    }
    /// <summary>Field number for the "packed_int32" field.</summary>
    public const int PackedInt32FieldNumber = 90;
    private static readonly pb::FieldCodec<int> _repeated_packedInt32_codec
        = pb::FieldCodec.ForInt32(722);
    public class PackedInt32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static PackedInt32DataConverter packedInt32DataConverter = new PackedInt32DataConverter();
    private readonly EventRepeatedField<int> packedInt32_ = new EventRepeatedField<int>(packedInt32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> PackedInt32 {
      get { return packedInt32_; }
    }

    /// <summary>Field number for the "packed_int64" field.</summary>
    public const int PackedInt64FieldNumber = 91;
    private static readonly pb::FieldCodec<long> _repeated_packedInt64_codec
        = pb::FieldCodec.ForInt64(730);
    public class PackedInt64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { I64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.I64;
      }
    }
    private static PackedInt64DataConverter packedInt64DataConverter = new PackedInt64DataConverter();
    private readonly EventRepeatedField<long> packedInt64_ = new EventRepeatedField<long>(packedInt64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> PackedInt64 {
      get { return packedInt64_; }
    }

    /// <summary>Field number for the "packed_uint32" field.</summary>
    public const int PackedUint32FieldNumber = 92;
    private static readonly pb::FieldCodec<uint> _repeated_packedUint32_codec
        = pb::FieldCodec.ForUInt32(738);
    public class PackedUint32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { U32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.U32;
      }
    }
    private static PackedUint32DataConverter packedUint32DataConverter = new PackedUint32DataConverter();
    private readonly EventRepeatedField<uint> packedUint32_ = new EventRepeatedField<uint>(packedUint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> PackedUint32 {
      get { return packedUint32_; }
    }

    /// <summary>Field number for the "packed_uint64" field.</summary>
    public const int PackedUint64FieldNumber = 93;
    private static readonly pb::FieldCodec<ulong> _repeated_packedUint64_codec
        = pb::FieldCodec.ForUInt64(746);
    public class PackedUint64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { U64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.U64;
      }
    }
    private static PackedUint64DataConverter packedUint64DataConverter = new PackedUint64DataConverter();
    private readonly EventRepeatedField<ulong> packedUint64_ = new EventRepeatedField<ulong>(packedUint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> PackedUint64 {
      get { return packedUint64_; }
    }

    /// <summary>Field number for the "packed_sint32" field.</summary>
    public const int PackedSint32FieldNumber = 94;
    private static readonly pb::FieldCodec<int> _repeated_packedSint32_codec
        = pb::FieldCodec.ForSInt32(754);
    public class PackedSint32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SI32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SI32;
      }
    }
    private static PackedSint32DataConverter packedSint32DataConverter = new PackedSint32DataConverter();
    private readonly EventRepeatedField<int> packedSint32_ = new EventRepeatedField<int>(packedSint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> PackedSint32 {
      get { return packedSint32_; }
    }

    /// <summary>Field number for the "packed_sint64" field.</summary>
    public const int PackedSint64FieldNumber = 95;
    private static readonly pb::FieldCodec<long> _repeated_packedSint64_codec
        = pb::FieldCodec.ForSInt64(762);
    public class PackedSint64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SI64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SI64;
      }
    }
    private static PackedSint64DataConverter packedSint64DataConverter = new PackedSint64DataConverter();
    private readonly EventRepeatedField<long> packedSint64_ = new EventRepeatedField<long>(packedSint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> PackedSint64 {
      get { return packedSint64_; }
    }

    /// <summary>Field number for the "packed_fixed32" field.</summary>
    public const int PackedFixed32FieldNumber = 96;
    private static readonly pb::FieldCodec<uint> _repeated_packedFixed32_codec
        = pb::FieldCodec.ForFixed32(770);
    public class PackedFixed32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { F32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.F32;
      }
    }
    private static PackedFixed32DataConverter packedFixed32DataConverter = new PackedFixed32DataConverter();
    private readonly EventRepeatedField<uint> packedFixed32_ = new EventRepeatedField<uint>(packedFixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> PackedFixed32 {
      get { return packedFixed32_; }
    }

    /// <summary>Field number for the "packed_fixed64" field.</summary>
    public const int PackedFixed64FieldNumber = 97;
    private static readonly pb::FieldCodec<ulong> _repeated_packedFixed64_codec
        = pb::FieldCodec.ForFixed64(778);
    public class PackedFixed64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { F64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.F64;
      }
    }
    private static PackedFixed64DataConverter packedFixed64DataConverter = new PackedFixed64DataConverter();
    private readonly EventRepeatedField<ulong> packedFixed64_ = new EventRepeatedField<ulong>(packedFixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> PackedFixed64 {
      get { return packedFixed64_; }
    }

    /// <summary>Field number for the "packed_sfixed32" field.</summary>
    public const int PackedSfixed32FieldNumber = 98;
    private static readonly pb::FieldCodec<int> _repeated_packedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(786);
    public class PackedSfixed32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SF32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SF32;
      }
    }
    private static PackedSfixed32DataConverter packedSfixed32DataConverter = new PackedSfixed32DataConverter();
    private readonly EventRepeatedField<int> packedSfixed32_ = new EventRepeatedField<int>(packedSfixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> PackedSfixed32 {
      get { return packedSfixed32_; }
    }

    /// <summary>Field number for the "packed_sfixed64" field.</summary>
    public const int PackedSfixed64FieldNumber = 99;
    private static readonly pb::FieldCodec<long> _repeated_packedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(794);
    public class PackedSfixed64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SF64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SF64;
      }
    }
    private static PackedSfixed64DataConverter packedSfixed64DataConverter = new PackedSfixed64DataConverter();
    private readonly EventRepeatedField<long> packedSfixed64_ = new EventRepeatedField<long>(packedSfixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> PackedSfixed64 {
      get { return packedSfixed64_; }
    }

    /// <summary>Field number for the "packed_float" field.</summary>
    public const int PackedFloatFieldNumber = 100;
    private static readonly pb::FieldCodec<float> _repeated_packedFloat_codec
        = pb::FieldCodec.ForFloat(802);
    public class PackedFloatDataConverter: EventDataConverter<float> {
      public override zpr.EventSource.EventContent GetEventData(float data) {
        return new zpr.EventSource.EventContent() { R32 = data };
      }
      public override float GetItem(zpr.EventSource.EventContent data) {
        return data.R32;
      }
    }
    private static PackedFloatDataConverter packedFloatDataConverter = new PackedFloatDataConverter();
    private readonly EventRepeatedField<float> packedFloat_ = new EventRepeatedField<float>(packedFloatDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<float> PackedFloat {
      get { return packedFloat_; }
    }

    /// <summary>Field number for the "packed_double" field.</summary>
    public const int PackedDoubleFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_packedDouble_codec
        = pb::FieldCodec.ForDouble(810);
    public class PackedDoubleDataConverter: EventDataConverter<double> {
      public override zpr.EventSource.EventContent GetEventData(double data) {
        return new zpr.EventSource.EventContent() { R64 = data };
      }
      public override double GetItem(zpr.EventSource.EventContent data) {
        return data.R64;
      }
    }
    private static PackedDoubleDataConverter packedDoubleDataConverter = new PackedDoubleDataConverter();
    private readonly EventRepeatedField<double> packedDouble_ = new EventRepeatedField<double>(packedDoubleDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<double> PackedDouble {
      get { return packedDouble_; }
    }

    /// <summary>Field number for the "packed_bool" field.</summary>
    public const int PackedBoolFieldNumber = 102;
    private static readonly pb::FieldCodec<bool> _repeated_packedBool_codec
        = pb::FieldCodec.ForBool(818);
    public class PackedBoolDataConverter: EventDataConverter<bool> {
      public override zpr.EventSource.EventContent GetEventData(bool data) {
        return new zpr.EventSource.EventContent() { BoolData = data };
      }
      public override bool GetItem(zpr.EventSource.EventContent data) {
        return data.BoolData;
      }
    }
    private static PackedBoolDataConverter packedBoolDataConverter = new PackedBoolDataConverter();
    private readonly EventRepeatedField<bool> packedBool_ = new EventRepeatedField<bool>(packedBoolDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<bool> PackedBool {
      get { return packedBool_; }
    }

    /// <summary>Field number for the "packed_enum" field.</summary>
    public const int PackedEnumFieldNumber = 103;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_packedEnum_codec
        = pb::FieldCodec.ForEnum(826, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    public class PackedEnumDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.ForeignEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.ForeignEnum) data.U32;
      }
    }
    private static PackedEnumDataConverter packedEnumDataConverter = new PackedEnumDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> packedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(packedEnumDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> PackedEnum {
      get { return packedEnum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestPackedTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestPackedTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packedInt32_.Equals(other.packedInt32_)) return false;
      if(!packedInt64_.Equals(other.packedInt64_)) return false;
      if(!packedUint32_.Equals(other.packedUint32_)) return false;
      if(!packedUint64_.Equals(other.packedUint64_)) return false;
      if(!packedSint32_.Equals(other.packedSint32_)) return false;
      if(!packedSint64_.Equals(other.packedSint64_)) return false;
      if(!packedFixed32_.Equals(other.packedFixed32_)) return false;
      if(!packedFixed64_.Equals(other.packedFixed64_)) return false;
      if(!packedSfixed32_.Equals(other.packedSfixed32_)) return false;
      if(!packedSfixed64_.Equals(other.packedSfixed64_)) return false;
      if(!packedFloat_.Equals(other.packedFloat_)) return false;
      if(!packedDouble_.Equals(other.packedDouble_)) return false;
      if(!packedBool_.Equals(other.packedBool_)) return false;
      if(!packedEnum_.Equals(other.packedEnum_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packedInt32_.GetHashCode();
      hash ^= packedInt64_.GetHashCode();
      hash ^= packedUint32_.GetHashCode();
      hash ^= packedUint64_.GetHashCode();
      hash ^= packedSint32_.GetHashCode();
      hash ^= packedSint64_.GetHashCode();
      hash ^= packedFixed32_.GetHashCode();
      hash ^= packedFixed64_.GetHashCode();
      hash ^= packedSfixed32_.GetHashCode();
      hash ^= packedSfixed64_.GetHashCode();
      hash ^= packedFloat_.GetHashCode();
      hash ^= packedDouble_.GetHashCode();
      hash ^= packedBool_.GetHashCode();
      hash ^= packedEnum_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packedInt32_.WriteTo(output, _repeated_packedInt32_codec);
      packedInt64_.WriteTo(output, _repeated_packedInt64_codec);
      packedUint32_.WriteTo(output, _repeated_packedUint32_codec);
      packedUint64_.WriteTo(output, _repeated_packedUint64_codec);
      packedSint32_.WriteTo(output, _repeated_packedSint32_codec);
      packedSint64_.WriteTo(output, _repeated_packedSint64_codec);
      packedFixed32_.WriteTo(output, _repeated_packedFixed32_codec);
      packedFixed64_.WriteTo(output, _repeated_packedFixed64_codec);
      packedSfixed32_.WriteTo(output, _repeated_packedSfixed32_codec);
      packedSfixed64_.WriteTo(output, _repeated_packedSfixed64_codec);
      packedFloat_.WriteTo(output, _repeated_packedFloat_codec);
      packedDouble_.WriteTo(output, _repeated_packedDouble_codec);
      packedBool_.WriteTo(output, _repeated_packedBool_codec);
      packedEnum_.WriteTo(output, _repeated_packedEnum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packedInt32_.CalculateSize(_repeated_packedInt32_codec);
      size += packedInt64_.CalculateSize(_repeated_packedInt64_codec);
      size += packedUint32_.CalculateSize(_repeated_packedUint32_codec);
      size += packedUint64_.CalculateSize(_repeated_packedUint64_codec);
      size += packedSint32_.CalculateSize(_repeated_packedSint32_codec);
      size += packedSint64_.CalculateSize(_repeated_packedSint64_codec);
      size += packedFixed32_.CalculateSize(_repeated_packedFixed32_codec);
      size += packedFixed64_.CalculateSize(_repeated_packedFixed64_codec);
      size += packedSfixed32_.CalculateSize(_repeated_packedSfixed32_codec);
      size += packedSfixed64_.CalculateSize(_repeated_packedSfixed64_codec);
      size += packedFloat_.CalculateSize(_repeated_packedFloat_codec);
      size += packedDouble_.CalculateSize(_repeated_packedDouble_codec);
      size += packedBool_.CalculateSize(_repeated_packedBool_codec);
      size += packedEnum_.CalculateSize(_repeated_packedEnum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestPackedTypes other) {
      if (other == null) {
        return;
      }
      packedInt32_.Add(other.packedInt32_);
      packedInt64_.Add(other.packedInt64_);
      packedUint32_.Add(other.packedUint32_);
      packedUint64_.Add(other.packedUint64_);
      packedSint32_.Add(other.packedSint32_);
      packedSint64_.Add(other.packedSint64_);
      packedFixed32_.Add(other.packedFixed32_);
      packedFixed64_.Add(other.packedFixed64_);
      packedSfixed32_.Add(other.packedSfixed32_);
      packedSfixed64_.Add(other.packedSfixed64_);
      packedFloat_.Add(other.packedFloat_);
      packedDouble_.Add(other.packedDouble_);
      packedBool_.Add(other.packedBool_);
      packedEnum_.Add(other.packedEnum_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722:
          case 720: {
            packedInt32_.AddEntriesFrom(input, _repeated_packedInt32_codec);
            break;
          }
          case 730:
          case 728: {
            packedInt64_.AddEntriesFrom(input, _repeated_packedInt64_codec);
            break;
          }
          case 738:
          case 736: {
            packedUint32_.AddEntriesFrom(input, _repeated_packedUint32_codec);
            break;
          }
          case 746:
          case 744: {
            packedUint64_.AddEntriesFrom(input, _repeated_packedUint64_codec);
            break;
          }
          case 754:
          case 752: {
            packedSint32_.AddEntriesFrom(input, _repeated_packedSint32_codec);
            break;
          }
          case 762:
          case 760: {
            packedSint64_.AddEntriesFrom(input, _repeated_packedSint64_codec);
            break;
          }
          case 770:
          case 773: {
            packedFixed32_.AddEntriesFrom(input, _repeated_packedFixed32_codec);
            break;
          }
          case 778:
          case 777: {
            packedFixed64_.AddEntriesFrom(input, _repeated_packedFixed64_codec);
            break;
          }
          case 786:
          case 789: {
            packedSfixed32_.AddEntriesFrom(input, _repeated_packedSfixed32_codec);
            break;
          }
          case 794:
          case 793: {
            packedSfixed64_.AddEntriesFrom(input, _repeated_packedSfixed64_codec);
            break;
          }
          case 802:
          case 805: {
            packedFloat_.AddEntriesFrom(input, _repeated_packedFloat_codec);
            break;
          }
          case 810:
          case 809: {
            packedDouble_.AddEntriesFrom(input, _repeated_packedDouble_codec);
            break;
          }
          case 818:
          case 816: {
            packedBool_.AddEntriesFrom(input, _repeated_packedBool_codec);
            break;
          }
          case 826:
          case 824: {
            packedEnum_.AddEntriesFrom(input, _repeated_packedEnum_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 90: {
            packedInt32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 91: {
            packedInt64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 92: {
            packedUint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 93: {
            packedUint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 94: {
            packedSint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 95: {
            packedSint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 96: {
            packedFixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 97: {
            packedFixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 98: {
            packedSfixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 99: {
            packedSfixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 100: {
            packedFloat_.ApplyEvent(e.ListEvent);
          }
          break;
          case 101: {
            packedDouble_.ApplyEvent(e.ListEvent);
          }
          break;
          case 102: {
            packedBool_.ApplyEvent(e.ListEvent);
          }
          break;
          case 103: {
            packedEnum_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// A message with the same fields as TestPackedTypes, but without packing. Used
  /// to test packed &lt;-> unpacked wire compatibility.
  /// </summary>
  public sealed partial class TestUnpackedTypes : zpr::EventRegistry<TestUnpackedTypes>, pb::IMessage<TestUnpackedTypes> {
    private static readonly pb::MessageParser<TestUnpackedTypes> _parser = new pb::MessageParser<TestUnpackedTypes>(() => new TestUnpackedTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestUnpackedTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypes() {
      OnConstruction();
      unpackedInt32_.SetContext(Context, 90);
      unpackedInt64_.SetContext(Context, 91);
      unpackedUint32_.SetContext(Context, 92);
      unpackedUint64_.SetContext(Context, 93);
      unpackedSint32_.SetContext(Context, 94);
      unpackedSint64_.SetContext(Context, 95);
      unpackedFixed32_.SetContext(Context, 96);
      unpackedFixed64_.SetContext(Context, 97);
      unpackedSfixed32_.SetContext(Context, 98);
      unpackedSfixed64_.SetContext(Context, 99);
      unpackedFloat_.SetContext(Context, 100);
      unpackedDouble_.SetContext(Context, 101);
      unpackedBool_.SetContext(Context, 102);
      unpackedEnum_.SetContext(Context, 103);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypes(TestUnpackedTypes other) : this() {
      unpackedInt32_ = new EventRepeatedField<int>(unpackedInt32DataConverter, other.UnpackedInt32.Clone());
      unpackedInt32_.SetContext(Context, 90);
      unpackedInt64_ = new EventRepeatedField<long>(unpackedInt64DataConverter, other.UnpackedInt64.Clone());
      unpackedInt64_.SetContext(Context, 91);
      unpackedUint32_ = new EventRepeatedField<uint>(unpackedUint32DataConverter, other.UnpackedUint32.Clone());
      unpackedUint32_.SetContext(Context, 92);
      unpackedUint64_ = new EventRepeatedField<ulong>(unpackedUint64DataConverter, other.UnpackedUint64.Clone());
      unpackedUint64_.SetContext(Context, 93);
      unpackedSint32_ = new EventRepeatedField<int>(unpackedSint32DataConverter, other.UnpackedSint32.Clone());
      unpackedSint32_.SetContext(Context, 94);
      unpackedSint64_ = new EventRepeatedField<long>(unpackedSint64DataConverter, other.UnpackedSint64.Clone());
      unpackedSint64_.SetContext(Context, 95);
      unpackedFixed32_ = new EventRepeatedField<uint>(unpackedFixed32DataConverter, other.UnpackedFixed32.Clone());
      unpackedFixed32_.SetContext(Context, 96);
      unpackedFixed64_ = new EventRepeatedField<ulong>(unpackedFixed64DataConverter, other.UnpackedFixed64.Clone());
      unpackedFixed64_.SetContext(Context, 97);
      unpackedSfixed32_ = new EventRepeatedField<int>(unpackedSfixed32DataConverter, other.UnpackedSfixed32.Clone());
      unpackedSfixed32_.SetContext(Context, 98);
      unpackedSfixed64_ = new EventRepeatedField<long>(unpackedSfixed64DataConverter, other.UnpackedSfixed64.Clone());
      unpackedSfixed64_.SetContext(Context, 99);
      unpackedFloat_ = new EventRepeatedField<float>(unpackedFloatDataConverter, other.UnpackedFloat.Clone());
      unpackedFloat_.SetContext(Context, 100);
      unpackedDouble_ = new EventRepeatedField<double>(unpackedDoubleDataConverter, other.UnpackedDouble.Clone());
      unpackedDouble_.SetContext(Context, 101);
      unpackedBool_ = new EventRepeatedField<bool>(unpackedBoolDataConverter, other.UnpackedBool.Clone());
      unpackedBool_.SetContext(Context, 102);
      unpackedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(unpackedEnumDataConverter, other.UnpackedEnum.Clone());
      unpackedEnum_.SetContext(Context, 103);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypes Clone() {
      return new TestUnpackedTypes(this);
    }

    public static bool IsEventSourced = true;

    protected override TestUnpackedTypes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      unpackedInt32_.SetContext(Context, 90);
      unpackedInt64_.SetContext(Context, 91);
      unpackedUint32_.SetContext(Context, 92);
      unpackedUint64_.SetContext(Context, 93);
      unpackedSint32_.SetContext(Context, 94);
      unpackedSint64_.SetContext(Context, 95);
      unpackedFixed32_.SetContext(Context, 96);
      unpackedFixed64_.SetContext(Context, 97);
      unpackedSfixed32_.SetContext(Context, 98);
      unpackedSfixed64_.SetContext(Context, 99);
      unpackedFloat_.SetContext(Context, 100);
      unpackedDouble_.SetContext(Context, 101);
      unpackedBool_.SetContext(Context, 102);
      unpackedEnum_.SetContext(Context, 103);
    }
    /// <summary>Field number for the "unpacked_int32" field.</summary>
    public const int UnpackedInt32FieldNumber = 90;
    private static readonly pb::FieldCodec<int> _repeated_unpackedInt32_codec
        = pb::FieldCodec.ForInt32(720);
    public class UnpackedInt32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static UnpackedInt32DataConverter unpackedInt32DataConverter = new UnpackedInt32DataConverter();
    private readonly EventRepeatedField<int> unpackedInt32_ = new EventRepeatedField<int>(unpackedInt32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> UnpackedInt32 {
      get { return unpackedInt32_; }
    }

    /// <summary>Field number for the "unpacked_int64" field.</summary>
    public const int UnpackedInt64FieldNumber = 91;
    private static readonly pb::FieldCodec<long> _repeated_unpackedInt64_codec
        = pb::FieldCodec.ForInt64(728);
    public class UnpackedInt64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { I64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.I64;
      }
    }
    private static UnpackedInt64DataConverter unpackedInt64DataConverter = new UnpackedInt64DataConverter();
    private readonly EventRepeatedField<long> unpackedInt64_ = new EventRepeatedField<long>(unpackedInt64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> UnpackedInt64 {
      get { return unpackedInt64_; }
    }

    /// <summary>Field number for the "unpacked_uint32" field.</summary>
    public const int UnpackedUint32FieldNumber = 92;
    private static readonly pb::FieldCodec<uint> _repeated_unpackedUint32_codec
        = pb::FieldCodec.ForUInt32(736);
    public class UnpackedUint32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { U32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.U32;
      }
    }
    private static UnpackedUint32DataConverter unpackedUint32DataConverter = new UnpackedUint32DataConverter();
    private readonly EventRepeatedField<uint> unpackedUint32_ = new EventRepeatedField<uint>(unpackedUint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> UnpackedUint32 {
      get { return unpackedUint32_; }
    }

    /// <summary>Field number for the "unpacked_uint64" field.</summary>
    public const int UnpackedUint64FieldNumber = 93;
    private static readonly pb::FieldCodec<ulong> _repeated_unpackedUint64_codec
        = pb::FieldCodec.ForUInt64(744);
    public class UnpackedUint64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { U64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.U64;
      }
    }
    private static UnpackedUint64DataConverter unpackedUint64DataConverter = new UnpackedUint64DataConverter();
    private readonly EventRepeatedField<ulong> unpackedUint64_ = new EventRepeatedField<ulong>(unpackedUint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> UnpackedUint64 {
      get { return unpackedUint64_; }
    }

    /// <summary>Field number for the "unpacked_sint32" field.</summary>
    public const int UnpackedSint32FieldNumber = 94;
    private static readonly pb::FieldCodec<int> _repeated_unpackedSint32_codec
        = pb::FieldCodec.ForSInt32(752);
    public class UnpackedSint32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SI32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SI32;
      }
    }
    private static UnpackedSint32DataConverter unpackedSint32DataConverter = new UnpackedSint32DataConverter();
    private readonly EventRepeatedField<int> unpackedSint32_ = new EventRepeatedField<int>(unpackedSint32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> UnpackedSint32 {
      get { return unpackedSint32_; }
    }

    /// <summary>Field number for the "unpacked_sint64" field.</summary>
    public const int UnpackedSint64FieldNumber = 95;
    private static readonly pb::FieldCodec<long> _repeated_unpackedSint64_codec
        = pb::FieldCodec.ForSInt64(760);
    public class UnpackedSint64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SI64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SI64;
      }
    }
    private static UnpackedSint64DataConverter unpackedSint64DataConverter = new UnpackedSint64DataConverter();
    private readonly EventRepeatedField<long> unpackedSint64_ = new EventRepeatedField<long>(unpackedSint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> UnpackedSint64 {
      get { return unpackedSint64_; }
    }

    /// <summary>Field number for the "unpacked_fixed32" field.</summary>
    public const int UnpackedFixed32FieldNumber = 96;
    private static readonly pb::FieldCodec<uint> _repeated_unpackedFixed32_codec
        = pb::FieldCodec.ForFixed32(773);
    public class UnpackedFixed32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { F32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.F32;
      }
    }
    private static UnpackedFixed32DataConverter unpackedFixed32DataConverter = new UnpackedFixed32DataConverter();
    private readonly EventRepeatedField<uint> unpackedFixed32_ = new EventRepeatedField<uint>(unpackedFixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> UnpackedFixed32 {
      get { return unpackedFixed32_; }
    }

    /// <summary>Field number for the "unpacked_fixed64" field.</summary>
    public const int UnpackedFixed64FieldNumber = 97;
    private static readonly pb::FieldCodec<ulong> _repeated_unpackedFixed64_codec
        = pb::FieldCodec.ForFixed64(777);
    public class UnpackedFixed64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { F64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.F64;
      }
    }
    private static UnpackedFixed64DataConverter unpackedFixed64DataConverter = new UnpackedFixed64DataConverter();
    private readonly EventRepeatedField<ulong> unpackedFixed64_ = new EventRepeatedField<ulong>(unpackedFixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> UnpackedFixed64 {
      get { return unpackedFixed64_; }
    }

    /// <summary>Field number for the "unpacked_sfixed32" field.</summary>
    public const int UnpackedSfixed32FieldNumber = 98;
    private static readonly pb::FieldCodec<int> _repeated_unpackedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(789);
    public class UnpackedSfixed32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { SF32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.SF32;
      }
    }
    private static UnpackedSfixed32DataConverter unpackedSfixed32DataConverter = new UnpackedSfixed32DataConverter();
    private readonly EventRepeatedField<int> unpackedSfixed32_ = new EventRepeatedField<int>(unpackedSfixed32DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> UnpackedSfixed32 {
      get { return unpackedSfixed32_; }
    }

    /// <summary>Field number for the "unpacked_sfixed64" field.</summary>
    public const int UnpackedSfixed64FieldNumber = 99;
    private static readonly pb::FieldCodec<long> _repeated_unpackedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(793);
    public class UnpackedSfixed64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { SF64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.SF64;
      }
    }
    private static UnpackedSfixed64DataConverter unpackedSfixed64DataConverter = new UnpackedSfixed64DataConverter();
    private readonly EventRepeatedField<long> unpackedSfixed64_ = new EventRepeatedField<long>(unpackedSfixed64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> UnpackedSfixed64 {
      get { return unpackedSfixed64_; }
    }

    /// <summary>Field number for the "unpacked_float" field.</summary>
    public const int UnpackedFloatFieldNumber = 100;
    private static readonly pb::FieldCodec<float> _repeated_unpackedFloat_codec
        = pb::FieldCodec.ForFloat(805);
    public class UnpackedFloatDataConverter: EventDataConverter<float> {
      public override zpr.EventSource.EventContent GetEventData(float data) {
        return new zpr.EventSource.EventContent() { R32 = data };
      }
      public override float GetItem(zpr.EventSource.EventContent data) {
        return data.R32;
      }
    }
    private static UnpackedFloatDataConverter unpackedFloatDataConverter = new UnpackedFloatDataConverter();
    private readonly EventRepeatedField<float> unpackedFloat_ = new EventRepeatedField<float>(unpackedFloatDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<float> UnpackedFloat {
      get { return unpackedFloat_; }
    }

    /// <summary>Field number for the "unpacked_double" field.</summary>
    public const int UnpackedDoubleFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_unpackedDouble_codec
        = pb::FieldCodec.ForDouble(809);
    public class UnpackedDoubleDataConverter: EventDataConverter<double> {
      public override zpr.EventSource.EventContent GetEventData(double data) {
        return new zpr.EventSource.EventContent() { R64 = data };
      }
      public override double GetItem(zpr.EventSource.EventContent data) {
        return data.R64;
      }
    }
    private static UnpackedDoubleDataConverter unpackedDoubleDataConverter = new UnpackedDoubleDataConverter();
    private readonly EventRepeatedField<double> unpackedDouble_ = new EventRepeatedField<double>(unpackedDoubleDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<double> UnpackedDouble {
      get { return unpackedDouble_; }
    }

    /// <summary>Field number for the "unpacked_bool" field.</summary>
    public const int UnpackedBoolFieldNumber = 102;
    private static readonly pb::FieldCodec<bool> _repeated_unpackedBool_codec
        = pb::FieldCodec.ForBool(816);
    public class UnpackedBoolDataConverter: EventDataConverter<bool> {
      public override zpr.EventSource.EventContent GetEventData(bool data) {
        return new zpr.EventSource.EventContent() { BoolData = data };
      }
      public override bool GetItem(zpr.EventSource.EventContent data) {
        return data.BoolData;
      }
    }
    private static UnpackedBoolDataConverter unpackedBoolDataConverter = new UnpackedBoolDataConverter();
    private readonly EventRepeatedField<bool> unpackedBool_ = new EventRepeatedField<bool>(unpackedBoolDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<bool> UnpackedBool {
      get { return unpackedBool_; }
    }

    /// <summary>Field number for the "unpacked_enum" field.</summary>
    public const int UnpackedEnumFieldNumber = 103;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_unpackedEnum_codec
        = pb::FieldCodec.ForEnum(824, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    public class UnpackedEnumDataConverter: EventDataConverter<global::Google.Protobuf.TestProtos.ForeignEnum> {
      public override zpr.EventSource.EventContent GetEventData(global::Google.Protobuf.TestProtos.ForeignEnum data) {
        return new zpr.EventSource.EventContent() { U32 = Convert.ToUInt32(data) };
      }
      public override global::Google.Protobuf.TestProtos.ForeignEnum GetItem(zpr.EventSource.EventContent data) {
        return (global::Google.Protobuf.TestProtos.ForeignEnum) data.U32;
      }
    }
    private static UnpackedEnumDataConverter unpackedEnumDataConverter = new UnpackedEnumDataConverter();
    private readonly EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> unpackedEnum_ = new EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>(unpackedEnumDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> UnpackedEnum {
      get { return unpackedEnum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestUnpackedTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestUnpackedTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unpackedInt32_.Equals(other.unpackedInt32_)) return false;
      if(!unpackedInt64_.Equals(other.unpackedInt64_)) return false;
      if(!unpackedUint32_.Equals(other.unpackedUint32_)) return false;
      if(!unpackedUint64_.Equals(other.unpackedUint64_)) return false;
      if(!unpackedSint32_.Equals(other.unpackedSint32_)) return false;
      if(!unpackedSint64_.Equals(other.unpackedSint64_)) return false;
      if(!unpackedFixed32_.Equals(other.unpackedFixed32_)) return false;
      if(!unpackedFixed64_.Equals(other.unpackedFixed64_)) return false;
      if(!unpackedSfixed32_.Equals(other.unpackedSfixed32_)) return false;
      if(!unpackedSfixed64_.Equals(other.unpackedSfixed64_)) return false;
      if(!unpackedFloat_.Equals(other.unpackedFloat_)) return false;
      if(!unpackedDouble_.Equals(other.unpackedDouble_)) return false;
      if(!unpackedBool_.Equals(other.unpackedBool_)) return false;
      if(!unpackedEnum_.Equals(other.unpackedEnum_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unpackedInt32_.GetHashCode();
      hash ^= unpackedInt64_.GetHashCode();
      hash ^= unpackedUint32_.GetHashCode();
      hash ^= unpackedUint64_.GetHashCode();
      hash ^= unpackedSint32_.GetHashCode();
      hash ^= unpackedSint64_.GetHashCode();
      hash ^= unpackedFixed32_.GetHashCode();
      hash ^= unpackedFixed64_.GetHashCode();
      hash ^= unpackedSfixed32_.GetHashCode();
      hash ^= unpackedSfixed64_.GetHashCode();
      hash ^= unpackedFloat_.GetHashCode();
      hash ^= unpackedDouble_.GetHashCode();
      hash ^= unpackedBool_.GetHashCode();
      hash ^= unpackedEnum_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unpackedInt32_.WriteTo(output, _repeated_unpackedInt32_codec);
      unpackedInt64_.WriteTo(output, _repeated_unpackedInt64_codec);
      unpackedUint32_.WriteTo(output, _repeated_unpackedUint32_codec);
      unpackedUint64_.WriteTo(output, _repeated_unpackedUint64_codec);
      unpackedSint32_.WriteTo(output, _repeated_unpackedSint32_codec);
      unpackedSint64_.WriteTo(output, _repeated_unpackedSint64_codec);
      unpackedFixed32_.WriteTo(output, _repeated_unpackedFixed32_codec);
      unpackedFixed64_.WriteTo(output, _repeated_unpackedFixed64_codec);
      unpackedSfixed32_.WriteTo(output, _repeated_unpackedSfixed32_codec);
      unpackedSfixed64_.WriteTo(output, _repeated_unpackedSfixed64_codec);
      unpackedFloat_.WriteTo(output, _repeated_unpackedFloat_codec);
      unpackedDouble_.WriteTo(output, _repeated_unpackedDouble_codec);
      unpackedBool_.WriteTo(output, _repeated_unpackedBool_codec);
      unpackedEnum_.WriteTo(output, _repeated_unpackedEnum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unpackedInt32_.CalculateSize(_repeated_unpackedInt32_codec);
      size += unpackedInt64_.CalculateSize(_repeated_unpackedInt64_codec);
      size += unpackedUint32_.CalculateSize(_repeated_unpackedUint32_codec);
      size += unpackedUint64_.CalculateSize(_repeated_unpackedUint64_codec);
      size += unpackedSint32_.CalculateSize(_repeated_unpackedSint32_codec);
      size += unpackedSint64_.CalculateSize(_repeated_unpackedSint64_codec);
      size += unpackedFixed32_.CalculateSize(_repeated_unpackedFixed32_codec);
      size += unpackedFixed64_.CalculateSize(_repeated_unpackedFixed64_codec);
      size += unpackedSfixed32_.CalculateSize(_repeated_unpackedSfixed32_codec);
      size += unpackedSfixed64_.CalculateSize(_repeated_unpackedSfixed64_codec);
      size += unpackedFloat_.CalculateSize(_repeated_unpackedFloat_codec);
      size += unpackedDouble_.CalculateSize(_repeated_unpackedDouble_codec);
      size += unpackedBool_.CalculateSize(_repeated_unpackedBool_codec);
      size += unpackedEnum_.CalculateSize(_repeated_unpackedEnum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestUnpackedTypes other) {
      if (other == null) {
        return;
      }
      unpackedInt32_.Add(other.unpackedInt32_);
      unpackedInt64_.Add(other.unpackedInt64_);
      unpackedUint32_.Add(other.unpackedUint32_);
      unpackedUint64_.Add(other.unpackedUint64_);
      unpackedSint32_.Add(other.unpackedSint32_);
      unpackedSint64_.Add(other.unpackedSint64_);
      unpackedFixed32_.Add(other.unpackedFixed32_);
      unpackedFixed64_.Add(other.unpackedFixed64_);
      unpackedSfixed32_.Add(other.unpackedSfixed32_);
      unpackedSfixed64_.Add(other.unpackedSfixed64_);
      unpackedFloat_.Add(other.unpackedFloat_);
      unpackedDouble_.Add(other.unpackedDouble_);
      unpackedBool_.Add(other.unpackedBool_);
      unpackedEnum_.Add(other.unpackedEnum_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722:
          case 720: {
            unpackedInt32_.AddEntriesFrom(input, _repeated_unpackedInt32_codec);
            break;
          }
          case 730:
          case 728: {
            unpackedInt64_.AddEntriesFrom(input, _repeated_unpackedInt64_codec);
            break;
          }
          case 738:
          case 736: {
            unpackedUint32_.AddEntriesFrom(input, _repeated_unpackedUint32_codec);
            break;
          }
          case 746:
          case 744: {
            unpackedUint64_.AddEntriesFrom(input, _repeated_unpackedUint64_codec);
            break;
          }
          case 754:
          case 752: {
            unpackedSint32_.AddEntriesFrom(input, _repeated_unpackedSint32_codec);
            break;
          }
          case 762:
          case 760: {
            unpackedSint64_.AddEntriesFrom(input, _repeated_unpackedSint64_codec);
            break;
          }
          case 770:
          case 773: {
            unpackedFixed32_.AddEntriesFrom(input, _repeated_unpackedFixed32_codec);
            break;
          }
          case 778:
          case 777: {
            unpackedFixed64_.AddEntriesFrom(input, _repeated_unpackedFixed64_codec);
            break;
          }
          case 786:
          case 789: {
            unpackedSfixed32_.AddEntriesFrom(input, _repeated_unpackedSfixed32_codec);
            break;
          }
          case 794:
          case 793: {
            unpackedSfixed64_.AddEntriesFrom(input, _repeated_unpackedSfixed64_codec);
            break;
          }
          case 802:
          case 805: {
            unpackedFloat_.AddEntriesFrom(input, _repeated_unpackedFloat_codec);
            break;
          }
          case 810:
          case 809: {
            unpackedDouble_.AddEntriesFrom(input, _repeated_unpackedDouble_codec);
            break;
          }
          case 818:
          case 816: {
            unpackedBool_.AddEntriesFrom(input, _repeated_unpackedBool_codec);
            break;
          }
          case 826:
          case 824: {
            unpackedEnum_.AddEntriesFrom(input, _repeated_unpackedEnum_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 90: {
            unpackedInt32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 91: {
            unpackedInt64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 92: {
            unpackedUint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 93: {
            unpackedUint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 94: {
            unpackedSint32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 95: {
            unpackedSint64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 96: {
            unpackedFixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 97: {
            unpackedFixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 98: {
            unpackedSfixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 99: {
            unpackedSfixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 100: {
            unpackedFloat_.ApplyEvent(e.ListEvent);
          }
          break;
          case 101: {
            unpackedDouble_.ApplyEvent(e.ListEvent);
          }
          break;
          case 102: {
            unpackedBool_.ApplyEvent(e.ListEvent);
          }
          break;
          case 103: {
            unpackedEnum_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestRepeatedScalarDifferentTagSizes : zpr::EventRegistry<TestRepeatedScalarDifferentTagSizes>, pb::IMessage<TestRepeatedScalarDifferentTagSizes> {
    private static readonly pb::MessageParser<TestRepeatedScalarDifferentTagSizes> _parser = new pb::MessageParser<TestRepeatedScalarDifferentTagSizes>(() => new TestRepeatedScalarDifferentTagSizes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRepeatedScalarDifferentTagSizes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizes() {
      OnConstruction();
      repeatedFixed32_.SetContext(Context, 12);
      repeatedInt32_.SetContext(Context, 13);
      repeatedFixed64_.SetContext(Context, 2046);
      repeatedInt64_.SetContext(Context, 2047);
      repeatedFloat_.SetContext(Context, 262142);
      repeatedUint64_.SetContext(Context, 262143);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizes(TestRepeatedScalarDifferentTagSizes other) : this() {
      repeatedFixed32_ = new EventRepeatedField<uint>(repeatedFixed32DataConverter, other.RepeatedFixed32.Clone());
      repeatedFixed32_.SetContext(Context, 12);
      repeatedInt32_ = new EventRepeatedField<int>(repeatedInt32DataConverter, other.RepeatedInt32.Clone());
      repeatedInt32_.SetContext(Context, 13);
      repeatedFixed64_ = new EventRepeatedField<ulong>(repeatedFixed64DataConverter, other.RepeatedFixed64.Clone());
      repeatedFixed64_.SetContext(Context, 2046);
      repeatedInt64_ = new EventRepeatedField<long>(repeatedInt64DataConverter, other.RepeatedInt64.Clone());
      repeatedInt64_.SetContext(Context, 2047);
      repeatedFloat_ = new EventRepeatedField<float>(repeatedFloatDataConverter, other.RepeatedFloat.Clone());
      repeatedFloat_.SetContext(Context, 262142);
      repeatedUint64_ = new EventRepeatedField<ulong>(repeatedUint64DataConverter, other.RepeatedUint64.Clone());
      repeatedUint64_.SetContext(Context, 262143);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizes Clone() {
      return new TestRepeatedScalarDifferentTagSizes(this);
    }

    public static bool IsEventSourced = true;

    protected override TestRepeatedScalarDifferentTagSizes Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
      repeatedFixed32_.SetContext(Context, 12);
      repeatedInt32_.SetContext(Context, 13);
      repeatedFixed64_.SetContext(Context, 2046);
      repeatedInt64_.SetContext(Context, 2047);
      repeatedFloat_.SetContext(Context, 262142);
      repeatedUint64_.SetContext(Context, 262143);
    }
    /// <summary>Field number for the "repeated_fixed32" field.</summary>
    public const int RepeatedFixed32FieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedFixed32_codec
        = pb::FieldCodec.ForFixed32(98);
    public class RepeatedFixed32DataConverter: EventDataConverter<uint> {
      public override zpr.EventSource.EventContent GetEventData(uint data) {
        return new zpr.EventSource.EventContent() { F32 = data };
      }
      public override uint GetItem(zpr.EventSource.EventContent data) {
        return data.F32;
      }
    }
    private static RepeatedFixed32DataConverter repeatedFixed32DataConverter = new RepeatedFixed32DataConverter();
    private readonly EventRepeatedField<uint> repeatedFixed32_ = new EventRepeatedField<uint>(repeatedFixed32DataConverter);
    /// <summary>
    /// Parsing repeated fixed size values used to fail. This message needs to be
    /// used in order to get a tag of the right size; all of the repeated fields
    /// in TestAllTypes didn't trigger the check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<uint> RepeatedFixed32 {
      get { return repeatedFixed32_; }
    }

    /// <summary>Field number for the "repeated_int32" field.</summary>
    public const int RepeatedInt32FieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_repeatedInt32_codec
        = pb::FieldCodec.ForInt32(106);
    public class RepeatedInt32DataConverter: EventDataConverter<int> {
      public override zpr.EventSource.EventContent GetEventData(int data) {
        return new zpr.EventSource.EventContent() { I32 = data };
      }
      public override int GetItem(zpr.EventSource.EventContent data) {
        return data.I32;
      }
    }
    private static RepeatedInt32DataConverter repeatedInt32DataConverter = new RepeatedInt32DataConverter();
    private readonly EventRepeatedField<int> repeatedInt32_ = new EventRepeatedField<int>(repeatedInt32DataConverter);
    /// <summary>
    /// Check for a varint type, just for good measure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<int> RepeatedInt32 {
      get { return repeatedInt32_; }
    }

    /// <summary>Field number for the "repeated_fixed64" field.</summary>
    public const int RepeatedFixed64FieldNumber = 2046;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedFixed64_codec
        = pb::FieldCodec.ForFixed64(16370);
    public class RepeatedFixed64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { F64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.F64;
      }
    }
    private static RepeatedFixed64DataConverter repeatedFixed64DataConverter = new RepeatedFixed64DataConverter();
    private readonly EventRepeatedField<ulong> repeatedFixed64_ = new EventRepeatedField<ulong>(repeatedFixed64DataConverter);
    /// <summary>
    /// These have two-byte tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> RepeatedFixed64 {
      get { return repeatedFixed64_; }
    }

    /// <summary>Field number for the "repeated_int64" field.</summary>
    public const int RepeatedInt64FieldNumber = 2047;
    private static readonly pb::FieldCodec<long> _repeated_repeatedInt64_codec
        = pb::FieldCodec.ForInt64(16378);
    public class RepeatedInt64DataConverter: EventDataConverter<long> {
      public override zpr.EventSource.EventContent GetEventData(long data) {
        return new zpr.EventSource.EventContent() { I64 = data };
      }
      public override long GetItem(zpr.EventSource.EventContent data) {
        return data.I64;
      }
    }
    private static RepeatedInt64DataConverter repeatedInt64DataConverter = new RepeatedInt64DataConverter();
    private readonly EventRepeatedField<long> repeatedInt64_ = new EventRepeatedField<long>(repeatedInt64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<long> RepeatedInt64 {
      get { return repeatedInt64_; }
    }

    /// <summary>Field number for the "repeated_float" field.</summary>
    public const int RepeatedFloatFieldNumber = 262142;
    private static readonly pb::FieldCodec<float> _repeated_repeatedFloat_codec
        = pb::FieldCodec.ForFloat(2097138);
    public class RepeatedFloatDataConverter: EventDataConverter<float> {
      public override zpr.EventSource.EventContent GetEventData(float data) {
        return new zpr.EventSource.EventContent() { R32 = data };
      }
      public override float GetItem(zpr.EventSource.EventContent data) {
        return data.R32;
      }
    }
    private static RepeatedFloatDataConverter repeatedFloatDataConverter = new RepeatedFloatDataConverter();
    private readonly EventRepeatedField<float> repeatedFloat_ = new EventRepeatedField<float>(repeatedFloatDataConverter);
    /// <summary>
    /// Three byte tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<float> RepeatedFloat {
      get { return repeatedFloat_; }
    }

    /// <summary>Field number for the "repeated_uint64" field.</summary>
    public const int RepeatedUint64FieldNumber = 262143;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedUint64_codec
        = pb::FieldCodec.ForUInt64(2097146);
    public class RepeatedUint64DataConverter: EventDataConverter<ulong> {
      public override zpr.EventSource.EventContent GetEventData(ulong data) {
        return new zpr.EventSource.EventContent() { U64 = data };
      }
      public override ulong GetItem(zpr.EventSource.EventContent data) {
        return data.U64;
      }
    }
    private static RepeatedUint64DataConverter repeatedUint64DataConverter = new RepeatedUint64DataConverter();
    private readonly EventRepeatedField<ulong> repeatedUint64_ = new EventRepeatedField<ulong>(repeatedUint64DataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<ulong> RepeatedUint64 {
      get { return repeatedUint64_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRepeatedScalarDifferentTagSizes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRepeatedScalarDifferentTagSizes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!repeatedFixed32_.Equals(other.repeatedFixed32_)) return false;
      if(!repeatedInt32_.Equals(other.repeatedInt32_)) return false;
      if(!repeatedFixed64_.Equals(other.repeatedFixed64_)) return false;
      if(!repeatedInt64_.Equals(other.repeatedInt64_)) return false;
      if(!repeatedFloat_.Equals(other.repeatedFloat_)) return false;
      if(!repeatedUint64_.Equals(other.repeatedUint64_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= repeatedFixed32_.GetHashCode();
      hash ^= repeatedInt32_.GetHashCode();
      hash ^= repeatedFixed64_.GetHashCode();
      hash ^= repeatedInt64_.GetHashCode();
      hash ^= repeatedFloat_.GetHashCode();
      hash ^= repeatedUint64_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      repeatedFixed32_.WriteTo(output, _repeated_repeatedFixed32_codec);
      repeatedInt32_.WriteTo(output, _repeated_repeatedInt32_codec);
      repeatedFixed64_.WriteTo(output, _repeated_repeatedFixed64_codec);
      repeatedInt64_.WriteTo(output, _repeated_repeatedInt64_codec);
      repeatedFloat_.WriteTo(output, _repeated_repeatedFloat_codec);
      repeatedUint64_.WriteTo(output, _repeated_repeatedUint64_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += repeatedFixed32_.CalculateSize(_repeated_repeatedFixed32_codec);
      size += repeatedInt32_.CalculateSize(_repeated_repeatedInt32_codec);
      size += repeatedFixed64_.CalculateSize(_repeated_repeatedFixed64_codec);
      size += repeatedInt64_.CalculateSize(_repeated_repeatedInt64_codec);
      size += repeatedFloat_.CalculateSize(_repeated_repeatedFloat_codec);
      size += repeatedUint64_.CalculateSize(_repeated_repeatedUint64_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRepeatedScalarDifferentTagSizes other) {
      if (other == null) {
        return;
      }
      repeatedFixed32_.Add(other.repeatedFixed32_);
      repeatedInt32_.Add(other.repeatedInt32_);
      repeatedFixed64_.Add(other.repeatedFixed64_);
      repeatedInt64_.Add(other.repeatedInt64_);
      repeatedFloat_.Add(other.repeatedFloat_);
      repeatedUint64_.Add(other.repeatedUint64_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 98:
          case 101: {
            repeatedFixed32_.AddEntriesFrom(input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 106:
          case 104: {
            repeatedInt32_.AddEntriesFrom(input, _repeated_repeatedInt32_codec);
            break;
          }
          case 16370:
          case 16369: {
            repeatedFixed64_.AddEntriesFrom(input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 16378:
          case 16376: {
            repeatedInt64_.AddEntriesFrom(input, _repeated_repeatedInt64_codec);
            break;
          }
          case 2097138:
          case 2097141: {
            repeatedFloat_.AddEntriesFrom(input, _repeated_repeatedFloat_codec);
            break;
          }
          case 2097146:
          case 2097144: {
            repeatedUint64_.AddEntriesFrom(input, _repeated_repeatedUint64_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 12: {
            repeatedFixed32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 13: {
            repeatedInt32_.ApplyEvent(e.ListEvent);
          }
          break;
          case 2046: {
            repeatedFixed64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 2047: {
            repeatedInt64_.ApplyEvent(e.ListEvent);
          }
          break;
          case 262142: {
            repeatedFloat_.ApplyEvent(e.ListEvent);
          }
          break;
          case 262143: {
            repeatedUint64_.ApplyEvent(e.ListEvent);
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestCommentInjectionMessage : zpr::EventRegistry<TestCommentInjectionMessage>, pb::IMessage<TestCommentInjectionMessage> {
    private static readonly pb::MessageParser<TestCommentInjectionMessage> _parser = new pb::MessageParser<TestCommentInjectionMessage>(() => new TestCommentInjectionMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCommentInjectionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessage(TestCommentInjectionMessage other) : this() {
      a_ = other.a_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessage Clone() {
      return new TestCommentInjectionMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override TestCommentInjectionMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private string a_ = "";
    /// <summary>
    /// */ &lt;- This should not close the generated doc comment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string A {
      get { return a_; }
      set {
        #if !DISABLE_EVENTS
        if(a_ != value) {
          Context.AddSetEvent(1, new zpr.EventSource.EventContent { StringData = pb::ProtoPreconditions.CheckNotNull(value, "value") });
        }
        #endif
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCommentInjectionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCommentInjectionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A.Length != 0) hash ^= A.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(A);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCommentInjectionMessage other) {
      if (other == null) {
        return;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            A = input.ReadString();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          case 1: {
            a_ = e.Set.StringData;
          }
          break;
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// Test that RPC services work.
  /// </summary>
  public sealed partial class FooRequest : zpr::EventRegistry<FooRequest>, pb::IMessage<FooRequest> {
    private static readonly pb::MessageParser<FooRequest> _parser = new pb::MessageParser<FooRequest>(() => new FooRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequest(FooRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequest Clone() {
      return new FooRequest(this);
    }

    public static bool IsEventSourced = true;

    protected override FooRequest Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class FooResponse : zpr::EventRegistry<FooResponse>, pb::IMessage<FooResponse> {
    private static readonly pb::MessageParser<FooResponse> _parser = new pb::MessageParser<FooResponse>(() => new FooResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponse(FooResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponse Clone() {
      return new FooResponse(this);
    }

    public static bool IsEventSourced = true;

    protected override FooResponse Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class FooClientMessage : zpr::EventRegistry<FooClientMessage>, pb::IMessage<FooClientMessage> {
    private static readonly pb::MessageParser<FooClientMessage> _parser = new pb::MessageParser<FooClientMessage>(() => new FooClientMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessage(FooClientMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessage Clone() {
      return new FooClientMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override FooClientMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooClientMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class FooServerMessage : zpr::EventRegistry<FooServerMessage>, pb::IMessage<FooServerMessage> {
    private static readonly pb::MessageParser<FooServerMessage> _parser = new pb::MessageParser<FooServerMessage>(() => new FooServerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessage(FooServerMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessage Clone() {
      return new FooServerMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override FooServerMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooServerMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class BarRequest : zpr::EventRegistry<BarRequest>, pb::IMessage<BarRequest> {
    private static readonly pb::MessageParser<BarRequest> _parser = new pb::MessageParser<BarRequest>(() => new BarRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequest(BarRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequest Clone() {
      return new BarRequest(this);
    }

    public static bool IsEventSourced = true;

    protected override BarRequest Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class BarResponse : zpr::EventRegistry<BarResponse>, pb::IMessage<BarResponse> {
    private static readonly pb::MessageParser<BarResponse> _parser = new pb::MessageParser<BarResponse>(() => new BarResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponse(BarResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponse Clone() {
      return new BarResponse(this);
    }

    public static bool IsEventSourced = true;

    protected override BarResponse Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  public sealed partial class TestEmptyMessage : zpr::EventRegistry<TestEmptyMessage>, pb::IMessage<TestEmptyMessage> {
    private static readonly pb::MessageParser<TestEmptyMessage> _parser = new pb::MessageParser<TestEmptyMessage>(() => new TestEmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestEmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessage(TestEmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessage Clone() {
      return new TestEmptyMessage(this);
    }

    public static bool IsEventSourced = true;

    protected override TestEmptyMessage Message { get{ return this; } }

    public override void SetParent(EventContext parent, EventPath path) {
      base.SetParent(parent, path);
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestEmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestEmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestEmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        MarkDirty();
        if (e.Path.Count == 0) {
          this.MergeFrom(e.Set.ByteData);
          return true;
        }
        switch (e.Path[pathIndex]) {
          default:
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      ClearEvents();
      var er = new zpr.EventSource.EventSourceRoot();
      var setEvent = new zpr.EventSource.EventData {
        Set = new zpr.EventSource.EventContent {
          ByteData = this.ToByteString()
        }
      };
      er.Events.Add(setEvent);
      return er;
    }

  }

  /// <summary>
  /// This proto includes every type of field in both singular and repeated
  /// forms.
  /// </summary>
  public sealed partial class TestAllTypesNoEvents : pb::IMessage<TestAllTypesNoEvents> {
    private static readonly pb::MessageParser<TestAllTypesNoEvents> _parser = new pb::MessageParser<TestAllTypesNoEvents>(() => new TestAllTypesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestAllTypesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypesNoEvents(TestAllTypesNoEvents other) : this() {
      singleInt32_ = other.singleInt32_;
      singleInt64_ = other.singleInt64_;
      singleUint32_ = other.singleUint32_;
      singleUint64_ = other.singleUint64_;
      singleSint32_ = other.singleSint32_;
      singleSint64_ = other.singleSint64_;
      singleFixed32_ = other.singleFixed32_;
      singleFixed64_ = other.singleFixed64_;
      singleSfixed32_ = other.singleSfixed32_;
      singleSfixed64_ = other.singleSfixed64_;
      singleFloat_ = other.singleFloat_;
      singleDouble_ = other.singleDouble_;
      singleBool_ = other.singleBool_;
      singleString_ = other.singleString_;
      singleBytes_ = other.singleBytes_;
      singleNestedMessage_ = other.singleNestedMessage_ != null ? other.SingleNestedMessage.Clone() : null;
      singleForeignMessage_ = other.singleForeignMessage_ != null ? other.SingleForeignMessage.Clone() : null;
      singleImportMessage_ = other.singleImportMessage_ != null ? other.SingleImportMessage.Clone() : null;
      singleNestedEnum_ = other.singleNestedEnum_;
      singleForeignEnum_ = other.singleForeignEnum_;
      singleImportEnum_ = other.singleImportEnum_;
      singlePublicImportMessage_ = other.singlePublicImportMessage_ != null ? other.SinglePublicImportMessage.Clone() : null;
      repeatedInt32_ = other.repeatedInt32_.Clone();
      repeatedInt64_ = other.repeatedInt64_.Clone();
      repeatedUint32_ = other.repeatedUint32_.Clone();
      repeatedUint64_ = other.repeatedUint64_.Clone();
      repeatedSint32_ = other.repeatedSint32_.Clone();
      repeatedSint64_ = other.repeatedSint64_.Clone();
      repeatedFixed32_ = other.repeatedFixed32_.Clone();
      repeatedFixed64_ = other.repeatedFixed64_.Clone();
      repeatedSfixed32_ = other.repeatedSfixed32_.Clone();
      repeatedSfixed64_ = other.repeatedSfixed64_.Clone();
      repeatedFloat_ = other.repeatedFloat_.Clone();
      repeatedDouble_ = other.repeatedDouble_.Clone();
      repeatedBool_ = other.repeatedBool_.Clone();
      repeatedString_ = other.repeatedString_.Clone();
      repeatedBytes_ = other.repeatedBytes_.Clone();
      repeatedNestedMessage_ = other.repeatedNestedMessage_.Clone();
      repeatedForeignMessage_ = other.repeatedForeignMessage_.Clone();
      repeatedImportMessage_ = other.repeatedImportMessage_.Clone();
      repeatedImportNoEvents_ = other.repeatedImportNoEvents_.Clone();
      repeatedTestAllTypesMessage_ = other.repeatedTestAllTypesMessage_.Clone();
      repeatedTestAllTypesNoEventsMessage_ = other.repeatedTestAllTypesNoEventsMessage_.Clone();
      repeatedNestedEnum_ = other.repeatedNestedEnum_.Clone();
      repeatedForeignEnum_ = other.repeatedForeignEnum_.Clone();
      repeatedImportEnum_ = other.repeatedImportEnum_.Clone();
      repeatedPublicImportMessage_ = other.repeatedPublicImportMessage_.Clone();
      mapInt32Int32_ = other.mapInt32Int32_.Clone();
      mapInt64Int64_ = other.mapInt64Int64_.Clone();
      mapUint32Uint32_ = other.mapUint32Uint32_.Clone();
      mapUint64Uint64_ = other.mapUint64Uint64_.Clone();
      mapSint32Sint32_ = other.mapSint32Sint32_.Clone();
      mapSint64Sint64_ = other.mapSint64Sint64_.Clone();
      mapFixed32Fixed32_ = other.mapFixed32Fixed32_.Clone();
      mapFixed64Fixed64_ = other.mapFixed64Fixed64_.Clone();
      mapSfixed32Sfixed32_ = other.mapSfixed32Sfixed32_.Clone();
      mapSfixed64Sfixed64_ = other.mapSfixed64Sfixed64_.Clone();
      mapInt32Float_ = other.mapInt32Float_.Clone();
      mapInt32Double_ = other.mapInt32Double_.Clone();
      mapBoolBool_ = other.mapBoolBool_.Clone();
      mapStringString_ = other.mapStringString_.Clone();
      mapInt32Bytes_ = other.mapInt32Bytes_.Clone();
      mapInt32Enum_ = other.mapInt32Enum_.Clone();
      mapInt32ForeignMessage_ = other.mapInt32ForeignMessage_.Clone();
      mapInt32ForeignNoEventsMessage_ = other.mapInt32ForeignNoEventsMessage_.Clone();
      mapInt32TestAllTypesMessage_ = other.mapInt32TestAllTypesMessage_.Clone();
      mapInt32TestAllTypesNoEventsMessage_ = other.mapInt32TestAllTypesNoEventsMessage_.Clone();
      allTypes_ = other.allTypes_ != null ? other.AllTypes.Clone() : null;
      allTypesNoEvents_ = other.allTypesNoEvents_ != null ? other.AllTypesNoEvents.Clone() : null;
      switch (other.OneofFieldCase) {
        case OneofFieldOneofCase.OneofUint32:
          OneofUint32 = other.OneofUint32;
          break;
        case OneofFieldOneofCase.OneofNestedMessage:
          OneofNestedMessage = other.OneofNestedMessage.Clone();
          break;
        case OneofFieldOneofCase.OneofString:
          OneofString = other.OneofString;
          break;
        case OneofFieldOneofCase.OneofBytes:
          OneofBytes = other.OneofBytes;
          break;
        case OneofFieldOneofCase.OneofForeignMessage:
          OneofForeignMessage = other.OneofForeignMessage.Clone();
          break;
        case OneofFieldOneofCase.OneofForeignMessageNoEvents:
          OneofForeignMessageNoEvents = other.OneofForeignMessageNoEvents.Clone();
          break;
        case OneofFieldOneofCase.OneofAllTypes:
          OneofAllTypes = other.OneofAllTypes.Clone();
          break;
        case OneofFieldOneofCase.OneofAllTypesNoEvents:
          OneofAllTypesNoEvents = other.OneofAllTypesNoEvents.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypesNoEvents Clone() {
      return new TestAllTypesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "single_int32" field.</summary>
    public const int SingleInt32FieldNumber = 1;
    private int singleInt32_;
    /// <summary>
    /// Singular
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleInt32 {
      get { return singleInt32_; }
      set {
        singleInt32_ = value;
      }
    }

    /// <summary>Field number for the "single_int64" field.</summary>
    public const int SingleInt64FieldNumber = 2;
    private long singleInt64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleInt64 {
      get { return singleInt64_; }
      set {
        singleInt64_ = value;
      }
    }

    /// <summary>Field number for the "single_uint32" field.</summary>
    public const int SingleUint32FieldNumber = 3;
    private uint singleUint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleUint32 {
      get { return singleUint32_; }
      set {
        singleUint32_ = value;
      }
    }

    /// <summary>Field number for the "single_uint64" field.</summary>
    public const int SingleUint64FieldNumber = 4;
    private ulong singleUint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleUint64 {
      get { return singleUint64_; }
      set {
        singleUint64_ = value;
      }
    }

    /// <summary>Field number for the "single_sint32" field.</summary>
    public const int SingleSint32FieldNumber = 5;
    private int singleSint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSint32 {
      get { return singleSint32_; }
      set {
        singleSint32_ = value;
      }
    }

    /// <summary>Field number for the "single_sint64" field.</summary>
    public const int SingleSint64FieldNumber = 6;
    private long singleSint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSint64 {
      get { return singleSint64_; }
      set {
        singleSint64_ = value;
      }
    }

    /// <summary>Field number for the "single_fixed32" field.</summary>
    public const int SingleFixed32FieldNumber = 7;
    private uint singleFixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleFixed32 {
      get { return singleFixed32_; }
      set {
        singleFixed32_ = value;
      }
    }

    /// <summary>Field number for the "single_fixed64" field.</summary>
    public const int SingleFixed64FieldNumber = 8;
    private ulong singleFixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleFixed64 {
      get { return singleFixed64_; }
      set {
        singleFixed64_ = value;
      }
    }

    /// <summary>Field number for the "single_sfixed32" field.</summary>
    public const int SingleSfixed32FieldNumber = 9;
    private int singleSfixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSfixed32 {
      get { return singleSfixed32_; }
      set {
        singleSfixed32_ = value;
      }
    }

    /// <summary>Field number for the "single_sfixed64" field.</summary>
    public const int SingleSfixed64FieldNumber = 10;
    private long singleSfixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSfixed64 {
      get { return singleSfixed64_; }
      set {
        singleSfixed64_ = value;
      }
    }

    /// <summary>Field number for the "single_float" field.</summary>
    public const int SingleFloatFieldNumber = 11;
    private float singleFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SingleFloat {
      get { return singleFloat_; }
      set {
        singleFloat_ = value;
      }
    }

    /// <summary>Field number for the "single_double" field.</summary>
    public const int SingleDoubleFieldNumber = 12;
    private double singleDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SingleDouble {
      get { return singleDouble_; }
      set {
        singleDouble_ = value;
      }
    }

    /// <summary>Field number for the "single_bool" field.</summary>
    public const int SingleBoolFieldNumber = 13;
    private bool singleBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SingleBool {
      get { return singleBool_; }
      set {
        singleBool_ = value;
      }
    }

    /// <summary>Field number for the "single_string" field.</summary>
    public const int SingleStringFieldNumber = 14;
    private string singleString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingleString {
      get { return singleString_; }
      set {
        singleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_bytes" field.</summary>
    public const int SingleBytesFieldNumber = 15;
    private pb::ByteString singleBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SingleBytes {
      get { return singleBytes_; }
      set {
        singleBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_nested_message" field.</summary>
    public const int SingleNestedMessageFieldNumber = 18;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents singleNestedMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents SingleNestedMessage {
      get { return singleNestedMessage_; }
      set {
        singleNestedMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_foreign_message" field.</summary>
    public const int SingleForeignMessageFieldNumber = 19;
    private global::Google.Protobuf.TestProtos.ForeignMessageNoEvents singleForeignMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessageNoEvents SingleForeignMessage {
      get { return singleForeignMessage_; }
      set {
        singleForeignMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_import_message" field.</summary>
    public const int SingleImportMessageFieldNumber = 20;
    private global::Google.Protobuf.TestProtos.ImportMessageNoEvents singleImportMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ImportMessageNoEvents SingleImportMessage {
      get { return singleImportMessage_; }
      set {
        singleImportMessage_ = value;
      }
    }

    /// <summary>Field number for the "single_nested_enum" field.</summary>
    public const int SingleNestedEnumFieldNumber = 21;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents singleNestedEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents SingleNestedEnum {
      get { return singleNestedEnum_; }
      set {
        singleNestedEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_foreign_enum" field.</summary>
    public const int SingleForeignEnumFieldNumber = 22;
    private global::Google.Protobuf.TestProtos.ForeignEnum singleForeignEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignEnum SingleForeignEnum {
      get { return singleForeignEnum_; }
      set {
        singleForeignEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_import_enum" field.</summary>
    public const int SingleImportEnumFieldNumber = 23;
    private global::Google.Protobuf.TestProtos.ImportEnum singleImportEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ImportEnum SingleImportEnum {
      get { return singleImportEnum_; }
      set {
        singleImportEnum_ = value;
      }
    }

    /// <summary>Field number for the "single_public_import_message" field.</summary>
    public const int SinglePublicImportMessageFieldNumber = 26;
    private global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents singlePublicImportMessage_;
    /// <summary>
    /// Defined in unittest_import_public.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents SinglePublicImportMessage {
      get { return singlePublicImportMessage_; }
      set {
        singlePublicImportMessage_ = value;
      }
    }

    /// <summary>Field number for the "repeated_int32" field.</summary>
    public const int RepeatedInt32FieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_repeatedInt32_codec
        = pb::FieldCodec.ForInt32(250);
    private readonly pbc::RepeatedField<int> repeatedInt32_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Repeated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedInt32 {
      get { return repeatedInt32_; }
    }

    /// <summary>Field number for the "repeated_int64" field.</summary>
    public const int RepeatedInt64FieldNumber = 32;
    private static readonly pb::FieldCodec<long> _repeated_repeatedInt64_codec
        = pb::FieldCodec.ForInt64(258);
    private readonly pbc::RepeatedField<long> repeatedInt64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedInt64 {
      get { return repeatedInt64_; }
    }

    /// <summary>Field number for the "repeated_uint32" field.</summary>
    public const int RepeatedUint32FieldNumber = 33;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedUint32_codec
        = pb::FieldCodec.ForUInt32(266);
    private readonly pbc::RepeatedField<uint> repeatedUint32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RepeatedUint32 {
      get { return repeatedUint32_; }
    }

    /// <summary>Field number for the "repeated_uint64" field.</summary>
    public const int RepeatedUint64FieldNumber = 34;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedUint64_codec
        = pb::FieldCodec.ForUInt64(274);
    private readonly pbc::RepeatedField<ulong> repeatedUint64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedUint64 {
      get { return repeatedUint64_; }
    }

    /// <summary>Field number for the "repeated_sint32" field.</summary>
    public const int RepeatedSint32FieldNumber = 35;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSint32_codec
        = pb::FieldCodec.ForSInt32(282);
    private readonly pbc::RepeatedField<int> repeatedSint32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedSint32 {
      get { return repeatedSint32_; }
    }

    /// <summary>Field number for the "repeated_sint64" field.</summary>
    public const int RepeatedSint64FieldNumber = 36;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSint64_codec
        = pb::FieldCodec.ForSInt64(290);
    private readonly pbc::RepeatedField<long> repeatedSint64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedSint64 {
      get { return repeatedSint64_; }
    }

    /// <summary>Field number for the "repeated_fixed32" field.</summary>
    public const int RepeatedFixed32FieldNumber = 37;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedFixed32_codec
        = pb::FieldCodec.ForFixed32(298);
    private readonly pbc::RepeatedField<uint> repeatedFixed32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RepeatedFixed32 {
      get { return repeatedFixed32_; }
    }

    /// <summary>Field number for the "repeated_fixed64" field.</summary>
    public const int RepeatedFixed64FieldNumber = 38;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedFixed64_codec
        = pb::FieldCodec.ForFixed64(306);
    private readonly pbc::RepeatedField<ulong> repeatedFixed64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedFixed64 {
      get { return repeatedFixed64_; }
    }

    /// <summary>Field number for the "repeated_sfixed32" field.</summary>
    public const int RepeatedSfixed32FieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(314);
    private readonly pbc::RepeatedField<int> repeatedSfixed32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedSfixed32 {
      get { return repeatedSfixed32_; }
    }

    /// <summary>Field number for the "repeated_sfixed64" field.</summary>
    public const int RepeatedSfixed64FieldNumber = 40;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(322);
    private readonly pbc::RepeatedField<long> repeatedSfixed64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedSfixed64 {
      get { return repeatedSfixed64_; }
    }

    /// <summary>Field number for the "repeated_float" field.</summary>
    public const int RepeatedFloatFieldNumber = 41;
    private static readonly pb::FieldCodec<float> _repeated_repeatedFloat_codec
        = pb::FieldCodec.ForFloat(330);
    private readonly pbc::RepeatedField<float> repeatedFloat_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RepeatedFloat {
      get { return repeatedFloat_; }
    }

    /// <summary>Field number for the "repeated_double" field.</summary>
    public const int RepeatedDoubleFieldNumber = 42;
    private static readonly pb::FieldCodec<double> _repeated_repeatedDouble_codec
        = pb::FieldCodec.ForDouble(338);
    private readonly pbc::RepeatedField<double> repeatedDouble_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> RepeatedDouble {
      get { return repeatedDouble_; }
    }

    /// <summary>Field number for the "repeated_bool" field.</summary>
    public const int RepeatedBoolFieldNumber = 43;
    private static readonly pb::FieldCodec<bool> _repeated_repeatedBool_codec
        = pb::FieldCodec.ForBool(346);
    private readonly pbc::RepeatedField<bool> repeatedBool_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> RepeatedBool {
      get { return repeatedBool_; }
    }

    /// <summary>Field number for the "repeated_string" field.</summary>
    public const int RepeatedStringFieldNumber = 44;
    private static readonly pb::FieldCodec<string> _repeated_repeatedString_codec
        = pb::FieldCodec.ForString(354);
    private readonly pbc::RepeatedField<string> repeatedString_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepeatedString {
      get { return repeatedString_; }
    }

    /// <summary>Field number for the "repeated_bytes" field.</summary>
    public const int RepeatedBytesFieldNumber = 45;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_repeatedBytes_codec
        = pb::FieldCodec.ForBytes(362);
    private readonly pbc::RepeatedField<pb::ByteString> repeatedBytes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RepeatedBytes {
      get { return repeatedBytes_; }
    }

    /// <summary>Field number for the "repeated_nested_message" field.</summary>
    public const int RepeatedNestedMessageFieldNumber = 48;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents> _repeated_repeatedNestedMessage_codec
        = pb::FieldCodec.ForMessage(386, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents> repeatedNestedMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents> RepeatedNestedMessage {
      get { return repeatedNestedMessage_; }
    }

    /// <summary>Field number for the "repeated_foreign_message" field.</summary>
    public const int RepeatedForeignMessageFieldNumber = 49;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> _repeated_repeatedForeignMessage_codec
        = pb::FieldCodec.ForMessage(394, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> repeatedForeignMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> RepeatedForeignMessage {
      get { return repeatedForeignMessage_; }
    }

    /// <summary>Field number for the "repeated_import_message" field.</summary>
    public const int RepeatedImportMessageFieldNumber = 50;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportMessage> _repeated_repeatedImportMessage_codec
        = pb::FieldCodec.ForMessage(402, global::Google.Protobuf.TestProtos.ImportMessage.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessage> repeatedImportMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessage> RepeatedImportMessage {
      get { return repeatedImportMessage_; }
    }

    /// <summary>Field number for the "repeated_import_no_events" field.</summary>
    public const int RepeatedImportNoEventsFieldNumber = 55;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> _repeated_repeatedImportNoEvents_codec
        = pb::FieldCodec.ForMessage(442, global::Google.Protobuf.TestProtos.ImportMessageNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> repeatedImportNoEvents_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportMessageNoEvents> RepeatedImportNoEvents {
      get { return repeatedImportNoEvents_; }
    }

    /// <summary>Field number for the "repeated_test_all_types_message" field.</summary>
    public const int RepeatedTestAllTypesMessageFieldNumber = 56;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypes> _repeated_repeatedTestAllTypesMessage_codec
        = pb::FieldCodec.ForMessage(450, global::Google.Protobuf.TestProtos.TestAllTypes.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes> repeatedTestAllTypesMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypes> RepeatedTestAllTypesMessage {
      get { return repeatedTestAllTypesMessage_; }
    }

    /// <summary>Field number for the "repeated_test_all_types_no_events_message" field.</summary>
    public const int RepeatedTestAllTypesNoEventsMessageFieldNumber = 57;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> _repeated_repeatedTestAllTypesNoEventsMessage_codec
        = pb::FieldCodec.ForMessage(458, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> repeatedTestAllTypesNoEventsMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> RepeatedTestAllTypesNoEventsMessage {
      get { return repeatedTestAllTypesNoEventsMessage_; }
    }

    /// <summary>Field number for the "repeated_nested_enum" field.</summary>
    public const int RepeatedNestedEnumFieldNumber = 51;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents> _repeated_repeatedNestedEnum_codec
        = pb::FieldCodec.ForEnum(410, x => (int) x, x => (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents> repeatedNestedEnum_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents> RepeatedNestedEnum {
      get { return repeatedNestedEnum_; }
    }

    /// <summary>Field number for the "repeated_foreign_enum" field.</summary>
    public const int RepeatedForeignEnumFieldNumber = 52;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_repeatedForeignEnum_codec
        = pb::FieldCodec.ForEnum(418, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> repeatedForeignEnum_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> RepeatedForeignEnum {
      get { return repeatedForeignEnum_; }
    }

    /// <summary>Field number for the "repeated_import_enum" field.</summary>
    public const int RepeatedImportEnumFieldNumber = 53;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ImportEnum> _repeated_repeatedImportEnum_codec
        = pb::FieldCodec.ForEnum(426, x => (int) x, x => (global::Google.Protobuf.TestProtos.ImportEnum) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportEnum> repeatedImportEnum_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ImportEnum> RepeatedImportEnum {
      get { return repeatedImportEnum_; }
    }

    /// <summary>Field number for the "repeated_public_import_message" field.</summary>
    public const int RepeatedPublicImportMessageFieldNumber = 54;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents> _repeated_repeatedPublicImportMessage_codec
        = pb::FieldCodec.ForMessage(434, global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents> repeatedPublicImportMessage_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents>();
    /// <summary>
    /// Defined in unittest_import_public.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents> RepeatedPublicImportMessage {
      get { return repeatedPublicImportMessage_; }
    }

    /// <summary>Field number for the "oneof_uint32" field.</summary>
    public const int OneofUint32FieldNumber = 111;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OneofUint32 {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofUint32 ? (uint) oneofField_ : 0; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = OneofFieldOneofCase.OneofUint32;
      }
    }

    /// <summary>Field number for the "oneof_nested_message" field.</summary>
    public const int OneofNestedMessageFieldNumber = 112;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents OneofNestedMessage {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage ? (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents) oneofField_ : null; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofNestedMessage;
      }
    }

    /// <summary>Field number for the "oneof_string" field.</summary>
    public const int OneofStringFieldNumber = 113;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OneofString {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofString ? (string) oneofField_ : ""; }
      set {
        oneofField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        oneofFieldCase_ = OneofFieldOneofCase.OneofString;
      }
    }

    /// <summary>Field number for the "oneof_bytes" field.</summary>
    public const int OneofBytesFieldNumber = 114;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OneofBytes {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofBytes ? (pb::ByteString) oneofField_ : pb::ByteString.Empty; }
      set {
        oneofField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        oneofFieldCase_ = OneofFieldOneofCase.OneofBytes;
      }
    }

    /// <summary>Field number for the "oneof_foreign_message" field.</summary>
    public const int OneofForeignMessageFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessage OneofForeignMessage {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage ? (global::Google.Protobuf.TestProtos.ForeignMessage) oneofField_ : null; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessage;
      }
    }

    /// <summary>Field number for the "oneof_foreign_message_no_events" field.</summary>
    public const int OneofForeignMessageNoEventsFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessageNoEvents OneofForeignMessageNoEvents {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents ? (global::Google.Protobuf.TestProtos.ForeignMessageNoEvents) oneofField_ : null; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofForeignMessageNoEvents;
      }
    }

    /// <summary>Field number for the "oneof_all_types" field.</summary>
    public const int OneofAllTypesFieldNumber = 139;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes OneofAllTypes {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes ? (global::Google.Protobuf.TestProtos.TestAllTypes) oneofField_ : null; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypes;
      }
    }

    /// <summary>Field number for the "oneof_all_types_no_events" field.</summary>
    public const int OneofAllTypesNoEventsFieldNumber = 140;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents OneofAllTypesNoEvents {
      get { return oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents ? (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents) oneofField_ : null; }
      set {
        oneofField_ = value;
        oneofFieldCase_ = value == null ? OneofFieldOneofCase.None : OneofFieldOneofCase.OneofAllTypesNoEvents;
      }
    }

    /// <summary>Field number for the "map_int32_int32" field.</summary>
    public const int MapInt32Int32FieldNumber = 115;
    private static readonly pbc::MapField<int, int>.Codec _map_mapInt32Int32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 922);
    private readonly pbc::MapField<int, int> mapInt32Int32_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MapInt32Int32 {
      get { return mapInt32Int32_; }
    }

    /// <summary>Field number for the "map_int64_int64" field.</summary>
    public const int MapInt64Int64FieldNumber = 116;
    private static readonly pbc::MapField<long, long>.Codec _map_mapInt64Int64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForInt64(16), 930);
    private readonly pbc::MapField<long, long> mapInt64Int64_ = new pbc::MapField<long, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> MapInt64Int64 {
      get { return mapInt64Int64_; }
    }

    /// <summary>Field number for the "map_uint32_uint32" field.</summary>
    public const int MapUint32Uint32FieldNumber = 117;
    private static readonly pbc::MapField<uint, uint>.Codec _map_mapUint32Uint32_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 938);
    private readonly pbc::MapField<uint, uint> mapUint32Uint32_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> MapUint32Uint32 {
      get { return mapUint32Uint32_; }
    }

    /// <summary>Field number for the "map_uint64_uint64" field.</summary>
    public const int MapUint64Uint64FieldNumber = 118;
    private static readonly pbc::MapField<ulong, ulong>.Codec _map_mapUint64Uint64_codec
        = new pbc::MapField<ulong, ulong>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForUInt64(16), 946);
    private readonly pbc::MapField<ulong, ulong> mapUint64Uint64_ = new pbc::MapField<ulong, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, ulong> MapUint64Uint64 {
      get { return mapUint64Uint64_; }
    }

    /// <summary>Field number for the "map_sint32_sint32" field.</summary>
    public const int MapSint32Sint32FieldNumber = 119;
    private static readonly pbc::MapField<int, int>.Codec _map_mapSint32Sint32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 954);
    private readonly pbc::MapField<int, int> mapSint32Sint32_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MapSint32Sint32 {
      get { return mapSint32Sint32_; }
    }

    /// <summary>Field number for the "map_sint64_sint64" field.</summary>
    public const int MapSint64Sint64FieldNumber = 120;
    private static readonly pbc::MapField<long, long>.Codec _map_mapSint64Sint64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSInt64(8), pb::FieldCodec.ForSInt64(16), 962);
    private readonly pbc::MapField<long, long> mapSint64Sint64_ = new pbc::MapField<long, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> MapSint64Sint64 {
      get { return mapSint64Sint64_; }
    }

    /// <summary>Field number for the "map_fixed32_fixed32" field.</summary>
    public const int MapFixed32Fixed32FieldNumber = 121;
    private static readonly pbc::MapField<uint, uint>.Codec _map_mapFixed32Fixed32_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForFixed32(13), pb::FieldCodec.ForFixed32(21), 970);
    private readonly pbc::MapField<uint, uint> mapFixed32Fixed32_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> MapFixed32Fixed32 {
      get { return mapFixed32Fixed32_; }
    }

    /// <summary>Field number for the "map_fixed64_fixed64" field.</summary>
    public const int MapFixed64Fixed64FieldNumber = 122;
    private static readonly pbc::MapField<ulong, ulong>.Codec _map_mapFixed64Fixed64_codec
        = new pbc::MapField<ulong, ulong>.Codec(pb::FieldCodec.ForFixed64(9), pb::FieldCodec.ForFixed64(17), 978);
    private readonly pbc::MapField<ulong, ulong> mapFixed64Fixed64_ = new pbc::MapField<ulong, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, ulong> MapFixed64Fixed64 {
      get { return mapFixed64Fixed64_; }
    }

    /// <summary>Field number for the "map_sfixed32_sfixed32" field.</summary>
    public const int MapSfixed32Sfixed32FieldNumber = 123;
    private static readonly pbc::MapField<int, int>.Codec _map_mapSfixed32Sfixed32_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSFixed32(13), pb::FieldCodec.ForSFixed32(21), 986);
    private readonly pbc::MapField<int, int> mapSfixed32Sfixed32_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MapSfixed32Sfixed32 {
      get { return mapSfixed32Sfixed32_; }
    }

    /// <summary>Field number for the "map_sfixed64_sfixed64" field.</summary>
    public const int MapSfixed64Sfixed64FieldNumber = 124;
    private static readonly pbc::MapField<long, long>.Codec _map_mapSfixed64Sfixed64_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSFixed64(9), pb::FieldCodec.ForSFixed64(17), 994);
    private readonly pbc::MapField<long, long> mapSfixed64Sfixed64_ = new pbc::MapField<long, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> MapSfixed64Sfixed64 {
      get { return mapSfixed64Sfixed64_; }
    }

    /// <summary>Field number for the "map_int32_float" field.</summary>
    public const int MapInt32FloatFieldNumber = 125;
    private static readonly pbc::MapField<int, float>.Codec _map_mapInt32Float_codec
        = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForFloat(21), 1002);
    private readonly pbc::MapField<int, float> mapInt32Float_ = new pbc::MapField<int, float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, float> MapInt32Float {
      get { return mapInt32Float_; }
    }

    /// <summary>Field number for the "map_int32_double" field.</summary>
    public const int MapInt32DoubleFieldNumber = 126;
    private static readonly pbc::MapField<int, double>.Codec _map_mapInt32Double_codec
        = new pbc::MapField<int, double>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForDouble(17), 1010);
    private readonly pbc::MapField<int, double> mapInt32Double_ = new pbc::MapField<int, double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, double> MapInt32Double {
      get { return mapInt32Double_; }
    }

    /// <summary>Field number for the "map_bool_bool" field.</summary>
    public const int MapBoolBoolFieldNumber = 127;
    private static readonly pbc::MapField<bool, bool>.Codec _map_mapBoolBool_codec
        = new pbc::MapField<bool, bool>.Codec(pb::FieldCodec.ForBool(8), pb::FieldCodec.ForBool(16), 1018);
    private readonly pbc::MapField<bool, bool> mapBoolBool_ = new pbc::MapField<bool, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<bool, bool> MapBoolBool {
      get { return mapBoolBool_; }
    }

    /// <summary>Field number for the "map_string_string" field.</summary>
    public const int MapStringStringFieldNumber = 128;
    private static readonly pbc::MapField<string, string>.Codec _map_mapStringString_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 1026);
    private readonly pbc::MapField<string, string> mapStringString_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MapStringString {
      get { return mapStringString_; }
    }

    /// <summary>Field number for the "map_int32_bytes" field.</summary>
    public const int MapInt32BytesFieldNumber = 129;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_mapInt32Bytes_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 1034);
    private readonly pbc::MapField<int, pb::ByteString> mapInt32Bytes_ = new pbc::MapField<int, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, pb::ByteString> MapInt32Bytes {
      get { return mapInt32Bytes_; }
    }

    /// <summary>Field number for the "map_int32_enum" field.</summary>
    public const int MapInt32EnumFieldNumber = 130;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum>.Codec _map_mapInt32Enum_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Google.Protobuf.TestProtos.MapEnum) x), 1042);
    private readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum> mapInt32Enum_ = new pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Google.Protobuf.TestProtos.MapEnum> MapInt32Enum {
      get { return mapInt32Enum_; }
    }

    /// <summary>Field number for the "map_int32_foreign_message" field.</summary>
    public const int MapInt32ForeignMessageFieldNumber = 131;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>.Codec _map_mapInt32ForeignMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.ForeignMessage.Parser), 1050);
    private readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage> mapInt32ForeignMessage_ = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessage> MapInt32ForeignMessage {
      get { return mapInt32ForeignMessage_; }
    }

    /// <summary>Field number for the "map_int32_foreign_no_events_message" field.</summary>
    public const int MapInt32ForeignNoEventsMessageFieldNumber = 132;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>.Codec _map_mapInt32ForeignNoEventsMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser), 1058);
    private readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> mapInt32ForeignNoEventsMessage_ = new pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> MapInt32ForeignNoEventsMessage {
      get { return mapInt32ForeignNoEventsMessage_; }
    }

    /// <summary>Field number for the "map_int32_test_all_types_message" field.</summary>
    public const int MapInt32TestAllTypesMessageFieldNumber = 133;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>.Codec _map_mapInt32TestAllTypesMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.TestAllTypes.Parser), 1066);
    private readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes> mapInt32TestAllTypesMessage_ = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypes> MapInt32TestAllTypesMessage {
      get { return mapInt32TestAllTypesMessage_; }
    }

    /// <summary>Field number for the "map_int32_test_all_types_no_events_message" field.</summary>
    public const int MapInt32TestAllTypesNoEventsMessageFieldNumber = 134;
    private static readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>.Codec _map_mapInt32TestAllTypesNoEventsMessage_codec
        = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Parser), 1074);
    private readonly pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> mapInt32TestAllTypesNoEventsMessage_ = new pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Google.Protobuf.TestProtos.TestAllTypesNoEvents> MapInt32TestAllTypesNoEventsMessage {
      get { return mapInt32TestAllTypesNoEventsMessage_; }
    }

    /// <summary>Field number for the "all_types" field.</summary>
    public const int AllTypesFieldNumber = 135;
    private global::Google.Protobuf.TestProtos.TestAllTypes allTypes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypes AllTypes {
      get { return allTypes_; }
      set {
        allTypes_ = value;
      }
    }

    /// <summary>Field number for the "all_types_no_events" field.</summary>
    public const int AllTypesNoEventsFieldNumber = 136;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents allTypesNoEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents AllTypesNoEvents {
      get { return allTypesNoEvents_; }
      set {
        allTypesNoEvents_ = value;
      }
    }

    private object oneofField_;
    /// <summary>Enum of possible cases for the "oneof_field" oneof.</summary>
    public enum OneofFieldOneofCase {
      None = 0,
      OneofUint32 = 111,
      OneofNestedMessage = 112,
      OneofString = 113,
      OneofBytes = 114,
      OneofForeignMessage = 137,
      OneofForeignMessageNoEvents = 138,
      OneofAllTypes = 139,
      OneofAllTypesNoEvents = 140,
    }
    private OneofFieldOneofCase oneofFieldCase_ = OneofFieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofFieldOneofCase OneofFieldCase {
      get { return oneofFieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofField() {
      oneofFieldCase_ = OneofFieldOneofCase.None;
      oneofField_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestAllTypesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestAllTypesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SingleInt32 != other.SingleInt32) return false;
      if (SingleInt64 != other.SingleInt64) return false;
      if (SingleUint32 != other.SingleUint32) return false;
      if (SingleUint64 != other.SingleUint64) return false;
      if (SingleSint32 != other.SingleSint32) return false;
      if (SingleSint64 != other.SingleSint64) return false;
      if (SingleFixed32 != other.SingleFixed32) return false;
      if (SingleFixed64 != other.SingleFixed64) return false;
      if (SingleSfixed32 != other.SingleSfixed32) return false;
      if (SingleSfixed64 != other.SingleSfixed64) return false;
      if (SingleFloat != other.SingleFloat) return false;
      if (SingleDouble != other.SingleDouble) return false;
      if (SingleBool != other.SingleBool) return false;
      if (SingleString != other.SingleString) return false;
      if (SingleBytes != other.SingleBytes) return false;
      if (!object.Equals(SingleNestedMessage, other.SingleNestedMessage)) return false;
      if (!object.Equals(SingleForeignMessage, other.SingleForeignMessage)) return false;
      if (!object.Equals(SingleImportMessage, other.SingleImportMessage)) return false;
      if (SingleNestedEnum != other.SingleNestedEnum) return false;
      if (SingleForeignEnum != other.SingleForeignEnum) return false;
      if (SingleImportEnum != other.SingleImportEnum) return false;
      if (!object.Equals(SinglePublicImportMessage, other.SinglePublicImportMessage)) return false;
      if(!repeatedInt32_.Equals(other.repeatedInt32_)) return false;
      if(!repeatedInt64_.Equals(other.repeatedInt64_)) return false;
      if(!repeatedUint32_.Equals(other.repeatedUint32_)) return false;
      if(!repeatedUint64_.Equals(other.repeatedUint64_)) return false;
      if(!repeatedSint32_.Equals(other.repeatedSint32_)) return false;
      if(!repeatedSint64_.Equals(other.repeatedSint64_)) return false;
      if(!repeatedFixed32_.Equals(other.repeatedFixed32_)) return false;
      if(!repeatedFixed64_.Equals(other.repeatedFixed64_)) return false;
      if(!repeatedSfixed32_.Equals(other.repeatedSfixed32_)) return false;
      if(!repeatedSfixed64_.Equals(other.repeatedSfixed64_)) return false;
      if(!repeatedFloat_.Equals(other.repeatedFloat_)) return false;
      if(!repeatedDouble_.Equals(other.repeatedDouble_)) return false;
      if(!repeatedBool_.Equals(other.repeatedBool_)) return false;
      if(!repeatedString_.Equals(other.repeatedString_)) return false;
      if(!repeatedBytes_.Equals(other.repeatedBytes_)) return false;
      if(!repeatedNestedMessage_.Equals(other.repeatedNestedMessage_)) return false;
      if(!repeatedForeignMessage_.Equals(other.repeatedForeignMessage_)) return false;
      if(!repeatedImportMessage_.Equals(other.repeatedImportMessage_)) return false;
      if(!repeatedImportNoEvents_.Equals(other.repeatedImportNoEvents_)) return false;
      if(!repeatedTestAllTypesMessage_.Equals(other.repeatedTestAllTypesMessage_)) return false;
      if(!repeatedTestAllTypesNoEventsMessage_.Equals(other.repeatedTestAllTypesNoEventsMessage_)) return false;
      if(!repeatedNestedEnum_.Equals(other.repeatedNestedEnum_)) return false;
      if(!repeatedForeignEnum_.Equals(other.repeatedForeignEnum_)) return false;
      if(!repeatedImportEnum_.Equals(other.repeatedImportEnum_)) return false;
      if(!repeatedPublicImportMessage_.Equals(other.repeatedPublicImportMessage_)) return false;
      if (OneofUint32 != other.OneofUint32) return false;
      if (!object.Equals(OneofNestedMessage, other.OneofNestedMessage)) return false;
      if (OneofString != other.OneofString) return false;
      if (OneofBytes != other.OneofBytes) return false;
      if (!object.Equals(OneofForeignMessage, other.OneofForeignMessage)) return false;
      if (!object.Equals(OneofForeignMessageNoEvents, other.OneofForeignMessageNoEvents)) return false;
      if (!object.Equals(OneofAllTypes, other.OneofAllTypes)) return false;
      if (!object.Equals(OneofAllTypesNoEvents, other.OneofAllTypesNoEvents)) return false;
      if (!mapInt32Int32_.Equals(other.mapInt32Int32_)) return false;
      if (!mapInt64Int64_.Equals(other.mapInt64Int64_)) return false;
      if (!mapUint32Uint32_.Equals(other.mapUint32Uint32_)) return false;
      if (!mapUint64Uint64_.Equals(other.mapUint64Uint64_)) return false;
      if (!mapSint32Sint32_.Equals(other.mapSint32Sint32_)) return false;
      if (!mapSint64Sint64_.Equals(other.mapSint64Sint64_)) return false;
      if (!mapFixed32Fixed32_.Equals(other.mapFixed32Fixed32_)) return false;
      if (!mapFixed64Fixed64_.Equals(other.mapFixed64Fixed64_)) return false;
      if (!mapSfixed32Sfixed32_.Equals(other.mapSfixed32Sfixed32_)) return false;
      if (!mapSfixed64Sfixed64_.Equals(other.mapSfixed64Sfixed64_)) return false;
      if (!mapInt32Float_.Equals(other.mapInt32Float_)) return false;
      if (!mapInt32Double_.Equals(other.mapInt32Double_)) return false;
      if (!mapBoolBool_.Equals(other.mapBoolBool_)) return false;
      if (!mapStringString_.Equals(other.mapStringString_)) return false;
      if (!mapInt32Bytes_.Equals(other.mapInt32Bytes_)) return false;
      if (!mapInt32Enum_.Equals(other.mapInt32Enum_)) return false;
      if (!mapInt32ForeignMessage_.Equals(other.mapInt32ForeignMessage_)) return false;
      if (!mapInt32ForeignNoEventsMessage_.Equals(other.mapInt32ForeignNoEventsMessage_)) return false;
      if (!mapInt32TestAllTypesMessage_.Equals(other.mapInt32TestAllTypesMessage_)) return false;
      if (!mapInt32TestAllTypesNoEventsMessage_.Equals(other.mapInt32TestAllTypesNoEventsMessage_)) return false;
      if (!object.Equals(AllTypes, other.AllTypes)) return false;
      if (!object.Equals(AllTypesNoEvents, other.AllTypesNoEvents)) return false;
      if (OneofFieldCase != other.OneofFieldCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SingleInt32 != 0) hash ^= SingleInt32.GetHashCode();
      if (SingleInt64 != 0L) hash ^= SingleInt64.GetHashCode();
      if (SingleUint32 != 0) hash ^= SingleUint32.GetHashCode();
      if (SingleUint64 != 0UL) hash ^= SingleUint64.GetHashCode();
      if (SingleSint32 != 0) hash ^= SingleSint32.GetHashCode();
      if (SingleSint64 != 0L) hash ^= SingleSint64.GetHashCode();
      if (SingleFixed32 != 0) hash ^= SingleFixed32.GetHashCode();
      if (SingleFixed64 != 0UL) hash ^= SingleFixed64.GetHashCode();
      if (SingleSfixed32 != 0) hash ^= SingleSfixed32.GetHashCode();
      if (SingleSfixed64 != 0L) hash ^= SingleSfixed64.GetHashCode();
      if (SingleFloat != 0F) hash ^= SingleFloat.GetHashCode();
      if (SingleDouble != 0D) hash ^= SingleDouble.GetHashCode();
      if (SingleBool != false) hash ^= SingleBool.GetHashCode();
      if (SingleString.Length != 0) hash ^= SingleString.GetHashCode();
      if (SingleBytes.Length != 0) hash ^= SingleBytes.GetHashCode();
      if (singleNestedMessage_ != null) hash ^= SingleNestedMessage.GetHashCode();
      if (singleForeignMessage_ != null) hash ^= SingleForeignMessage.GetHashCode();
      if (singleImportMessage_ != null) hash ^= SingleImportMessage.GetHashCode();
      if (SingleNestedEnum != 0) hash ^= SingleNestedEnum.GetHashCode();
      if (SingleForeignEnum != 0) hash ^= SingleForeignEnum.GetHashCode();
      if (SingleImportEnum != 0) hash ^= SingleImportEnum.GetHashCode();
      if (singlePublicImportMessage_ != null) hash ^= SinglePublicImportMessage.GetHashCode();
      hash ^= repeatedInt32_.GetHashCode();
      hash ^= repeatedInt64_.GetHashCode();
      hash ^= repeatedUint32_.GetHashCode();
      hash ^= repeatedUint64_.GetHashCode();
      hash ^= repeatedSint32_.GetHashCode();
      hash ^= repeatedSint64_.GetHashCode();
      hash ^= repeatedFixed32_.GetHashCode();
      hash ^= repeatedFixed64_.GetHashCode();
      hash ^= repeatedSfixed32_.GetHashCode();
      hash ^= repeatedSfixed64_.GetHashCode();
      hash ^= repeatedFloat_.GetHashCode();
      hash ^= repeatedDouble_.GetHashCode();
      hash ^= repeatedBool_.GetHashCode();
      hash ^= repeatedString_.GetHashCode();
      hash ^= repeatedBytes_.GetHashCode();
      hash ^= repeatedNestedMessage_.GetHashCode();
      hash ^= repeatedForeignMessage_.GetHashCode();
      hash ^= repeatedImportMessage_.GetHashCode();
      hash ^= repeatedImportNoEvents_.GetHashCode();
      hash ^= repeatedTestAllTypesMessage_.GetHashCode();
      hash ^= repeatedTestAllTypesNoEventsMessage_.GetHashCode();
      hash ^= repeatedNestedEnum_.GetHashCode();
      hash ^= repeatedForeignEnum_.GetHashCode();
      hash ^= repeatedImportEnum_.GetHashCode();
      hash ^= repeatedPublicImportMessage_.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) hash ^= OneofUint32.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) hash ^= OneofNestedMessage.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) hash ^= OneofString.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) hash ^= OneofBytes.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) hash ^= OneofForeignMessage.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) hash ^= OneofForeignMessageNoEvents.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) hash ^= OneofAllTypes.GetHashCode();
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) hash ^= OneofAllTypesNoEvents.GetHashCode();
      hash ^= mapInt32Int32_.GetHashCode();
      hash ^= mapInt64Int64_.GetHashCode();
      hash ^= mapUint32Uint32_.GetHashCode();
      hash ^= mapUint64Uint64_.GetHashCode();
      hash ^= mapSint32Sint32_.GetHashCode();
      hash ^= mapSint64Sint64_.GetHashCode();
      hash ^= mapFixed32Fixed32_.GetHashCode();
      hash ^= mapFixed64Fixed64_.GetHashCode();
      hash ^= mapSfixed32Sfixed32_.GetHashCode();
      hash ^= mapSfixed64Sfixed64_.GetHashCode();
      hash ^= mapInt32Float_.GetHashCode();
      hash ^= mapInt32Double_.GetHashCode();
      hash ^= mapBoolBool_.GetHashCode();
      hash ^= mapStringString_.GetHashCode();
      hash ^= mapInt32Bytes_.GetHashCode();
      hash ^= mapInt32Enum_.GetHashCode();
      hash ^= mapInt32ForeignMessage_.GetHashCode();
      hash ^= mapInt32ForeignNoEventsMessage_.GetHashCode();
      hash ^= mapInt32TestAllTypesMessage_.GetHashCode();
      hash ^= mapInt32TestAllTypesNoEventsMessage_.GetHashCode();
      if (allTypes_ != null) hash ^= AllTypes.GetHashCode();
      if (allTypesNoEvents_ != null) hash ^= AllTypesNoEvents.GetHashCode();
      hash ^= (int) oneofFieldCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SingleInt32 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SingleInt32);
      }
      if (SingleInt64 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SingleInt64);
      }
      if (SingleUint32 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SingleUint32);
      }
      if (SingleUint64 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SingleUint64);
      }
      if (SingleSint32 != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(SingleSint32);
      }
      if (SingleSint64 != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(SingleSint64);
      }
      if (SingleFixed32 != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(SingleFixed32);
      }
      if (SingleFixed64 != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(SingleFixed64);
      }
      if (SingleSfixed32 != 0) {
        output.WriteRawTag(77);
        output.WriteSFixed32(SingleSfixed32);
      }
      if (SingleSfixed64 != 0L) {
        output.WriteRawTag(81);
        output.WriteSFixed64(SingleSfixed64);
      }
      if (SingleFloat != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SingleFloat);
      }
      if (SingleDouble != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(SingleDouble);
      }
      if (SingleBool != false) {
        output.WriteRawTag(104);
        output.WriteBool(SingleBool);
      }
      if (SingleString.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SingleString);
      }
      if (SingleBytes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(SingleBytes);
      }
      if (singleNestedMessage_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SingleNestedMessage);
      }
      if (singleForeignMessage_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SingleForeignMessage);
      }
      if (singleImportMessage_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SingleImportMessage);
      }
      if (SingleNestedEnum != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SingleNestedEnum);
      }
      if (SingleForeignEnum != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SingleForeignEnum);
      }
      if (SingleImportEnum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) SingleImportEnum);
      }
      if (singlePublicImportMessage_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(SinglePublicImportMessage);
      }
      repeatedInt32_.WriteTo(output, _repeated_repeatedInt32_codec);
      repeatedInt64_.WriteTo(output, _repeated_repeatedInt64_codec);
      repeatedUint32_.WriteTo(output, _repeated_repeatedUint32_codec);
      repeatedUint64_.WriteTo(output, _repeated_repeatedUint64_codec);
      repeatedSint32_.WriteTo(output, _repeated_repeatedSint32_codec);
      repeatedSint64_.WriteTo(output, _repeated_repeatedSint64_codec);
      repeatedFixed32_.WriteTo(output, _repeated_repeatedFixed32_codec);
      repeatedFixed64_.WriteTo(output, _repeated_repeatedFixed64_codec);
      repeatedSfixed32_.WriteTo(output, _repeated_repeatedSfixed32_codec);
      repeatedSfixed64_.WriteTo(output, _repeated_repeatedSfixed64_codec);
      repeatedFloat_.WriteTo(output, _repeated_repeatedFloat_codec);
      repeatedDouble_.WriteTo(output, _repeated_repeatedDouble_codec);
      repeatedBool_.WriteTo(output, _repeated_repeatedBool_codec);
      repeatedString_.WriteTo(output, _repeated_repeatedString_codec);
      repeatedBytes_.WriteTo(output, _repeated_repeatedBytes_codec);
      repeatedNestedMessage_.WriteTo(output, _repeated_repeatedNestedMessage_codec);
      repeatedForeignMessage_.WriteTo(output, _repeated_repeatedForeignMessage_codec);
      repeatedImportMessage_.WriteTo(output, _repeated_repeatedImportMessage_codec);
      repeatedNestedEnum_.WriteTo(output, _repeated_repeatedNestedEnum_codec);
      repeatedForeignEnum_.WriteTo(output, _repeated_repeatedForeignEnum_codec);
      repeatedImportEnum_.WriteTo(output, _repeated_repeatedImportEnum_codec);
      repeatedPublicImportMessage_.WriteTo(output, _repeated_repeatedPublicImportMessage_codec);
      repeatedImportNoEvents_.WriteTo(output, _repeated_repeatedImportNoEvents_codec);
      repeatedTestAllTypesMessage_.WriteTo(output, _repeated_repeatedTestAllTypesMessage_codec);
      repeatedTestAllTypesNoEventsMessage_.WriteTo(output, _repeated_repeatedTestAllTypesNoEventsMessage_codec);
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(OneofUint32);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(OneofNestedMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) {
        output.WriteRawTag(138, 7);
        output.WriteString(OneofString);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) {
        output.WriteRawTag(146, 7);
        output.WriteBytes(OneofBytes);
      }
      mapInt32Int32_.WriteTo(output, _map_mapInt32Int32_codec);
      mapInt64Int64_.WriteTo(output, _map_mapInt64Int64_codec);
      mapUint32Uint32_.WriteTo(output, _map_mapUint32Uint32_codec);
      mapUint64Uint64_.WriteTo(output, _map_mapUint64Uint64_codec);
      mapSint32Sint32_.WriteTo(output, _map_mapSint32Sint32_codec);
      mapSint64Sint64_.WriteTo(output, _map_mapSint64Sint64_codec);
      mapFixed32Fixed32_.WriteTo(output, _map_mapFixed32Fixed32_codec);
      mapFixed64Fixed64_.WriteTo(output, _map_mapFixed64Fixed64_codec);
      mapSfixed32Sfixed32_.WriteTo(output, _map_mapSfixed32Sfixed32_codec);
      mapSfixed64Sfixed64_.WriteTo(output, _map_mapSfixed64Sfixed64_codec);
      mapInt32Float_.WriteTo(output, _map_mapInt32Float_codec);
      mapInt32Double_.WriteTo(output, _map_mapInt32Double_codec);
      mapBoolBool_.WriteTo(output, _map_mapBoolBool_codec);
      mapStringString_.WriteTo(output, _map_mapStringString_codec);
      mapInt32Bytes_.WriteTo(output, _map_mapInt32Bytes_codec);
      mapInt32Enum_.WriteTo(output, _map_mapInt32Enum_codec);
      mapInt32ForeignMessage_.WriteTo(output, _map_mapInt32ForeignMessage_codec);
      mapInt32ForeignNoEventsMessage_.WriteTo(output, _map_mapInt32ForeignNoEventsMessage_codec);
      mapInt32TestAllTypesMessage_.WriteTo(output, _map_mapInt32TestAllTypesMessage_codec);
      mapInt32TestAllTypesNoEventsMessage_.WriteTo(output, _map_mapInt32TestAllTypesNoEventsMessage_codec);
      if (allTypes_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(AllTypes);
      }
      if (allTypesNoEvents_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(AllTypesNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(OneofForeignMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(OneofForeignMessageNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(OneofAllTypes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(OneofAllTypesNoEvents);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SingleInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SingleInt32);
      }
      if (SingleInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SingleInt64);
      }
      if (SingleUint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SingleUint32);
      }
      if (SingleUint64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SingleUint64);
      }
      if (SingleSint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SingleSint32);
      }
      if (SingleSint64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SingleSint64);
      }
      if (SingleFixed32 != 0) {
        size += 1 + 4;
      }
      if (SingleFixed64 != 0UL) {
        size += 1 + 8;
      }
      if (SingleSfixed32 != 0) {
        size += 1 + 4;
      }
      if (SingleSfixed64 != 0L) {
        size += 1 + 8;
      }
      if (SingleFloat != 0F) {
        size += 1 + 4;
      }
      if (SingleDouble != 0D) {
        size += 1 + 8;
      }
      if (SingleBool != false) {
        size += 1 + 1;
      }
      if (SingleString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingleString);
      }
      if (SingleBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SingleBytes);
      }
      if (singleNestedMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleNestedMessage);
      }
      if (singleForeignMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleForeignMessage);
      }
      if (singleImportMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleImportMessage);
      }
      if (SingleNestedEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleNestedEnum);
      }
      if (SingleForeignEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleForeignEnum);
      }
      if (SingleImportEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleImportEnum);
      }
      if (singlePublicImportMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SinglePublicImportMessage);
      }
      size += repeatedInt32_.CalculateSize(_repeated_repeatedInt32_codec);
      size += repeatedInt64_.CalculateSize(_repeated_repeatedInt64_codec);
      size += repeatedUint32_.CalculateSize(_repeated_repeatedUint32_codec);
      size += repeatedUint64_.CalculateSize(_repeated_repeatedUint64_codec);
      size += repeatedSint32_.CalculateSize(_repeated_repeatedSint32_codec);
      size += repeatedSint64_.CalculateSize(_repeated_repeatedSint64_codec);
      size += repeatedFixed32_.CalculateSize(_repeated_repeatedFixed32_codec);
      size += repeatedFixed64_.CalculateSize(_repeated_repeatedFixed64_codec);
      size += repeatedSfixed32_.CalculateSize(_repeated_repeatedSfixed32_codec);
      size += repeatedSfixed64_.CalculateSize(_repeated_repeatedSfixed64_codec);
      size += repeatedFloat_.CalculateSize(_repeated_repeatedFloat_codec);
      size += repeatedDouble_.CalculateSize(_repeated_repeatedDouble_codec);
      size += repeatedBool_.CalculateSize(_repeated_repeatedBool_codec);
      size += repeatedString_.CalculateSize(_repeated_repeatedString_codec);
      size += repeatedBytes_.CalculateSize(_repeated_repeatedBytes_codec);
      size += repeatedNestedMessage_.CalculateSize(_repeated_repeatedNestedMessage_codec);
      size += repeatedForeignMessage_.CalculateSize(_repeated_repeatedForeignMessage_codec);
      size += repeatedImportMessage_.CalculateSize(_repeated_repeatedImportMessage_codec);
      size += repeatedImportNoEvents_.CalculateSize(_repeated_repeatedImportNoEvents_codec);
      size += repeatedTestAllTypesMessage_.CalculateSize(_repeated_repeatedTestAllTypesMessage_codec);
      size += repeatedTestAllTypesNoEventsMessage_.CalculateSize(_repeated_repeatedTestAllTypesNoEventsMessage_codec);
      size += repeatedNestedEnum_.CalculateSize(_repeated_repeatedNestedEnum_codec);
      size += repeatedForeignEnum_.CalculateSize(_repeated_repeatedForeignEnum_codec);
      size += repeatedImportEnum_.CalculateSize(_repeated_repeatedImportEnum_codec);
      size += repeatedPublicImportMessage_.CalculateSize(_repeated_repeatedPublicImportMessage_codec);
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofUint32) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OneofUint32);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofNestedMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofString) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OneofString);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofBytes) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OneofBytes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofForeignMessage);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofForeignMessageNoEvents);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofAllTypes);
      }
      if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneofAllTypesNoEvents);
      }
      size += mapInt32Int32_.CalculateSize(_map_mapInt32Int32_codec);
      size += mapInt64Int64_.CalculateSize(_map_mapInt64Int64_codec);
      size += mapUint32Uint32_.CalculateSize(_map_mapUint32Uint32_codec);
      size += mapUint64Uint64_.CalculateSize(_map_mapUint64Uint64_codec);
      size += mapSint32Sint32_.CalculateSize(_map_mapSint32Sint32_codec);
      size += mapSint64Sint64_.CalculateSize(_map_mapSint64Sint64_codec);
      size += mapFixed32Fixed32_.CalculateSize(_map_mapFixed32Fixed32_codec);
      size += mapFixed64Fixed64_.CalculateSize(_map_mapFixed64Fixed64_codec);
      size += mapSfixed32Sfixed32_.CalculateSize(_map_mapSfixed32Sfixed32_codec);
      size += mapSfixed64Sfixed64_.CalculateSize(_map_mapSfixed64Sfixed64_codec);
      size += mapInt32Float_.CalculateSize(_map_mapInt32Float_codec);
      size += mapInt32Double_.CalculateSize(_map_mapInt32Double_codec);
      size += mapBoolBool_.CalculateSize(_map_mapBoolBool_codec);
      size += mapStringString_.CalculateSize(_map_mapStringString_codec);
      size += mapInt32Bytes_.CalculateSize(_map_mapInt32Bytes_codec);
      size += mapInt32Enum_.CalculateSize(_map_mapInt32Enum_codec);
      size += mapInt32ForeignMessage_.CalculateSize(_map_mapInt32ForeignMessage_codec);
      size += mapInt32ForeignNoEventsMessage_.CalculateSize(_map_mapInt32ForeignNoEventsMessage_codec);
      size += mapInt32TestAllTypesMessage_.CalculateSize(_map_mapInt32TestAllTypesMessage_codec);
      size += mapInt32TestAllTypesNoEventsMessage_.CalculateSize(_map_mapInt32TestAllTypesNoEventsMessage_codec);
      if (allTypes_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AllTypes);
      }
      if (allTypesNoEvents_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AllTypesNoEvents);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestAllTypesNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.SingleInt32 != 0) {
        SingleInt32 = other.SingleInt32;
      }
      if (other.SingleInt64 != 0L) {
        SingleInt64 = other.SingleInt64;
      }
      if (other.SingleUint32 != 0) {
        SingleUint32 = other.SingleUint32;
      }
      if (other.SingleUint64 != 0UL) {
        SingleUint64 = other.SingleUint64;
      }
      if (other.SingleSint32 != 0) {
        SingleSint32 = other.SingleSint32;
      }
      if (other.SingleSint64 != 0L) {
        SingleSint64 = other.SingleSint64;
      }
      if (other.SingleFixed32 != 0) {
        SingleFixed32 = other.SingleFixed32;
      }
      if (other.SingleFixed64 != 0UL) {
        SingleFixed64 = other.SingleFixed64;
      }
      if (other.SingleSfixed32 != 0) {
        SingleSfixed32 = other.SingleSfixed32;
      }
      if (other.SingleSfixed64 != 0L) {
        SingleSfixed64 = other.SingleSfixed64;
      }
      if (other.SingleFloat != 0F) {
        SingleFloat = other.SingleFloat;
      }
      if (other.SingleDouble != 0D) {
        SingleDouble = other.SingleDouble;
      }
      if (other.SingleBool != false) {
        SingleBool = other.SingleBool;
      }
      if (other.SingleString.Length != 0) {
        SingleString = other.SingleString;
      }
      if (other.SingleBytes.Length != 0) {
        SingleBytes = other.SingleBytes;
      }
      if (other.singleNestedMessage_ != null) {
        if (singleNestedMessage_ == null) {
          singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
        }
        SingleNestedMessage.MergeFrom(other.SingleNestedMessage);
      }
      if (other.singleForeignMessage_ != null) {
        if (singleForeignMessage_ == null) {
          singleForeignMessage_ = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
        }
        SingleForeignMessage.MergeFrom(other.SingleForeignMessage);
      }
      if (other.singleImportMessage_ != null) {
        if (singleImportMessage_ == null) {
          singleImportMessage_ = new global::Google.Protobuf.TestProtos.ImportMessageNoEvents();
        }
        SingleImportMessage.MergeFrom(other.SingleImportMessage);
      }
      if (other.SingleNestedEnum != 0) {
        SingleNestedEnum = other.SingleNestedEnum;
      }
      if (other.SingleForeignEnum != 0) {
        SingleForeignEnum = other.SingleForeignEnum;
      }
      if (other.SingleImportEnum != 0) {
        SingleImportEnum = other.SingleImportEnum;
      }
      if (other.singlePublicImportMessage_ != null) {
        if (singlePublicImportMessage_ == null) {
          singlePublicImportMessage_ = new global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents();
        }
        SinglePublicImportMessage.MergeFrom(other.SinglePublicImportMessage);
      }
      repeatedInt32_.Add(other.repeatedInt32_);
      repeatedInt64_.Add(other.repeatedInt64_);
      repeatedUint32_.Add(other.repeatedUint32_);
      repeatedUint64_.Add(other.repeatedUint64_);
      repeatedSint32_.Add(other.repeatedSint32_);
      repeatedSint64_.Add(other.repeatedSint64_);
      repeatedFixed32_.Add(other.repeatedFixed32_);
      repeatedFixed64_.Add(other.repeatedFixed64_);
      repeatedSfixed32_.Add(other.repeatedSfixed32_);
      repeatedSfixed64_.Add(other.repeatedSfixed64_);
      repeatedFloat_.Add(other.repeatedFloat_);
      repeatedDouble_.Add(other.repeatedDouble_);
      repeatedBool_.Add(other.repeatedBool_);
      repeatedString_.Add(other.repeatedString_);
      repeatedBytes_.Add(other.repeatedBytes_);
      repeatedNestedMessage_.Add(other.repeatedNestedMessage_);
      repeatedForeignMessage_.Add(other.repeatedForeignMessage_);
      repeatedImportMessage_.Add(other.repeatedImportMessage_);
      repeatedImportNoEvents_.Add(other.repeatedImportNoEvents_);
      repeatedTestAllTypesMessage_.Add(other.repeatedTestAllTypesMessage_);
      repeatedTestAllTypesNoEventsMessage_.Add(other.repeatedTestAllTypesNoEventsMessage_);
      repeatedNestedEnum_.Add(other.repeatedNestedEnum_);
      repeatedForeignEnum_.Add(other.repeatedForeignEnum_);
      repeatedImportEnum_.Add(other.repeatedImportEnum_);
      repeatedPublicImportMessage_.Add(other.repeatedPublicImportMessage_);
      mapInt32Int32_.Add(other.mapInt32Int32_);
      mapInt64Int64_.Add(other.mapInt64Int64_);
      mapUint32Uint32_.Add(other.mapUint32Uint32_);
      mapUint64Uint64_.Add(other.mapUint64Uint64_);
      mapSint32Sint32_.Add(other.mapSint32Sint32_);
      mapSint64Sint64_.Add(other.mapSint64Sint64_);
      mapFixed32Fixed32_.Add(other.mapFixed32Fixed32_);
      mapFixed64Fixed64_.Add(other.mapFixed64Fixed64_);
      mapSfixed32Sfixed32_.Add(other.mapSfixed32Sfixed32_);
      mapSfixed64Sfixed64_.Add(other.mapSfixed64Sfixed64_);
      mapInt32Float_.Add(other.mapInt32Float_);
      mapInt32Double_.Add(other.mapInt32Double_);
      mapBoolBool_.Add(other.mapBoolBool_);
      mapStringString_.Add(other.mapStringString_);
      mapInt32Bytes_.Add(other.mapInt32Bytes_);
      mapInt32Enum_.Add(other.mapInt32Enum_);
      mapInt32ForeignMessage_.Add(other.mapInt32ForeignMessage_);
      mapInt32ForeignNoEventsMessage_.Add(other.mapInt32ForeignNoEventsMessage_);
      mapInt32TestAllTypesMessage_.Add(other.mapInt32TestAllTypesMessage_);
      mapInt32TestAllTypesNoEventsMessage_.Add(other.mapInt32TestAllTypesNoEventsMessage_);
      if (other.allTypes_ != null) {
        if (allTypes_ == null) {
          allTypes_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
        }
        AllTypes.MergeFrom(other.AllTypes);
      }
      if (other.allTypesNoEvents_ != null) {
        if (allTypesNoEvents_ == null) {
          allTypesNoEvents_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
        }
        AllTypesNoEvents.MergeFrom(other.AllTypesNoEvents);
      }
      switch (other.OneofFieldCase) {
        case OneofFieldOneofCase.OneofUint32:
          OneofUint32 = other.OneofUint32;
          break;
        case OneofFieldOneofCase.OneofNestedMessage:
          if (OneofNestedMessage == null) {
            OneofNestedMessage = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
          }
          OneofNestedMessage.MergeFrom(other.OneofNestedMessage);
          break;
        case OneofFieldOneofCase.OneofString:
          OneofString = other.OneofString;
          break;
        case OneofFieldOneofCase.OneofBytes:
          OneofBytes = other.OneofBytes;
          break;
        case OneofFieldOneofCase.OneofForeignMessage:
          if (OneofForeignMessage == null) {
            OneofForeignMessage = new global::Google.Protobuf.TestProtos.ForeignMessage();
          }
          OneofForeignMessage.MergeFrom(other.OneofForeignMessage);
          break;
        case OneofFieldOneofCase.OneofForeignMessageNoEvents:
          if (OneofForeignMessageNoEvents == null) {
            OneofForeignMessageNoEvents = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
          }
          OneofForeignMessageNoEvents.MergeFrom(other.OneofForeignMessageNoEvents);
          break;
        case OneofFieldOneofCase.OneofAllTypes:
          if (OneofAllTypes == null) {
            OneofAllTypes = new global::Google.Protobuf.TestProtos.TestAllTypes();
          }
          OneofAllTypes.MergeFrom(other.OneofAllTypes);
          break;
        case OneofFieldOneofCase.OneofAllTypesNoEvents:
          if (OneofAllTypesNoEvents == null) {
            OneofAllTypesNoEvents = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
          }
          OneofAllTypesNoEvents.MergeFrom(other.OneofAllTypesNoEvents);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SingleInt32 = input.ReadInt32();
            break;
          }
          case 16: {
            SingleInt64 = input.ReadInt64();
            break;
          }
          case 24: {
            SingleUint32 = input.ReadUInt32();
            break;
          }
          case 32: {
            SingleUint64 = input.ReadUInt64();
            break;
          }
          case 40: {
            SingleSint32 = input.ReadSInt32();
            break;
          }
          case 48: {
            SingleSint64 = input.ReadSInt64();
            break;
          }
          case 61: {
            SingleFixed32 = input.ReadFixed32();
            break;
          }
          case 65: {
            SingleFixed64 = input.ReadFixed64();
            break;
          }
          case 77: {
            SingleSfixed32 = input.ReadSFixed32();
            break;
          }
          case 81: {
            SingleSfixed64 = input.ReadSFixed64();
            break;
          }
          case 93: {
            SingleFloat = input.ReadFloat();
            break;
          }
          case 97: {
            SingleDouble = input.ReadDouble();
            break;
          }
          case 104: {
            SingleBool = input.ReadBool();
            break;
          }
          case 114: {
            SingleString = input.ReadString();
            break;
          }
          case 122: {
            SingleBytes = input.ReadBytes();
            break;
          }
          case 146: {
            if (singleNestedMessage_ == null) {
              singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
            }
            input.ReadMessage(singleNestedMessage_);
            break;
          }
          case 154: {
            if (singleForeignMessage_ == null) {
              singleForeignMessage_ = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
            }
            input.ReadMessage(singleForeignMessage_);
            break;
          }
          case 162: {
            if (singleImportMessage_ == null) {
              singleImportMessage_ = new global::Google.Protobuf.TestProtos.ImportMessageNoEvents();
            }
            input.ReadMessage(singleImportMessage_);
            break;
          }
          case 168: {
            singleNestedEnum_ = (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedEnumNoEvents) input.ReadEnum();
            break;
          }
          case 176: {
            singleForeignEnum_ = (global::Google.Protobuf.TestProtos.ForeignEnum) input.ReadEnum();
            break;
          }
          case 184: {
            singleImportEnum_ = (global::Google.Protobuf.TestProtos.ImportEnum) input.ReadEnum();
            break;
          }
          case 210: {
            if (singlePublicImportMessage_ == null) {
              singlePublicImportMessage_ = new global::Google.Protobuf.TestProtos.PublicImportMessageNoEvents();
            }
            input.ReadMessage(singlePublicImportMessage_);
            break;
          }
          case 250:
          case 248: {
            repeatedInt32_.AddEntriesFrom(input, _repeated_repeatedInt32_codec);
            break;
          }
          case 258:
          case 256: {
            repeatedInt64_.AddEntriesFrom(input, _repeated_repeatedInt64_codec);
            break;
          }
          case 266:
          case 264: {
            repeatedUint32_.AddEntriesFrom(input, _repeated_repeatedUint32_codec);
            break;
          }
          case 274:
          case 272: {
            repeatedUint64_.AddEntriesFrom(input, _repeated_repeatedUint64_codec);
            break;
          }
          case 282:
          case 280: {
            repeatedSint32_.AddEntriesFrom(input, _repeated_repeatedSint32_codec);
            break;
          }
          case 290:
          case 288: {
            repeatedSint64_.AddEntriesFrom(input, _repeated_repeatedSint64_codec);
            break;
          }
          case 298:
          case 301: {
            repeatedFixed32_.AddEntriesFrom(input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 306:
          case 305: {
            repeatedFixed64_.AddEntriesFrom(input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 314:
          case 317: {
            repeatedSfixed32_.AddEntriesFrom(input, _repeated_repeatedSfixed32_codec);
            break;
          }
          case 322:
          case 321: {
            repeatedSfixed64_.AddEntriesFrom(input, _repeated_repeatedSfixed64_codec);
            break;
          }
          case 330:
          case 333: {
            repeatedFloat_.AddEntriesFrom(input, _repeated_repeatedFloat_codec);
            break;
          }
          case 338:
          case 337: {
            repeatedDouble_.AddEntriesFrom(input, _repeated_repeatedDouble_codec);
            break;
          }
          case 346:
          case 344: {
            repeatedBool_.AddEntriesFrom(input, _repeated_repeatedBool_codec);
            break;
          }
          case 354: {
            repeatedString_.AddEntriesFrom(input, _repeated_repeatedString_codec);
            break;
          }
          case 362: {
            repeatedBytes_.AddEntriesFrom(input, _repeated_repeatedBytes_codec);
            break;
          }
          case 386: {
            repeatedNestedMessage_.AddEntriesFrom(input, _repeated_repeatedNestedMessage_codec);
            break;
          }
          case 394: {
            repeatedForeignMessage_.AddEntriesFrom(input, _repeated_repeatedForeignMessage_codec);
            break;
          }
          case 402: {
            repeatedImportMessage_.AddEntriesFrom(input, _repeated_repeatedImportMessage_codec);
            break;
          }
          case 410:
          case 408: {
            repeatedNestedEnum_.AddEntriesFrom(input, _repeated_repeatedNestedEnum_codec);
            break;
          }
          case 418:
          case 416: {
            repeatedForeignEnum_.AddEntriesFrom(input, _repeated_repeatedForeignEnum_codec);
            break;
          }
          case 426:
          case 424: {
            repeatedImportEnum_.AddEntriesFrom(input, _repeated_repeatedImportEnum_codec);
            break;
          }
          case 434: {
            repeatedPublicImportMessage_.AddEntriesFrom(input, _repeated_repeatedPublicImportMessage_codec);
            break;
          }
          case 442: {
            repeatedImportNoEvents_.AddEntriesFrom(input, _repeated_repeatedImportNoEvents_codec);
            break;
          }
          case 450: {
            repeatedTestAllTypesMessage_.AddEntriesFrom(input, _repeated_repeatedTestAllTypesMessage_codec);
            break;
          }
          case 458: {
            repeatedTestAllTypesNoEventsMessage_.AddEntriesFrom(input, _repeated_repeatedTestAllTypesNoEventsMessage_codec);
            break;
          }
          case 888: {
            OneofUint32 = input.ReadUInt32();
            break;
          }
          case 898: {
            global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofNestedMessage) {
              subBuilder.MergeFrom(OneofNestedMessage);
            }
            input.ReadMessage(subBuilder);
            OneofNestedMessage = subBuilder;
            break;
          }
          case 906: {
            OneofString = input.ReadString();
            break;
          }
          case 914: {
            OneofBytes = input.ReadBytes();
            break;
          }
          case 922: {
            mapInt32Int32_.AddEntriesFrom(input, _map_mapInt32Int32_codec);
            break;
          }
          case 930: {
            mapInt64Int64_.AddEntriesFrom(input, _map_mapInt64Int64_codec);
            break;
          }
          case 938: {
            mapUint32Uint32_.AddEntriesFrom(input, _map_mapUint32Uint32_codec);
            break;
          }
          case 946: {
            mapUint64Uint64_.AddEntriesFrom(input, _map_mapUint64Uint64_codec);
            break;
          }
          case 954: {
            mapSint32Sint32_.AddEntriesFrom(input, _map_mapSint32Sint32_codec);
            break;
          }
          case 962: {
            mapSint64Sint64_.AddEntriesFrom(input, _map_mapSint64Sint64_codec);
            break;
          }
          case 970: {
            mapFixed32Fixed32_.AddEntriesFrom(input, _map_mapFixed32Fixed32_codec);
            break;
          }
          case 978: {
            mapFixed64Fixed64_.AddEntriesFrom(input, _map_mapFixed64Fixed64_codec);
            break;
          }
          case 986: {
            mapSfixed32Sfixed32_.AddEntriesFrom(input, _map_mapSfixed32Sfixed32_codec);
            break;
          }
          case 994: {
            mapSfixed64Sfixed64_.AddEntriesFrom(input, _map_mapSfixed64Sfixed64_codec);
            break;
          }
          case 1002: {
            mapInt32Float_.AddEntriesFrom(input, _map_mapInt32Float_codec);
            break;
          }
          case 1010: {
            mapInt32Double_.AddEntriesFrom(input, _map_mapInt32Double_codec);
            break;
          }
          case 1018: {
            mapBoolBool_.AddEntriesFrom(input, _map_mapBoolBool_codec);
            break;
          }
          case 1026: {
            mapStringString_.AddEntriesFrom(input, _map_mapStringString_codec);
            break;
          }
          case 1034: {
            mapInt32Bytes_.AddEntriesFrom(input, _map_mapInt32Bytes_codec);
            break;
          }
          case 1042: {
            mapInt32Enum_.AddEntriesFrom(input, _map_mapInt32Enum_codec);
            break;
          }
          case 1050: {
            mapInt32ForeignMessage_.AddEntriesFrom(input, _map_mapInt32ForeignMessage_codec);
            break;
          }
          case 1058: {
            mapInt32ForeignNoEventsMessage_.AddEntriesFrom(input, _map_mapInt32ForeignNoEventsMessage_codec);
            break;
          }
          case 1066: {
            mapInt32TestAllTypesMessage_.AddEntriesFrom(input, _map_mapInt32TestAllTypesMessage_codec);
            break;
          }
          case 1074: {
            mapInt32TestAllTypesNoEventsMessage_.AddEntriesFrom(input, _map_mapInt32TestAllTypesNoEventsMessage_codec);
            break;
          }
          case 1082: {
            if (allTypes_ == null) {
              allTypes_ = new global::Google.Protobuf.TestProtos.TestAllTypes();
            }
            input.ReadMessage(allTypes_);
            break;
          }
          case 1090: {
            if (allTypesNoEvents_ == null) {
              allTypesNoEvents_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            }
            input.ReadMessage(allTypesNoEvents_);
            break;
          }
          case 1098: {
            global::Google.Protobuf.TestProtos.ForeignMessage subBuilder = new global::Google.Protobuf.TestProtos.ForeignMessage();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessage) {
              subBuilder.MergeFrom(OneofForeignMessage);
            }
            input.ReadMessage(subBuilder);
            OneofForeignMessage = subBuilder;
            break;
          }
          case 1106: {
            global::Google.Protobuf.TestProtos.ForeignMessageNoEvents subBuilder = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofForeignMessageNoEvents) {
              subBuilder.MergeFrom(OneofForeignMessageNoEvents);
            }
            input.ReadMessage(subBuilder);
            OneofForeignMessageNoEvents = subBuilder;
            break;
          }
          case 1114: {
            global::Google.Protobuf.TestProtos.TestAllTypes subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypes();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypes) {
              subBuilder.MergeFrom(OneofAllTypes);
            }
            input.ReadMessage(subBuilder);
            OneofAllTypes = subBuilder;
            break;
          }
          case 1122: {
            global::Google.Protobuf.TestProtos.TestAllTypesNoEvents subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            if (oneofFieldCase_ == OneofFieldOneofCase.OneofAllTypesNoEvents) {
              subBuilder.MergeFrom(OneofAllTypesNoEvents);
            }
            input.ReadMessage(subBuilder);
            OneofAllTypesNoEvents = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestAllTypesNoEvents message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NestedEnumNoEvents {
        [pbr::OriginalName("NESTED_ENUM_UNSPECIFIED_NO_EVENTS")] NestedEnumUnspecifiedNoEvents = 0,
        [pbr::OriginalName("FOO_NO_EVENTS")] FooNoEvents = 1,
        [pbr::OriginalName("BAR_NO_EVENTS")] BarNoEvents = 2,
        [pbr::OriginalName("BAZ_NO_EVENTS")] BazNoEvents = 3,
        /// <summary>
        /// Intentionally negative.
        /// </summary>
        [pbr::OriginalName("NEG_NO_EVENTS")] NegNoEvents = -1,
      }

      public sealed partial class NestedMessageNoEvents : pb::IMessage<NestedMessageNoEvents> {
        private static readonly pb::MessageParser<NestedMessageNoEvents> _parser = new pb::MessageParser<NestedMessageNoEvents>(() => new NestedMessageNoEvents());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessageNoEvents> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents(NestedMessageNoEvents other) : this() {
          bb_ = other.bb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents Clone() {
          return new NestedMessageNoEvents(this);
        }

        public static bool IsEventSourced = false;

        /// <summary>Field number for the "bb" field.</summary>
        public const int BbFieldNumber = 1;
        private int bb_;
        /// <summary>
        /// The field name "b" fails to compile in proto1 because it conflicts with
        /// a local variable named "b" in one of the generated methods.  Doh.
        /// This file needs to compile in proto1 to test backwards-compatibility.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Bb {
          get { return bb_; }
          set {
            bb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessageNoEvents);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessageNoEvents other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bb != other.Bb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bb != 0) hash ^= Bb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bb != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bb != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bb);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessageNoEvents other) {
          if (other == null) {
            return;
          }
          if (other.Bb != 0) {
            Bb = other.Bb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// This proto includes a recusively nested message.
  /// </summary>
  public sealed partial class NestedTestAllTypesNoEvents : pb::IMessage<NestedTestAllTypesNoEvents> {
    private static readonly pb::MessageParser<NestedTestAllTypesNoEvents> _parser = new pb::MessageParser<NestedTestAllTypesNoEvents>(() => new NestedTestAllTypesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedTestAllTypesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypesNoEvents(NestedTestAllTypesNoEvents other) : this() {
      child_ = other.child_ != null ? other.Child.Clone() : null;
      payload_ = other.payload_ != null ? other.Payload.Clone() : null;
      repeatedChild_ = other.repeatedChild_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypesNoEvents Clone() {
      return new NestedTestAllTypesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents Child {
      get { return child_; }
      set {
        child_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "repeated_child" field.</summary>
    public const int RepeatedChildFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents> _repeated_repeatedChild_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents> repeatedChild_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents> RepeatedChild {
      get { return repeatedChild_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedTestAllTypesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedTestAllTypesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Child, other.Child)) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      if(!repeatedChild_.Equals(other.repeatedChild_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (child_ != null) hash ^= Child.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      hash ^= repeatedChild_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (child_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Child);
      }
      if (payload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payload);
      }
      repeatedChild_.WriteTo(output, _repeated_repeatedChild_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (child_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      size += repeatedChild_.CalculateSize(_repeated_repeatedChild_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedTestAllTypesNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.child_ != null) {
        if (child_ == null) {
          child_ = new global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents();
        }
        Child.MergeFrom(other.Child);
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
        }
        Payload.MergeFrom(other.Payload);
      }
      repeatedChild_.Add(other.repeatedChild_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (child_ == null) {
              child_ = new global::Google.Protobuf.TestProtos.NestedTestAllTypesNoEvents();
            }
            input.ReadMessage(child_);
            break;
          }
          case 18: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 26: {
            repeatedChild_.AddEntriesFrom(input, _repeated_repeatedChild_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestDeprecatedFieldsNoEvents : pb::IMessage<TestDeprecatedFieldsNoEvents> {
    private static readonly pb::MessageParser<TestDeprecatedFieldsNoEvents> _parser = new pb::MessageParser<TestDeprecatedFieldsNoEvents>(() => new TestDeprecatedFieldsNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestDeprecatedFieldsNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFieldsNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFieldsNoEvents(TestDeprecatedFieldsNoEvents other) : this() {
      deprecatedInt32_ = other.deprecatedInt32_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestDeprecatedFieldsNoEvents Clone() {
      return new TestDeprecatedFieldsNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "deprecated_int32" field.</summary>
    public const int DeprecatedInt32FieldNumber = 1;
    private int deprecatedInt32_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedInt32 {
      get { return deprecatedInt32_; }
      set {
        deprecatedInt32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestDeprecatedFieldsNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestDeprecatedFieldsNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeprecatedInt32 != other.DeprecatedInt32) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeprecatedInt32 != 0) hash ^= DeprecatedInt32.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedInt32 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeprecatedInt32);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeprecatedInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedInt32);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestDeprecatedFieldsNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.DeprecatedInt32 != 0) {
        DeprecatedInt32 = other.DeprecatedInt32;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeprecatedInt32 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Define these after TestAllTypes to make sure the compiler can handle
  /// that.
  /// </summary>
  public sealed partial class ForeignMessageNoEvents : pb::IMessage<ForeignMessageNoEvents> {
    private static readonly pb::MessageParser<ForeignMessageNoEvents> _parser = new pb::MessageParser<ForeignMessageNoEvents>(() => new ForeignMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForeignMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessageNoEvents(ForeignMessageNoEvents other) : this() {
      c_ = other.c_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForeignMessageNoEvents Clone() {
      return new ForeignMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 1;
    private int c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForeignMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForeignMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (C != other.C) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (C != 0) hash ^= C.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (C != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(C);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(C);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForeignMessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.C != 0) {
        C = other.C;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            C = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestReservedFieldsNoEvents : pb::IMessage<TestReservedFieldsNoEvents> {
    private static readonly pb::MessageParser<TestReservedFieldsNoEvents> _parser = new pb::MessageParser<TestReservedFieldsNoEvents>(() => new TestReservedFieldsNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestReservedFieldsNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFieldsNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFieldsNoEvents(TestReservedFieldsNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReservedFieldsNoEvents Clone() {
      return new TestReservedFieldsNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestReservedFieldsNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestReservedFieldsNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestReservedFieldsNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Test that we can use NestedMessage from outside TestAllTypes.
  /// </summary>
  public sealed partial class TestForeignNestedNoEvents : pb::IMessage<TestForeignNestedNoEvents> {
    private static readonly pb::MessageParser<TestForeignNestedNoEvents> _parser = new pb::MessageParser<TestForeignNestedNoEvents>(() => new TestForeignNestedNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestForeignNestedNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNestedNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNestedNoEvents(TestForeignNestedNoEvents other) : this() {
      foreignNested_ = other.foreignNested_ != null ? other.ForeignNested.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestForeignNestedNoEvents Clone() {
      return new TestForeignNestedNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "foreign_nested" field.</summary>
    public const int ForeignNestedFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents foreignNested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents ForeignNested {
      get { return foreignNested_; }
      set {
        foreignNested_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestForeignNestedNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestForeignNestedNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ForeignNested, other.ForeignNested)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (foreignNested_ != null) hash ^= ForeignNested.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (foreignNested_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ForeignNested);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (foreignNested_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForeignNested);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestForeignNestedNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.foreignNested_ != null) {
        if (foreignNested_ == null) {
          foreignNested_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
        }
        ForeignNested.MergeFrom(other.ForeignNested);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (foreignNested_ == null) {
              foreignNested_ = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents.Types.NestedMessageNoEvents();
            }
            input.ReadMessage(foreignNested_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test that really large tag numbers don't break anything.
  /// </summary>
  public sealed partial class TestReallyLargeTagNumberNoEvents : pb::IMessage<TestReallyLargeTagNumberNoEvents> {
    private static readonly pb::MessageParser<TestReallyLargeTagNumberNoEvents> _parser = new pb::MessageParser<TestReallyLargeTagNumberNoEvents>(() => new TestReallyLargeTagNumberNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestReallyLargeTagNumberNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumberNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumberNoEvents(TestReallyLargeTagNumberNoEvents other) : this() {
      a_ = other.a_;
      bb_ = other.bb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReallyLargeTagNumberNoEvents Clone() {
      return new TestReallyLargeTagNumberNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    /// <summary>
    /// The largest possible tag number is 2^28 - 1, since the wire format uses
    /// three bits to communicate wire type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "bb" field.</summary>
    public const int BbFieldNumber = 268435455;
    private int bb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bb {
      get { return bb_; }
      set {
        bb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestReallyLargeTagNumberNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestReallyLargeTagNumberNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (Bb != other.Bb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (Bb != 0) hash ^= Bb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (Bb != 0) {
        output.WriteRawTag(248, 255, 255, 255, 7);
        output.WriteInt32(Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (Bb != 0) {
        size += 5 + pb::CodedOutputStream.ComputeInt32Size(Bb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestReallyLargeTagNumberNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.Bb != 0) {
        Bb = other.Bb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 2147483640: {
            Bb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestRecursiveMessageNoEvents : pb::IMessage<TestRecursiveMessageNoEvents> {
    private static readonly pb::MessageParser<TestRecursiveMessageNoEvents> _parser = new pb::MessageParser<TestRecursiveMessageNoEvents>(() => new TestRecursiveMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRecursiveMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessageNoEvents(TestRecursiveMessageNoEvents other) : this() {
      a_ = other.a_ != null ? other.A.Clone() : null;
      i_ = other.i_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecursiveMessageNoEvents Clone() {
      return new TestRecursiveMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 2;
    private int i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRecursiveMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRecursiveMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(A, other.A)) return false;
      if (I != other.I) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (a_ != null) hash ^= A.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (a_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(A);
      }
      if (I != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(I);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRecursiveMessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.a_ != null) {
        if (a_ == null) {
          a_ = new global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents();
        }
        A.MergeFrom(other.A);
      }
      if (other.I != 0) {
        I = other.I;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (a_ == null) {
              a_ = new global::Google.Protobuf.TestProtos.TestRecursiveMessageNoEvents();
            }
            input.ReadMessage(a_);
            break;
          }
          case 16: {
            I = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test that mutual recursion works.
  /// </summary>
  public sealed partial class TestMutualRecursionANoEvents : pb::IMessage<TestMutualRecursionANoEvents> {
    private static readonly pb::MessageParser<TestMutualRecursionANoEvents> _parser = new pb::MessageParser<TestMutualRecursionANoEvents>(() => new TestMutualRecursionANoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestMutualRecursionANoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionANoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionANoEvents(TestMutualRecursionANoEvents other) : this() {
      bb_ = other.bb_ != null ? other.Bb.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionANoEvents Clone() {
      return new TestMutualRecursionANoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "bb" field.</summary>
    public const int BbFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents bb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents Bb {
      get { return bb_; }
      set {
        bb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestMutualRecursionANoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestMutualRecursionANoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bb, other.Bb)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bb_ != null) hash ^= Bb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bb_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestMutualRecursionANoEvents other) {
      if (other == null) {
        return;
      }
      if (other.bb_ != null) {
        if (bb_ == null) {
          bb_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents();
        }
        Bb.MergeFrom(other.Bb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bb_ == null) {
              bb_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionBNoEvents();
            }
            input.ReadMessage(bb_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestMutualRecursionBNoEvents : pb::IMessage<TestMutualRecursionBNoEvents> {
    private static readonly pb::MessageParser<TestMutualRecursionBNoEvents> _parser = new pb::MessageParser<TestMutualRecursionBNoEvents>(() => new TestMutualRecursionBNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestMutualRecursionBNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionBNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionBNoEvents(TestMutualRecursionBNoEvents other) : this() {
      a_ = other.a_ != null ? other.A.Clone() : null;
      optionalInt32_ = other.optionalInt32_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMutualRecursionBNoEvents Clone() {
      return new TestMutualRecursionBNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "optional_int32" field.</summary>
    public const int OptionalInt32FieldNumber = 2;
    private int optionalInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptionalInt32 {
      get { return optionalInt32_; }
      set {
        optionalInt32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestMutualRecursionBNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestMutualRecursionBNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(A, other.A)) return false;
      if (OptionalInt32 != other.OptionalInt32) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (a_ != null) hash ^= A.GetHashCode();
      if (OptionalInt32 != 0) hash ^= OptionalInt32.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (a_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(A);
      }
      if (OptionalInt32 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OptionalInt32);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (OptionalInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptionalInt32);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestMutualRecursionBNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.a_ != null) {
        if (a_ == null) {
          a_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents();
        }
        A.MergeFrom(other.A);
      }
      if (other.OptionalInt32 != 0) {
        OptionalInt32 = other.OptionalInt32;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (a_ == null) {
              a_ = new global::Google.Protobuf.TestProtos.TestMutualRecursionANoEvents();
            }
            input.ReadMessage(a_);
            break;
          }
          case 16: {
            OptionalInt32 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestEnumAllowAliasNoEvents : pb::IMessage<TestEnumAllowAliasNoEvents> {
    private static readonly pb::MessageParser<TestEnumAllowAliasNoEvents> _parser = new pb::MessageParser<TestEnumAllowAliasNoEvents>(() => new TestEnumAllowAliasNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestEnumAllowAliasNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAliasNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAliasNoEvents(TestEnumAllowAliasNoEvents other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEnumAllowAliasNoEvents Clone() {
      return new TestEnumAllowAliasNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestEnumWithDupValueNoEvents value_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestEnumWithDupValueNoEvents Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestEnumAllowAliasNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestEnumAllowAliasNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestEnumAllowAliasNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            value_ = (global::Google.Protobuf.TestProtos.TestEnumWithDupValueNoEvents) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test message with CamelCase field names.  This violates Protocol Buffer
  /// standard style.
  /// </summary>
  public sealed partial class TestCamelCaseFieldNamesNoEvents : pb::IMessage<TestCamelCaseFieldNamesNoEvents> {
    private static readonly pb::MessageParser<TestCamelCaseFieldNamesNoEvents> _parser = new pb::MessageParser<TestCamelCaseFieldNamesNoEvents>(() => new TestCamelCaseFieldNamesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCamelCaseFieldNamesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNamesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNamesNoEvents(TestCamelCaseFieldNamesNoEvents other) : this() {
      primitiveField_ = other.primitiveField_;
      stringField_ = other.stringField_;
      enumField_ = other.enumField_;
      messageField_ = other.messageField_ != null ? other.MessageField.Clone() : null;
      repeatedPrimitiveField_ = other.repeatedPrimitiveField_.Clone();
      repeatedStringField_ = other.repeatedStringField_.Clone();
      repeatedEnumField_ = other.repeatedEnumField_.Clone();
      repeatedMessageField_ = other.repeatedMessageField_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCamelCaseFieldNamesNoEvents Clone() {
      return new TestCamelCaseFieldNamesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "PrimitiveField" field.</summary>
    public const int PrimitiveFieldFieldNumber = 1;
    private int primitiveField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrimitiveField {
      get { return primitiveField_; }
      set {
        primitiveField_ = value;
      }
    }

    /// <summary>Field number for the "StringField" field.</summary>
    public const int StringFieldFieldNumber = 2;
    private string stringField_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringField {
      get { return stringField_; }
      set {
        stringField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EnumField" field.</summary>
    public const int EnumFieldFieldNumber = 3;
    private global::Google.Protobuf.TestProtos.ForeignEnum enumField_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignEnum EnumField {
      get { return enumField_; }
      set {
        enumField_ = value;
      }
    }

    /// <summary>Field number for the "MessageField" field.</summary>
    public const int MessageFieldFieldNumber = 4;
    private global::Google.Protobuf.TestProtos.ForeignMessageNoEvents messageField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.ForeignMessageNoEvents MessageField {
      get { return messageField_; }
      set {
        messageField_ = value;
      }
    }

    /// <summary>Field number for the "RepeatedPrimitiveField" field.</summary>
    public const int RepeatedPrimitiveFieldFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_repeatedPrimitiveField_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> repeatedPrimitiveField_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedPrimitiveField {
      get { return repeatedPrimitiveField_; }
    }

    /// <summary>Field number for the "RepeatedStringField" field.</summary>
    public const int RepeatedStringFieldFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_repeatedStringField_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> repeatedStringField_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepeatedStringField {
      get { return repeatedStringField_; }
    }

    /// <summary>Field number for the "RepeatedEnumField" field.</summary>
    public const int RepeatedEnumFieldFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_repeatedEnumField_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> repeatedEnumField_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> RepeatedEnumField {
      get { return repeatedEnumField_; }
    }

    /// <summary>Field number for the "RepeatedMessageField" field.</summary>
    public const int RepeatedMessageFieldFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> _repeated_repeatedMessageField_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Protobuf.TestProtos.ForeignMessageNoEvents.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> repeatedMessageField_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignMessageNoEvents> RepeatedMessageField {
      get { return repeatedMessageField_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCamelCaseFieldNamesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCamelCaseFieldNamesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrimitiveField != other.PrimitiveField) return false;
      if (StringField != other.StringField) return false;
      if (EnumField != other.EnumField) return false;
      if (!object.Equals(MessageField, other.MessageField)) return false;
      if(!repeatedPrimitiveField_.Equals(other.repeatedPrimitiveField_)) return false;
      if(!repeatedStringField_.Equals(other.repeatedStringField_)) return false;
      if(!repeatedEnumField_.Equals(other.repeatedEnumField_)) return false;
      if(!repeatedMessageField_.Equals(other.repeatedMessageField_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrimitiveField != 0) hash ^= PrimitiveField.GetHashCode();
      if (StringField.Length != 0) hash ^= StringField.GetHashCode();
      if (EnumField != 0) hash ^= EnumField.GetHashCode();
      if (messageField_ != null) hash ^= MessageField.GetHashCode();
      hash ^= repeatedPrimitiveField_.GetHashCode();
      hash ^= repeatedStringField_.GetHashCode();
      hash ^= repeatedEnumField_.GetHashCode();
      hash ^= repeatedMessageField_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrimitiveField != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PrimitiveField);
      }
      if (StringField.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringField);
      }
      if (EnumField != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumField);
      }
      if (messageField_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MessageField);
      }
      repeatedPrimitiveField_.WriteTo(output, _repeated_repeatedPrimitiveField_codec);
      repeatedStringField_.WriteTo(output, _repeated_repeatedStringField_codec);
      repeatedEnumField_.WriteTo(output, _repeated_repeatedEnumField_codec);
      repeatedMessageField_.WriteTo(output, _repeated_repeatedMessageField_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrimitiveField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimitiveField);
      }
      if (StringField.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringField);
      }
      if (EnumField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumField);
      }
      if (messageField_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageField);
      }
      size += repeatedPrimitiveField_.CalculateSize(_repeated_repeatedPrimitiveField_codec);
      size += repeatedStringField_.CalculateSize(_repeated_repeatedStringField_codec);
      size += repeatedEnumField_.CalculateSize(_repeated_repeatedEnumField_codec);
      size += repeatedMessageField_.CalculateSize(_repeated_repeatedMessageField_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCamelCaseFieldNamesNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.PrimitiveField != 0) {
        PrimitiveField = other.PrimitiveField;
      }
      if (other.StringField.Length != 0) {
        StringField = other.StringField;
      }
      if (other.EnumField != 0) {
        EnumField = other.EnumField;
      }
      if (other.messageField_ != null) {
        if (messageField_ == null) {
          messageField_ = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
        }
        MessageField.MergeFrom(other.MessageField);
      }
      repeatedPrimitiveField_.Add(other.repeatedPrimitiveField_);
      repeatedStringField_.Add(other.repeatedStringField_);
      repeatedEnumField_.Add(other.repeatedEnumField_);
      repeatedMessageField_.Add(other.repeatedMessageField_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PrimitiveField = input.ReadInt32();
            break;
          }
          case 18: {
            StringField = input.ReadString();
            break;
          }
          case 24: {
            enumField_ = (global::Google.Protobuf.TestProtos.ForeignEnum) input.ReadEnum();
            break;
          }
          case 34: {
            if (messageField_ == null) {
              messageField_ = new global::Google.Protobuf.TestProtos.ForeignMessageNoEvents();
            }
            input.ReadMessage(messageField_);
            break;
          }
          case 58:
          case 56: {
            repeatedPrimitiveField_.AddEntriesFrom(input, _repeated_repeatedPrimitiveField_codec);
            break;
          }
          case 66: {
            repeatedStringField_.AddEntriesFrom(input, _repeated_repeatedStringField_codec);
            break;
          }
          case 74:
          case 72: {
            repeatedEnumField_.AddEntriesFrom(input, _repeated_repeatedEnumField_codec);
            break;
          }
          case 82: {
            repeatedMessageField_.AddEntriesFrom(input, _repeated_repeatedMessageField_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// We list fields out of order, to ensure that we're using field number and not
  /// field index to determine serialization order.
  /// </summary>
  public sealed partial class TestFieldOrderingsNoEvents : pb::IMessage<TestFieldOrderingsNoEvents> {
    private static readonly pb::MessageParser<TestFieldOrderingsNoEvents> _parser = new pb::MessageParser<TestFieldOrderingsNoEvents>(() => new TestFieldOrderingsNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestFieldOrderingsNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderingsNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderingsNoEvents(TestFieldOrderingsNoEvents other) : this() {
      myString_ = other.myString_;
      myInt_ = other.myInt_;
      myFloat_ = other.myFloat_;
      singleNestedMessage_ = other.singleNestedMessage_ != null ? other.SingleNestedMessage.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestFieldOrderingsNoEvents Clone() {
      return new TestFieldOrderingsNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "my_string" field.</summary>
    public const int MyStringFieldNumber = 11;
    private string myString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyString {
      get { return myString_; }
      set {
        myString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "my_int" field.</summary>
    public const int MyIntFieldNumber = 1;
    private long myInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MyInt {
      get { return myInt_; }
      set {
        myInt_ = value;
      }
    }

    /// <summary>Field number for the "my_float" field.</summary>
    public const int MyFloatFieldNumber = 101;
    private float myFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MyFloat {
      get { return myFloat_; }
      set {
        myFloat_ = value;
      }
    }

    /// <summary>Field number for the "single_nested_message" field.</summary>
    public const int SingleNestedMessageFieldNumber = 200;
    private global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents singleNestedMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents SingleNestedMessage {
      get { return singleNestedMessage_; }
      set {
        singleNestedMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestFieldOrderingsNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestFieldOrderingsNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyString != other.MyString) return false;
      if (MyInt != other.MyInt) return false;
      if (MyFloat != other.MyFloat) return false;
      if (!object.Equals(SingleNestedMessage, other.SingleNestedMessage)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MyString.Length != 0) hash ^= MyString.GetHashCode();
      if (MyInt != 0L) hash ^= MyInt.GetHashCode();
      if (MyFloat != 0F) hash ^= MyFloat.GetHashCode();
      if (singleNestedMessage_ != null) hash ^= SingleNestedMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MyInt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MyInt);
      }
      if (MyString.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MyString);
      }
      if (MyFloat != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(MyFloat);
      }
      if (singleNestedMessage_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(SingleNestedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MyString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyString);
      }
      if (MyInt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MyInt);
      }
      if (MyFloat != 0F) {
        size += 2 + 4;
      }
      if (singleNestedMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleNestedMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestFieldOrderingsNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.MyString.Length != 0) {
        MyString = other.MyString;
      }
      if (other.MyInt != 0L) {
        MyInt = other.MyInt;
      }
      if (other.MyFloat != 0F) {
        MyFloat = other.MyFloat;
      }
      if (other.singleNestedMessage_ != null) {
        if (singleNestedMessage_ == null) {
          singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents();
        }
        SingleNestedMessage.MergeFrom(other.SingleNestedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MyInt = input.ReadInt64();
            break;
          }
          case 90: {
            MyString = input.ReadString();
            break;
          }
          case 813: {
            MyFloat = input.ReadFloat();
            break;
          }
          case 1602: {
            if (singleNestedMessage_ == null) {
              singleNestedMessage_ = new global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Types.NestedMessageNoEvents();
            }
            input.ReadMessage(singleNestedMessage_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestFieldOrderingsNoEvents message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NestedMessageNoEvents : pb::IMessage<NestedMessageNoEvents> {
        private static readonly pb::MessageParser<NestedMessageNoEvents> _parser = new pb::MessageParser<NestedMessageNoEvents>(() => new NestedMessageNoEvents());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessageNoEvents> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.TestProtos.TestFieldOrderingsNoEvents.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents(NestedMessageNoEvents other) : this() {
          oo_ = other.oo_;
          bb_ = other.bb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessageNoEvents Clone() {
          return new NestedMessageNoEvents(this);
        }

        public static bool IsEventSourced = false;

        /// <summary>Field number for the "oo" field.</summary>
        public const int OoFieldNumber = 2;
        private long oo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Oo {
          get { return oo_; }
          set {
            oo_ = value;
          }
        }

        /// <summary>Field number for the "bb" field.</summary>
        public const int BbFieldNumber = 1;
        private int bb_;
        /// <summary>
        /// The field name "b" fails to compile in proto1 because it conflicts with
        /// a local variable named "b" in one of the generated methods.  Doh.
        /// This file needs to compile in proto1 to test backwards-compatibility.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Bb {
          get { return bb_; }
          set {
            bb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessageNoEvents);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessageNoEvents other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Oo != other.Oo) return false;
          if (Bb != other.Bb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Oo != 0L) hash ^= Oo.GetHashCode();
          if (Bb != 0) hash ^= Bb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bb != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
          if (Oo != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Oo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Oo != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Oo);
          }
          if (Bb != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bb);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessageNoEvents other) {
          if (other == null) {
            return;
          }
          if (other.Oo != 0L) {
            Oo = other.Oo;
          }
          if (other.Bb != 0) {
            Bb = other.Bb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
              case 16: {
                Oo = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SparseEnumMessageNoEvents : pb::IMessage<SparseEnumMessageNoEvents> {
    private static readonly pb::MessageParser<SparseEnumMessageNoEvents> _parser = new pb::MessageParser<SparseEnumMessageNoEvents>(() => new SparseEnumMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseEnumMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessageNoEvents(SparseEnumMessageNoEvents other) : this() {
      sparseEnum_ = other.sparseEnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseEnumMessageNoEvents Clone() {
      return new SparseEnumMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "sparse_enum" field.</summary>
    public const int SparseEnumFieldNumber = 1;
    private global::Google.Protobuf.TestProtos.TestSparseEnumNoEvents sparseEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestSparseEnumNoEvents SparseEnum {
      get { return sparseEnum_; }
      set {
        sparseEnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseEnumMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseEnumMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SparseEnum != other.SparseEnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SparseEnum != 0) hash ^= SparseEnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SparseEnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SparseEnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SparseEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SparseEnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseEnumMessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.SparseEnum != 0) {
        SparseEnum = other.SparseEnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sparseEnum_ = (global::Google.Protobuf.TestProtos.TestSparseEnumNoEvents) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test String and Bytes: string is for valid UTF-8 strings
  /// </summary>
  public sealed partial class OneStringNoEvents : pb::IMessage<OneStringNoEvents> {
    private static readonly pb::MessageParser<OneStringNoEvents> _parser = new pb::MessageParser<OneStringNoEvents>(() => new OneStringNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneStringNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneStringNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneStringNoEvents(OneStringNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneStringNoEvents Clone() {
      return new OneStringNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneStringNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneStringNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneStringNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoreStringNoEvents : pb::IMessage<MoreStringNoEvents> {
    private static readonly pb::MessageParser<MoreStringNoEvents> _parser = new pb::MessageParser<MoreStringNoEvents>(() => new MoreStringNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoreStringNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreStringNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreStringNoEvents(MoreStringNoEvents other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreStringNoEvents Clone() {
      return new MoreStringNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_data_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> data_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoreStringNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoreStringNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoreStringNoEvents other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OneBytesNoEvents : pb::IMessage<OneBytesNoEvents> {
    private static readonly pb::MessageParser<OneBytesNoEvents> _parser = new pb::MessageParser<OneBytesNoEvents>(() => new OneBytesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneBytesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytesNoEvents(OneBytesNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBytesNoEvents Clone() {
      return new OneBytesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneBytesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneBytesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneBytesNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoreBytesNoEvents : pb::IMessage<MoreBytesNoEvents> {
    private static readonly pb::MessageParser<MoreBytesNoEvents> _parser = new pb::MessageParser<MoreBytesNoEvents>(() => new MoreBytesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoreBytesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytesNoEvents(MoreBytesNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoreBytesNoEvents Clone() {
      return new MoreBytesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoreBytesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoreBytesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoreBytesNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test int32, uint32, int64, uint64, and bool are all compatible
  /// </summary>
  public sealed partial class Int32MessageNoEvents : pb::IMessage<Int32MessageNoEvents> {
    private static readonly pb::MessageParser<Int32MessageNoEvents> _parser = new pb::MessageParser<Int32MessageNoEvents>(() => new Int32MessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int32MessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32MessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32MessageNoEvents(Int32MessageNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32MessageNoEvents Clone() {
      return new Int32MessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int32MessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int32MessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int32MessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Uint32MessageNoEvents : pb::IMessage<Uint32MessageNoEvents> {
    private static readonly pb::MessageParser<Uint32MessageNoEvents> _parser = new pb::MessageParser<Uint32MessageNoEvents>(() => new Uint32MessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uint32MessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32MessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32MessageNoEvents(Uint32MessageNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32MessageNoEvents Clone() {
      return new Uint32MessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private uint data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uint32MessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uint32MessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uint32MessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Int64MessageNoEvents : pb::IMessage<Int64MessageNoEvents> {
    private static readonly pb::MessageParser<Int64MessageNoEvents> _parser = new pb::MessageParser<Int64MessageNoEvents>(() => new Int64MessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64MessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64MessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64MessageNoEvents(Int64MessageNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64MessageNoEvents Clone() {
      return new Int64MessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private long data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64MessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64MessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0L) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64MessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0L) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Uint64MessageNoEvents : pb::IMessage<Uint64MessageNoEvents> {
    private static readonly pb::MessageParser<Uint64MessageNoEvents> _parser = new pb::MessageParser<Uint64MessageNoEvents>(() => new Uint64MessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uint64MessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64MessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64MessageNoEvents(Uint64MessageNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint64MessageNoEvents Clone() {
      return new Uint64MessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private ulong data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uint64MessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uint64MessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0UL) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uint64MessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0UL) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoolMessageNoEvents : pb::IMessage<BoolMessageNoEvents> {
    private static readonly pb::MessageParser<BoolMessageNoEvents> _parser = new pb::MessageParser<BoolMessageNoEvents>(() => new BoolMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessageNoEvents(BoolMessageNoEvents other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolMessageNoEvents Clone() {
      return new BoolMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private bool data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != false) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != false) {
        output.WriteRawTag(8);
        output.WriteBool(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolMessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.Data != false) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test oneofs.
  /// </summary>
  public sealed partial class TestOneofNoEvents : pb::IMessage<TestOneofNoEvents> {
    private static readonly pb::MessageParser<TestOneofNoEvents> _parser = new pb::MessageParser<TestOneofNoEvents>(() => new TestOneofNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestOneofNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofNoEvents(TestOneofNoEvents other) : this() {
      switch (other.FooCase) {
        case FooOneofCase.FooInt:
          FooInt = other.FooInt;
          break;
        case FooOneofCase.FooString:
          FooString = other.FooString;
          break;
        case FooOneofCase.FooMessage:
          FooMessage = other.FooMessage.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofNoEvents Clone() {
      return new TestOneofNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "foo_int" field.</summary>
    public const int FooIntFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FooInt {
      get { return fooCase_ == FooOneofCase.FooInt ? (int) foo_ : 0; }
      set {
        foo_ = value;
        fooCase_ = FooOneofCase.FooInt;
      }
    }

    /// <summary>Field number for the "foo_string" field.</summary>
    public const int FooStringFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FooString {
      get { return fooCase_ == FooOneofCase.FooString ? (string) foo_ : ""; }
      set {
        foo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fooCase_ = FooOneofCase.FooString;
      }
    }

    /// <summary>Field number for the "foo_message" field.</summary>
    public const int FooMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.TestProtos.TestAllTypesNoEvents FooMessage {
      get { return fooCase_ == FooOneofCase.FooMessage ? (global::Google.Protobuf.TestProtos.TestAllTypesNoEvents) foo_ : null; }
      set {
        foo_ = value;
        fooCase_ = value == null ? FooOneofCase.None : FooOneofCase.FooMessage;
      }
    }

    private object foo_;
    /// <summary>Enum of possible cases for the "foo" oneof.</summary>
    public enum FooOneofCase {
      None = 0,
      FooInt = 1,
      FooString = 2,
      FooMessage = 3,
    }
    private FooOneofCase fooCase_ = FooOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooOneofCase FooCase {
      get { return fooCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoo() {
      fooCase_ = FooOneofCase.None;
      foo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestOneofNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestOneofNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FooInt != other.FooInt) return false;
      if (FooString != other.FooString) return false;
      if (!object.Equals(FooMessage, other.FooMessage)) return false;
      if (FooCase != other.FooCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fooCase_ == FooOneofCase.FooInt) hash ^= FooInt.GetHashCode();
      if (fooCase_ == FooOneofCase.FooString) hash ^= FooString.GetHashCode();
      if (fooCase_ == FooOneofCase.FooMessage) hash ^= FooMessage.GetHashCode();
      hash ^= (int) fooCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fooCase_ == FooOneofCase.FooInt) {
        output.WriteRawTag(8);
        output.WriteInt32(FooInt);
      }
      if (fooCase_ == FooOneofCase.FooString) {
        output.WriteRawTag(18);
        output.WriteString(FooString);
      }
      if (fooCase_ == FooOneofCase.FooMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(FooMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fooCase_ == FooOneofCase.FooInt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FooInt);
      }
      if (fooCase_ == FooOneofCase.FooString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FooString);
      }
      if (fooCase_ == FooOneofCase.FooMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FooMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestOneofNoEvents other) {
      if (other == null) {
        return;
      }
      switch (other.FooCase) {
        case FooOneofCase.FooInt:
          FooInt = other.FooInt;
          break;
        case FooOneofCase.FooString:
          FooString = other.FooString;
          break;
        case FooOneofCase.FooMessage:
          if (FooMessage == null) {
            FooMessage = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
          }
          FooMessage.MergeFrom(other.FooMessage);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FooInt = input.ReadInt32();
            break;
          }
          case 18: {
            FooString = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Protobuf.TestProtos.TestAllTypesNoEvents subBuilder = new global::Google.Protobuf.TestProtos.TestAllTypesNoEvents();
            if (fooCase_ == FooOneofCase.FooMessage) {
              subBuilder.MergeFrom(FooMessage);
            }
            input.ReadMessage(subBuilder);
            FooMessage = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestPackedTypesNoEvents : pb::IMessage<TestPackedTypesNoEvents> {
    private static readonly pb::MessageParser<TestPackedTypesNoEvents> _parser = new pb::MessageParser<TestPackedTypesNoEvents>(() => new TestPackedTypesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestPackedTypesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypesNoEvents(TestPackedTypesNoEvents other) : this() {
      packedInt32_ = other.packedInt32_.Clone();
      packedInt64_ = other.packedInt64_.Clone();
      packedUint32_ = other.packedUint32_.Clone();
      packedUint64_ = other.packedUint64_.Clone();
      packedSint32_ = other.packedSint32_.Clone();
      packedSint64_ = other.packedSint64_.Clone();
      packedFixed32_ = other.packedFixed32_.Clone();
      packedFixed64_ = other.packedFixed64_.Clone();
      packedSfixed32_ = other.packedSfixed32_.Clone();
      packedSfixed64_ = other.packedSfixed64_.Clone();
      packedFloat_ = other.packedFloat_.Clone();
      packedDouble_ = other.packedDouble_.Clone();
      packedBool_ = other.packedBool_.Clone();
      packedEnum_ = other.packedEnum_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestPackedTypesNoEvents Clone() {
      return new TestPackedTypesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "packed_int32" field.</summary>
    public const int PackedInt32FieldNumber = 90;
    private static readonly pb::FieldCodec<int> _repeated_packedInt32_codec
        = pb::FieldCodec.ForInt32(722);
    private readonly pbc::RepeatedField<int> packedInt32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PackedInt32 {
      get { return packedInt32_; }
    }

    /// <summary>Field number for the "packed_int64" field.</summary>
    public const int PackedInt64FieldNumber = 91;
    private static readonly pb::FieldCodec<long> _repeated_packedInt64_codec
        = pb::FieldCodec.ForInt64(730);
    private readonly pbc::RepeatedField<long> packedInt64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PackedInt64 {
      get { return packedInt64_; }
    }

    /// <summary>Field number for the "packed_uint32" field.</summary>
    public const int PackedUint32FieldNumber = 92;
    private static readonly pb::FieldCodec<uint> _repeated_packedUint32_codec
        = pb::FieldCodec.ForUInt32(738);
    private readonly pbc::RepeatedField<uint> packedUint32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PackedUint32 {
      get { return packedUint32_; }
    }

    /// <summary>Field number for the "packed_uint64" field.</summary>
    public const int PackedUint64FieldNumber = 93;
    private static readonly pb::FieldCodec<ulong> _repeated_packedUint64_codec
        = pb::FieldCodec.ForUInt64(746);
    private readonly pbc::RepeatedField<ulong> packedUint64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PackedUint64 {
      get { return packedUint64_; }
    }

    /// <summary>Field number for the "packed_sint32" field.</summary>
    public const int PackedSint32FieldNumber = 94;
    private static readonly pb::FieldCodec<int> _repeated_packedSint32_codec
        = pb::FieldCodec.ForSInt32(754);
    private readonly pbc::RepeatedField<int> packedSint32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PackedSint32 {
      get { return packedSint32_; }
    }

    /// <summary>Field number for the "packed_sint64" field.</summary>
    public const int PackedSint64FieldNumber = 95;
    private static readonly pb::FieldCodec<long> _repeated_packedSint64_codec
        = pb::FieldCodec.ForSInt64(762);
    private readonly pbc::RepeatedField<long> packedSint64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PackedSint64 {
      get { return packedSint64_; }
    }

    /// <summary>Field number for the "packed_fixed32" field.</summary>
    public const int PackedFixed32FieldNumber = 96;
    private static readonly pb::FieldCodec<uint> _repeated_packedFixed32_codec
        = pb::FieldCodec.ForFixed32(770);
    private readonly pbc::RepeatedField<uint> packedFixed32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PackedFixed32 {
      get { return packedFixed32_; }
    }

    /// <summary>Field number for the "packed_fixed64" field.</summary>
    public const int PackedFixed64FieldNumber = 97;
    private static readonly pb::FieldCodec<ulong> _repeated_packedFixed64_codec
        = pb::FieldCodec.ForFixed64(778);
    private readonly pbc::RepeatedField<ulong> packedFixed64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PackedFixed64 {
      get { return packedFixed64_; }
    }

    /// <summary>Field number for the "packed_sfixed32" field.</summary>
    public const int PackedSfixed32FieldNumber = 98;
    private static readonly pb::FieldCodec<int> _repeated_packedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(786);
    private readonly pbc::RepeatedField<int> packedSfixed32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PackedSfixed32 {
      get { return packedSfixed32_; }
    }

    /// <summary>Field number for the "packed_sfixed64" field.</summary>
    public const int PackedSfixed64FieldNumber = 99;
    private static readonly pb::FieldCodec<long> _repeated_packedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(794);
    private readonly pbc::RepeatedField<long> packedSfixed64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PackedSfixed64 {
      get { return packedSfixed64_; }
    }

    /// <summary>Field number for the "packed_float" field.</summary>
    public const int PackedFloatFieldNumber = 100;
    private static readonly pb::FieldCodec<float> _repeated_packedFloat_codec
        = pb::FieldCodec.ForFloat(802);
    private readonly pbc::RepeatedField<float> packedFloat_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PackedFloat {
      get { return packedFloat_; }
    }

    /// <summary>Field number for the "packed_double" field.</summary>
    public const int PackedDoubleFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_packedDouble_codec
        = pb::FieldCodec.ForDouble(810);
    private readonly pbc::RepeatedField<double> packedDouble_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PackedDouble {
      get { return packedDouble_; }
    }

    /// <summary>Field number for the "packed_bool" field.</summary>
    public const int PackedBoolFieldNumber = 102;
    private static readonly pb::FieldCodec<bool> _repeated_packedBool_codec
        = pb::FieldCodec.ForBool(818);
    private readonly pbc::RepeatedField<bool> packedBool_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> PackedBool {
      get { return packedBool_; }
    }

    /// <summary>Field number for the "packed_enum" field.</summary>
    public const int PackedEnumFieldNumber = 103;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_packedEnum_codec
        = pb::FieldCodec.ForEnum(826, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> packedEnum_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> PackedEnum {
      get { return packedEnum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestPackedTypesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestPackedTypesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packedInt32_.Equals(other.packedInt32_)) return false;
      if(!packedInt64_.Equals(other.packedInt64_)) return false;
      if(!packedUint32_.Equals(other.packedUint32_)) return false;
      if(!packedUint64_.Equals(other.packedUint64_)) return false;
      if(!packedSint32_.Equals(other.packedSint32_)) return false;
      if(!packedSint64_.Equals(other.packedSint64_)) return false;
      if(!packedFixed32_.Equals(other.packedFixed32_)) return false;
      if(!packedFixed64_.Equals(other.packedFixed64_)) return false;
      if(!packedSfixed32_.Equals(other.packedSfixed32_)) return false;
      if(!packedSfixed64_.Equals(other.packedSfixed64_)) return false;
      if(!packedFloat_.Equals(other.packedFloat_)) return false;
      if(!packedDouble_.Equals(other.packedDouble_)) return false;
      if(!packedBool_.Equals(other.packedBool_)) return false;
      if(!packedEnum_.Equals(other.packedEnum_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packedInt32_.GetHashCode();
      hash ^= packedInt64_.GetHashCode();
      hash ^= packedUint32_.GetHashCode();
      hash ^= packedUint64_.GetHashCode();
      hash ^= packedSint32_.GetHashCode();
      hash ^= packedSint64_.GetHashCode();
      hash ^= packedFixed32_.GetHashCode();
      hash ^= packedFixed64_.GetHashCode();
      hash ^= packedSfixed32_.GetHashCode();
      hash ^= packedSfixed64_.GetHashCode();
      hash ^= packedFloat_.GetHashCode();
      hash ^= packedDouble_.GetHashCode();
      hash ^= packedBool_.GetHashCode();
      hash ^= packedEnum_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packedInt32_.WriteTo(output, _repeated_packedInt32_codec);
      packedInt64_.WriteTo(output, _repeated_packedInt64_codec);
      packedUint32_.WriteTo(output, _repeated_packedUint32_codec);
      packedUint64_.WriteTo(output, _repeated_packedUint64_codec);
      packedSint32_.WriteTo(output, _repeated_packedSint32_codec);
      packedSint64_.WriteTo(output, _repeated_packedSint64_codec);
      packedFixed32_.WriteTo(output, _repeated_packedFixed32_codec);
      packedFixed64_.WriteTo(output, _repeated_packedFixed64_codec);
      packedSfixed32_.WriteTo(output, _repeated_packedSfixed32_codec);
      packedSfixed64_.WriteTo(output, _repeated_packedSfixed64_codec);
      packedFloat_.WriteTo(output, _repeated_packedFloat_codec);
      packedDouble_.WriteTo(output, _repeated_packedDouble_codec);
      packedBool_.WriteTo(output, _repeated_packedBool_codec);
      packedEnum_.WriteTo(output, _repeated_packedEnum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packedInt32_.CalculateSize(_repeated_packedInt32_codec);
      size += packedInt64_.CalculateSize(_repeated_packedInt64_codec);
      size += packedUint32_.CalculateSize(_repeated_packedUint32_codec);
      size += packedUint64_.CalculateSize(_repeated_packedUint64_codec);
      size += packedSint32_.CalculateSize(_repeated_packedSint32_codec);
      size += packedSint64_.CalculateSize(_repeated_packedSint64_codec);
      size += packedFixed32_.CalculateSize(_repeated_packedFixed32_codec);
      size += packedFixed64_.CalculateSize(_repeated_packedFixed64_codec);
      size += packedSfixed32_.CalculateSize(_repeated_packedSfixed32_codec);
      size += packedSfixed64_.CalculateSize(_repeated_packedSfixed64_codec);
      size += packedFloat_.CalculateSize(_repeated_packedFloat_codec);
      size += packedDouble_.CalculateSize(_repeated_packedDouble_codec);
      size += packedBool_.CalculateSize(_repeated_packedBool_codec);
      size += packedEnum_.CalculateSize(_repeated_packedEnum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestPackedTypesNoEvents other) {
      if (other == null) {
        return;
      }
      packedInt32_.Add(other.packedInt32_);
      packedInt64_.Add(other.packedInt64_);
      packedUint32_.Add(other.packedUint32_);
      packedUint64_.Add(other.packedUint64_);
      packedSint32_.Add(other.packedSint32_);
      packedSint64_.Add(other.packedSint64_);
      packedFixed32_.Add(other.packedFixed32_);
      packedFixed64_.Add(other.packedFixed64_);
      packedSfixed32_.Add(other.packedSfixed32_);
      packedSfixed64_.Add(other.packedSfixed64_);
      packedFloat_.Add(other.packedFloat_);
      packedDouble_.Add(other.packedDouble_);
      packedBool_.Add(other.packedBool_);
      packedEnum_.Add(other.packedEnum_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722:
          case 720: {
            packedInt32_.AddEntriesFrom(input, _repeated_packedInt32_codec);
            break;
          }
          case 730:
          case 728: {
            packedInt64_.AddEntriesFrom(input, _repeated_packedInt64_codec);
            break;
          }
          case 738:
          case 736: {
            packedUint32_.AddEntriesFrom(input, _repeated_packedUint32_codec);
            break;
          }
          case 746:
          case 744: {
            packedUint64_.AddEntriesFrom(input, _repeated_packedUint64_codec);
            break;
          }
          case 754:
          case 752: {
            packedSint32_.AddEntriesFrom(input, _repeated_packedSint32_codec);
            break;
          }
          case 762:
          case 760: {
            packedSint64_.AddEntriesFrom(input, _repeated_packedSint64_codec);
            break;
          }
          case 770:
          case 773: {
            packedFixed32_.AddEntriesFrom(input, _repeated_packedFixed32_codec);
            break;
          }
          case 778:
          case 777: {
            packedFixed64_.AddEntriesFrom(input, _repeated_packedFixed64_codec);
            break;
          }
          case 786:
          case 789: {
            packedSfixed32_.AddEntriesFrom(input, _repeated_packedSfixed32_codec);
            break;
          }
          case 794:
          case 793: {
            packedSfixed64_.AddEntriesFrom(input, _repeated_packedSfixed64_codec);
            break;
          }
          case 802:
          case 805: {
            packedFloat_.AddEntriesFrom(input, _repeated_packedFloat_codec);
            break;
          }
          case 810:
          case 809: {
            packedDouble_.AddEntriesFrom(input, _repeated_packedDouble_codec);
            break;
          }
          case 818:
          case 816: {
            packedBool_.AddEntriesFrom(input, _repeated_packedBool_codec);
            break;
          }
          case 826:
          case 824: {
            packedEnum_.AddEntriesFrom(input, _repeated_packedEnum_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A message with the same fields as TestPackedTypes, but without packing. Used
  /// to test packed &lt;-> unpacked wire compatibility.
  /// </summary>
  public sealed partial class TestUnpackedTypesNoEvents : pb::IMessage<TestUnpackedTypesNoEvents> {
    private static readonly pb::MessageParser<TestUnpackedTypesNoEvents> _parser = new pb::MessageParser<TestUnpackedTypesNoEvents>(() => new TestUnpackedTypesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestUnpackedTypesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypesNoEvents(TestUnpackedTypesNoEvents other) : this() {
      unpackedInt32_ = other.unpackedInt32_.Clone();
      unpackedInt64_ = other.unpackedInt64_.Clone();
      unpackedUint32_ = other.unpackedUint32_.Clone();
      unpackedUint64_ = other.unpackedUint64_.Clone();
      unpackedSint32_ = other.unpackedSint32_.Clone();
      unpackedSint64_ = other.unpackedSint64_.Clone();
      unpackedFixed32_ = other.unpackedFixed32_.Clone();
      unpackedFixed64_ = other.unpackedFixed64_.Clone();
      unpackedSfixed32_ = other.unpackedSfixed32_.Clone();
      unpackedSfixed64_ = other.unpackedSfixed64_.Clone();
      unpackedFloat_ = other.unpackedFloat_.Clone();
      unpackedDouble_ = other.unpackedDouble_.Clone();
      unpackedBool_ = other.unpackedBool_.Clone();
      unpackedEnum_ = other.unpackedEnum_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestUnpackedTypesNoEvents Clone() {
      return new TestUnpackedTypesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "unpacked_int32" field.</summary>
    public const int UnpackedInt32FieldNumber = 90;
    private static readonly pb::FieldCodec<int> _repeated_unpackedInt32_codec
        = pb::FieldCodec.ForInt32(720);
    private readonly pbc::RepeatedField<int> unpackedInt32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnpackedInt32 {
      get { return unpackedInt32_; }
    }

    /// <summary>Field number for the "unpacked_int64" field.</summary>
    public const int UnpackedInt64FieldNumber = 91;
    private static readonly pb::FieldCodec<long> _repeated_unpackedInt64_codec
        = pb::FieldCodec.ForInt64(728);
    private readonly pbc::RepeatedField<long> unpackedInt64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UnpackedInt64 {
      get { return unpackedInt64_; }
    }

    /// <summary>Field number for the "unpacked_uint32" field.</summary>
    public const int UnpackedUint32FieldNumber = 92;
    private static readonly pb::FieldCodec<uint> _repeated_unpackedUint32_codec
        = pb::FieldCodec.ForUInt32(736);
    private readonly pbc::RepeatedField<uint> unpackedUint32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnpackedUint32 {
      get { return unpackedUint32_; }
    }

    /// <summary>Field number for the "unpacked_uint64" field.</summary>
    public const int UnpackedUint64FieldNumber = 93;
    private static readonly pb::FieldCodec<ulong> _repeated_unpackedUint64_codec
        = pb::FieldCodec.ForUInt64(744);
    private readonly pbc::RepeatedField<ulong> unpackedUint64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UnpackedUint64 {
      get { return unpackedUint64_; }
    }

    /// <summary>Field number for the "unpacked_sint32" field.</summary>
    public const int UnpackedSint32FieldNumber = 94;
    private static readonly pb::FieldCodec<int> _repeated_unpackedSint32_codec
        = pb::FieldCodec.ForSInt32(752);
    private readonly pbc::RepeatedField<int> unpackedSint32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnpackedSint32 {
      get { return unpackedSint32_; }
    }

    /// <summary>Field number for the "unpacked_sint64" field.</summary>
    public const int UnpackedSint64FieldNumber = 95;
    private static readonly pb::FieldCodec<long> _repeated_unpackedSint64_codec
        = pb::FieldCodec.ForSInt64(760);
    private readonly pbc::RepeatedField<long> unpackedSint64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UnpackedSint64 {
      get { return unpackedSint64_; }
    }

    /// <summary>Field number for the "unpacked_fixed32" field.</summary>
    public const int UnpackedFixed32FieldNumber = 96;
    private static readonly pb::FieldCodec<uint> _repeated_unpackedFixed32_codec
        = pb::FieldCodec.ForFixed32(773);
    private readonly pbc::RepeatedField<uint> unpackedFixed32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnpackedFixed32 {
      get { return unpackedFixed32_; }
    }

    /// <summary>Field number for the "unpacked_fixed64" field.</summary>
    public const int UnpackedFixed64FieldNumber = 97;
    private static readonly pb::FieldCodec<ulong> _repeated_unpackedFixed64_codec
        = pb::FieldCodec.ForFixed64(777);
    private readonly pbc::RepeatedField<ulong> unpackedFixed64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UnpackedFixed64 {
      get { return unpackedFixed64_; }
    }

    /// <summary>Field number for the "unpacked_sfixed32" field.</summary>
    public const int UnpackedSfixed32FieldNumber = 98;
    private static readonly pb::FieldCodec<int> _repeated_unpackedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(789);
    private readonly pbc::RepeatedField<int> unpackedSfixed32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnpackedSfixed32 {
      get { return unpackedSfixed32_; }
    }

    /// <summary>Field number for the "unpacked_sfixed64" field.</summary>
    public const int UnpackedSfixed64FieldNumber = 99;
    private static readonly pb::FieldCodec<long> _repeated_unpackedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(793);
    private readonly pbc::RepeatedField<long> unpackedSfixed64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UnpackedSfixed64 {
      get { return unpackedSfixed64_; }
    }

    /// <summary>Field number for the "unpacked_float" field.</summary>
    public const int UnpackedFloatFieldNumber = 100;
    private static readonly pb::FieldCodec<float> _repeated_unpackedFloat_codec
        = pb::FieldCodec.ForFloat(805);
    private readonly pbc::RepeatedField<float> unpackedFloat_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> UnpackedFloat {
      get { return unpackedFloat_; }
    }

    /// <summary>Field number for the "unpacked_double" field.</summary>
    public const int UnpackedDoubleFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_unpackedDouble_codec
        = pb::FieldCodec.ForDouble(809);
    private readonly pbc::RepeatedField<double> unpackedDouble_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> UnpackedDouble {
      get { return unpackedDouble_; }
    }

    /// <summary>Field number for the "unpacked_bool" field.</summary>
    public const int UnpackedBoolFieldNumber = 102;
    private static readonly pb::FieldCodec<bool> _repeated_unpackedBool_codec
        = pb::FieldCodec.ForBool(816);
    private readonly pbc::RepeatedField<bool> unpackedBool_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> UnpackedBool {
      get { return unpackedBool_; }
    }

    /// <summary>Field number for the "unpacked_enum" field.</summary>
    public const int UnpackedEnumFieldNumber = 103;
    private static readonly pb::FieldCodec<global::Google.Protobuf.TestProtos.ForeignEnum> _repeated_unpackedEnum_codec
        = pb::FieldCodec.ForEnum(824, x => (int) x, x => (global::Google.Protobuf.TestProtos.ForeignEnum) x);
    private readonly pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> unpackedEnum_ = new pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.TestProtos.ForeignEnum> UnpackedEnum {
      get { return unpackedEnum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestUnpackedTypesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestUnpackedTypesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unpackedInt32_.Equals(other.unpackedInt32_)) return false;
      if(!unpackedInt64_.Equals(other.unpackedInt64_)) return false;
      if(!unpackedUint32_.Equals(other.unpackedUint32_)) return false;
      if(!unpackedUint64_.Equals(other.unpackedUint64_)) return false;
      if(!unpackedSint32_.Equals(other.unpackedSint32_)) return false;
      if(!unpackedSint64_.Equals(other.unpackedSint64_)) return false;
      if(!unpackedFixed32_.Equals(other.unpackedFixed32_)) return false;
      if(!unpackedFixed64_.Equals(other.unpackedFixed64_)) return false;
      if(!unpackedSfixed32_.Equals(other.unpackedSfixed32_)) return false;
      if(!unpackedSfixed64_.Equals(other.unpackedSfixed64_)) return false;
      if(!unpackedFloat_.Equals(other.unpackedFloat_)) return false;
      if(!unpackedDouble_.Equals(other.unpackedDouble_)) return false;
      if(!unpackedBool_.Equals(other.unpackedBool_)) return false;
      if(!unpackedEnum_.Equals(other.unpackedEnum_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unpackedInt32_.GetHashCode();
      hash ^= unpackedInt64_.GetHashCode();
      hash ^= unpackedUint32_.GetHashCode();
      hash ^= unpackedUint64_.GetHashCode();
      hash ^= unpackedSint32_.GetHashCode();
      hash ^= unpackedSint64_.GetHashCode();
      hash ^= unpackedFixed32_.GetHashCode();
      hash ^= unpackedFixed64_.GetHashCode();
      hash ^= unpackedSfixed32_.GetHashCode();
      hash ^= unpackedSfixed64_.GetHashCode();
      hash ^= unpackedFloat_.GetHashCode();
      hash ^= unpackedDouble_.GetHashCode();
      hash ^= unpackedBool_.GetHashCode();
      hash ^= unpackedEnum_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unpackedInt32_.WriteTo(output, _repeated_unpackedInt32_codec);
      unpackedInt64_.WriteTo(output, _repeated_unpackedInt64_codec);
      unpackedUint32_.WriteTo(output, _repeated_unpackedUint32_codec);
      unpackedUint64_.WriteTo(output, _repeated_unpackedUint64_codec);
      unpackedSint32_.WriteTo(output, _repeated_unpackedSint32_codec);
      unpackedSint64_.WriteTo(output, _repeated_unpackedSint64_codec);
      unpackedFixed32_.WriteTo(output, _repeated_unpackedFixed32_codec);
      unpackedFixed64_.WriteTo(output, _repeated_unpackedFixed64_codec);
      unpackedSfixed32_.WriteTo(output, _repeated_unpackedSfixed32_codec);
      unpackedSfixed64_.WriteTo(output, _repeated_unpackedSfixed64_codec);
      unpackedFloat_.WriteTo(output, _repeated_unpackedFloat_codec);
      unpackedDouble_.WriteTo(output, _repeated_unpackedDouble_codec);
      unpackedBool_.WriteTo(output, _repeated_unpackedBool_codec);
      unpackedEnum_.WriteTo(output, _repeated_unpackedEnum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unpackedInt32_.CalculateSize(_repeated_unpackedInt32_codec);
      size += unpackedInt64_.CalculateSize(_repeated_unpackedInt64_codec);
      size += unpackedUint32_.CalculateSize(_repeated_unpackedUint32_codec);
      size += unpackedUint64_.CalculateSize(_repeated_unpackedUint64_codec);
      size += unpackedSint32_.CalculateSize(_repeated_unpackedSint32_codec);
      size += unpackedSint64_.CalculateSize(_repeated_unpackedSint64_codec);
      size += unpackedFixed32_.CalculateSize(_repeated_unpackedFixed32_codec);
      size += unpackedFixed64_.CalculateSize(_repeated_unpackedFixed64_codec);
      size += unpackedSfixed32_.CalculateSize(_repeated_unpackedSfixed32_codec);
      size += unpackedSfixed64_.CalculateSize(_repeated_unpackedSfixed64_codec);
      size += unpackedFloat_.CalculateSize(_repeated_unpackedFloat_codec);
      size += unpackedDouble_.CalculateSize(_repeated_unpackedDouble_codec);
      size += unpackedBool_.CalculateSize(_repeated_unpackedBool_codec);
      size += unpackedEnum_.CalculateSize(_repeated_unpackedEnum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestUnpackedTypesNoEvents other) {
      if (other == null) {
        return;
      }
      unpackedInt32_.Add(other.unpackedInt32_);
      unpackedInt64_.Add(other.unpackedInt64_);
      unpackedUint32_.Add(other.unpackedUint32_);
      unpackedUint64_.Add(other.unpackedUint64_);
      unpackedSint32_.Add(other.unpackedSint32_);
      unpackedSint64_.Add(other.unpackedSint64_);
      unpackedFixed32_.Add(other.unpackedFixed32_);
      unpackedFixed64_.Add(other.unpackedFixed64_);
      unpackedSfixed32_.Add(other.unpackedSfixed32_);
      unpackedSfixed64_.Add(other.unpackedSfixed64_);
      unpackedFloat_.Add(other.unpackedFloat_);
      unpackedDouble_.Add(other.unpackedDouble_);
      unpackedBool_.Add(other.unpackedBool_);
      unpackedEnum_.Add(other.unpackedEnum_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722:
          case 720: {
            unpackedInt32_.AddEntriesFrom(input, _repeated_unpackedInt32_codec);
            break;
          }
          case 730:
          case 728: {
            unpackedInt64_.AddEntriesFrom(input, _repeated_unpackedInt64_codec);
            break;
          }
          case 738:
          case 736: {
            unpackedUint32_.AddEntriesFrom(input, _repeated_unpackedUint32_codec);
            break;
          }
          case 746:
          case 744: {
            unpackedUint64_.AddEntriesFrom(input, _repeated_unpackedUint64_codec);
            break;
          }
          case 754:
          case 752: {
            unpackedSint32_.AddEntriesFrom(input, _repeated_unpackedSint32_codec);
            break;
          }
          case 762:
          case 760: {
            unpackedSint64_.AddEntriesFrom(input, _repeated_unpackedSint64_codec);
            break;
          }
          case 770:
          case 773: {
            unpackedFixed32_.AddEntriesFrom(input, _repeated_unpackedFixed32_codec);
            break;
          }
          case 778:
          case 777: {
            unpackedFixed64_.AddEntriesFrom(input, _repeated_unpackedFixed64_codec);
            break;
          }
          case 786:
          case 789: {
            unpackedSfixed32_.AddEntriesFrom(input, _repeated_unpackedSfixed32_codec);
            break;
          }
          case 794:
          case 793: {
            unpackedSfixed64_.AddEntriesFrom(input, _repeated_unpackedSfixed64_codec);
            break;
          }
          case 802:
          case 805: {
            unpackedFloat_.AddEntriesFrom(input, _repeated_unpackedFloat_codec);
            break;
          }
          case 810:
          case 809: {
            unpackedDouble_.AddEntriesFrom(input, _repeated_unpackedDouble_codec);
            break;
          }
          case 818:
          case 816: {
            unpackedBool_.AddEntriesFrom(input, _repeated_unpackedBool_codec);
            break;
          }
          case 826:
          case 824: {
            unpackedEnum_.AddEntriesFrom(input, _repeated_unpackedEnum_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestRepeatedScalarDifferentTagSizesNoEvents : pb::IMessage<TestRepeatedScalarDifferentTagSizesNoEvents> {
    private static readonly pb::MessageParser<TestRepeatedScalarDifferentTagSizesNoEvents> _parser = new pb::MessageParser<TestRepeatedScalarDifferentTagSizesNoEvents>(() => new TestRepeatedScalarDifferentTagSizesNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRepeatedScalarDifferentTagSizesNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizesNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizesNoEvents(TestRepeatedScalarDifferentTagSizesNoEvents other) : this() {
      repeatedFixed32_ = other.repeatedFixed32_.Clone();
      repeatedInt32_ = other.repeatedInt32_.Clone();
      repeatedFixed64_ = other.repeatedFixed64_.Clone();
      repeatedInt64_ = other.repeatedInt64_.Clone();
      repeatedFloat_ = other.repeatedFloat_.Clone();
      repeatedUint64_ = other.repeatedUint64_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRepeatedScalarDifferentTagSizesNoEvents Clone() {
      return new TestRepeatedScalarDifferentTagSizesNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "repeated_fixed32" field.</summary>
    public const int RepeatedFixed32FieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedFixed32_codec
        = pb::FieldCodec.ForFixed32(98);
    private readonly pbc::RepeatedField<uint> repeatedFixed32_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Parsing repeated fixed size values used to fail. This message needs to be
    /// used in order to get a tag of the right size; all of the repeated fields
    /// in TestAllTypes didn't trigger the check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RepeatedFixed32 {
      get { return repeatedFixed32_; }
    }

    /// <summary>Field number for the "repeated_int32" field.</summary>
    public const int RepeatedInt32FieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_repeatedInt32_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> repeatedInt32_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Check for a varint type, just for good measure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedInt32 {
      get { return repeatedInt32_; }
    }

    /// <summary>Field number for the "repeated_fixed64" field.</summary>
    public const int RepeatedFixed64FieldNumber = 2046;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedFixed64_codec
        = pb::FieldCodec.ForFixed64(16370);
    private readonly pbc::RepeatedField<ulong> repeatedFixed64_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// These have two-byte tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedFixed64 {
      get { return repeatedFixed64_; }
    }

    /// <summary>Field number for the "repeated_int64" field.</summary>
    public const int RepeatedInt64FieldNumber = 2047;
    private static readonly pb::FieldCodec<long> _repeated_repeatedInt64_codec
        = pb::FieldCodec.ForInt64(16378);
    private readonly pbc::RepeatedField<long> repeatedInt64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedInt64 {
      get { return repeatedInt64_; }
    }

    /// <summary>Field number for the "repeated_float" field.</summary>
    public const int RepeatedFloatFieldNumber = 262142;
    private static readonly pb::FieldCodec<float> _repeated_repeatedFloat_codec
        = pb::FieldCodec.ForFloat(2097138);
    private readonly pbc::RepeatedField<float> repeatedFloat_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Three byte tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RepeatedFloat {
      get { return repeatedFloat_; }
    }

    /// <summary>Field number for the "repeated_uint64" field.</summary>
    public const int RepeatedUint64FieldNumber = 262143;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedUint64_codec
        = pb::FieldCodec.ForUInt64(2097146);
    private readonly pbc::RepeatedField<ulong> repeatedUint64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedUint64 {
      get { return repeatedUint64_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRepeatedScalarDifferentTagSizesNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRepeatedScalarDifferentTagSizesNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!repeatedFixed32_.Equals(other.repeatedFixed32_)) return false;
      if(!repeatedInt32_.Equals(other.repeatedInt32_)) return false;
      if(!repeatedFixed64_.Equals(other.repeatedFixed64_)) return false;
      if(!repeatedInt64_.Equals(other.repeatedInt64_)) return false;
      if(!repeatedFloat_.Equals(other.repeatedFloat_)) return false;
      if(!repeatedUint64_.Equals(other.repeatedUint64_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= repeatedFixed32_.GetHashCode();
      hash ^= repeatedInt32_.GetHashCode();
      hash ^= repeatedFixed64_.GetHashCode();
      hash ^= repeatedInt64_.GetHashCode();
      hash ^= repeatedFloat_.GetHashCode();
      hash ^= repeatedUint64_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      repeatedFixed32_.WriteTo(output, _repeated_repeatedFixed32_codec);
      repeatedInt32_.WriteTo(output, _repeated_repeatedInt32_codec);
      repeatedFixed64_.WriteTo(output, _repeated_repeatedFixed64_codec);
      repeatedInt64_.WriteTo(output, _repeated_repeatedInt64_codec);
      repeatedFloat_.WriteTo(output, _repeated_repeatedFloat_codec);
      repeatedUint64_.WriteTo(output, _repeated_repeatedUint64_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += repeatedFixed32_.CalculateSize(_repeated_repeatedFixed32_codec);
      size += repeatedInt32_.CalculateSize(_repeated_repeatedInt32_codec);
      size += repeatedFixed64_.CalculateSize(_repeated_repeatedFixed64_codec);
      size += repeatedInt64_.CalculateSize(_repeated_repeatedInt64_codec);
      size += repeatedFloat_.CalculateSize(_repeated_repeatedFloat_codec);
      size += repeatedUint64_.CalculateSize(_repeated_repeatedUint64_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRepeatedScalarDifferentTagSizesNoEvents other) {
      if (other == null) {
        return;
      }
      repeatedFixed32_.Add(other.repeatedFixed32_);
      repeatedInt32_.Add(other.repeatedInt32_);
      repeatedFixed64_.Add(other.repeatedFixed64_);
      repeatedInt64_.Add(other.repeatedInt64_);
      repeatedFloat_.Add(other.repeatedFloat_);
      repeatedUint64_.Add(other.repeatedUint64_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 98:
          case 101: {
            repeatedFixed32_.AddEntriesFrom(input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 106:
          case 104: {
            repeatedInt32_.AddEntriesFrom(input, _repeated_repeatedInt32_codec);
            break;
          }
          case 16370:
          case 16369: {
            repeatedFixed64_.AddEntriesFrom(input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 16378:
          case 16376: {
            repeatedInt64_.AddEntriesFrom(input, _repeated_repeatedInt64_codec);
            break;
          }
          case 2097138:
          case 2097141: {
            repeatedFloat_.AddEntriesFrom(input, _repeated_repeatedFloat_codec);
            break;
          }
          case 2097146:
          case 2097144: {
            repeatedUint64_.AddEntriesFrom(input, _repeated_repeatedUint64_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestCommentInjectionMessageNoEvents : pb::IMessage<TestCommentInjectionMessageNoEvents> {
    private static readonly pb::MessageParser<TestCommentInjectionMessageNoEvents> _parser = new pb::MessageParser<TestCommentInjectionMessageNoEvents>(() => new TestCommentInjectionMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCommentInjectionMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessageNoEvents(TestCommentInjectionMessageNoEvents other) : this() {
      a_ = other.a_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCommentInjectionMessageNoEvents Clone() {
      return new TestCommentInjectionMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private string a_ = "";
    /// <summary>
    /// */ &lt;- This should not close the generated doc comment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string A {
      get { return a_; }
      set {
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCommentInjectionMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCommentInjectionMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A.Length != 0) hash ^= A.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(A);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCommentInjectionMessageNoEvents other) {
      if (other == null) {
        return;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            A = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Test that RPC services work.
  /// </summary>
  public sealed partial class FooRequestNoEvents : pb::IMessage<FooRequestNoEvents> {
    private static readonly pb::MessageParser<FooRequestNoEvents> _parser = new pb::MessageParser<FooRequestNoEvents>(() => new FooRequestNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooRequestNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequestNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequestNoEvents(FooRequestNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooRequestNoEvents Clone() {
      return new FooRequestNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooRequestNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooRequestNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooRequestNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FooResponseNoEvents : pb::IMessage<FooResponseNoEvents> {
    private static readonly pb::MessageParser<FooResponseNoEvents> _parser = new pb::MessageParser<FooResponseNoEvents>(() => new FooResponseNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooResponseNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponseNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponseNoEvents(FooResponseNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooResponseNoEvents Clone() {
      return new FooResponseNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooResponseNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooResponseNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooResponseNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FooClientMessageNoEvents : pb::IMessage<FooClientMessageNoEvents> {
    private static readonly pb::MessageParser<FooClientMessageNoEvents> _parser = new pb::MessageParser<FooClientMessageNoEvents>(() => new FooClientMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooClientMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessageNoEvents(FooClientMessageNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooClientMessageNoEvents Clone() {
      return new FooClientMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooClientMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooClientMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooClientMessageNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FooServerMessageNoEvents : pb::IMessage<FooServerMessageNoEvents> {
    private static readonly pb::MessageParser<FooServerMessageNoEvents> _parser = new pb::MessageParser<FooServerMessageNoEvents>(() => new FooServerMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FooServerMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessageNoEvents(FooServerMessageNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FooServerMessageNoEvents Clone() {
      return new FooServerMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FooServerMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FooServerMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FooServerMessageNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BarRequestNoEvents : pb::IMessage<BarRequestNoEvents> {
    private static readonly pb::MessageParser<BarRequestNoEvents> _parser = new pb::MessageParser<BarRequestNoEvents>(() => new BarRequestNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarRequestNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequestNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequestNoEvents(BarRequestNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRequestNoEvents Clone() {
      return new BarRequestNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarRequestNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarRequestNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarRequestNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BarResponseNoEvents : pb::IMessage<BarResponseNoEvents> {
    private static readonly pb::MessageParser<BarResponseNoEvents> _parser = new pb::MessageParser<BarResponseNoEvents>(() => new BarResponseNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarResponseNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponseNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponseNoEvents(BarResponseNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarResponseNoEvents Clone() {
      return new BarResponseNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarResponseNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarResponseNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarResponseNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TestEmptyMessageNoEvents : pb::IMessage<TestEmptyMessageNoEvents> {
    private static readonly pb::MessageParser<TestEmptyMessageNoEvents> _parser = new pb::MessageParser<TestEmptyMessageNoEvents>(() => new TestEmptyMessageNoEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestEmptyMessageNoEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.TestProtos.UnittestProto3Reflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessageNoEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessageNoEvents(TestEmptyMessageNoEvents other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestEmptyMessageNoEvents Clone() {
      return new TestEmptyMessageNoEvents(this);
    }

    public static bool IsEventSourced = false;

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestEmptyMessageNoEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestEmptyMessageNoEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestEmptyMessageNoEvents other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
